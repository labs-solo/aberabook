"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[7996],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,g=u["".concat(p,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},12073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(83117),i=(n(67294),n(3905));const r={title:"Ordering & Pagination",description:"Use Strapi's Entity Service API to order and paginate queries results.",displayed_sidebar:"devDocsSidebar"},o="Ordering & Pagination",l={unversionedId:"dev-docs/api/entity-service/order-pagination",id:"dev-docs/api/entity-service/order-pagination",title:"Ordering & Pagination",description:"Use Strapi's Entity Service API to order and paginate queries results.",source:"@site/docs/dev-docs/api/entity-service/order-pagination.md",sourceDirName:"dev-docs/api/entity-service",slug:"/dev-docs/api/entity-service/order-pagination",permalink:"/aberabook/dev-docs/api/entity-service/order-pagination",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/entity-service/order-pagination.md",tags:[],version:"current",frontMatter:{title:"Ordering & Pagination",description:"Use Strapi's Entity Service API to order and paginate queries results.",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Populating",permalink:"/aberabook/dev-docs/api/entity-service/populate"},next:{title:"Components and Dynamic Zones",permalink:"/aberabook/dev-docs/api/entity-service/components-dynamic-zones"}},p={},d=[{value:"Ordering",id:"ordering",level:2},{value:"Single",id:"single",level:3},{value:"Multiple",id:"multiple",level:3},{value:"Relational ordering",id:"relational-ordering",level:3},{value:"Pagination",id:"pagination",level:2}],s=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},c=s("Tabs"),u=s("TabItem"),m={toc:d};function g(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ordering--pagination"},"Ordering & Pagination"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service API")," offers the ability to ",(0,i.kt)("a",{parentName:"p",href:"#ordering"},"order")," and ",(0,i.kt)("a",{parentName:"p",href:"#pagination"},"paginate")," results found with its ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service/crud#findmany"},"findMany()")," method."),(0,i.kt)("h2",{id:"ordering"},"Ordering"),(0,i.kt)("p",null,"To order results returned by the Entity Service API, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," parameter. Results can be ordered based on a ",(0,i.kt)("a",{parentName:"p",href:"#single"},"single")," or on ",(0,i.kt)("a",{parentName:"p",href:"#multiple"},"multiple")," attribute(s) and can also use ",(0,i.kt)("a",{parentName:"p",href:"#relational-ordering"},"relational ordering"),"."),(0,i.kt)("h3",{id:"single"},"Single"),(0,i.kt)("p",null,"To order results by a single field, pass it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," parameter either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"as a ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," to sort with the default ascending order, or"),(0,i.kt)("li",{parentName:"ul"},"as an ",(0,i.kt)("inlineCode",{parentName:"li"},"object")," to define both the field name and the order (i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},"'asc'")," for ascending order or ",(0,i.kt)("inlineCode",{parentName:"li"},"'desc'")," for descending order)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.findMany('api::article.article', {\n  sort: 'id',\n});\n\n// single with direction\nstrapi.entityService.findMany('api::article.article', {\n  sort: { id: 'desc' },\n});\n")),(0,i.kt)("h3",{id:"multiple"},"Multiple"),(0,i.kt)("p",null,"To order results by multiple fields, pass the fields as an array to the ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," parameter either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"as an array of strings to sort multiple fields using the default ascending order, or"),(0,i.kt)("li",{parentName:"ul"},"as an array of objects to define both the field name and the order (i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},"'asc'")," for ascending order or ",(0,i.kt)("inlineCode",{parentName:"li"},"'desc'")," for descending order)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.findMany('api::article.article', {\n  sort: ['publishDate', 'name'],\n});\n\n// multiple with direction\nstrapi.entityService.findMany('api::article.article', {\n  sort: [{ title: 'asc' }, { publishedAt: 'desc' }],\n});\n")),(0,i.kt)("h3",{id:"relational-ordering"},"Relational ordering"),(0,i.kt)("p",null,"Fields can also be sorted based on fields from relations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.findMany('api::article.article', {\n  sort: {\n    author: {\n      name: 'asc',\n    },\n  },\n});\n")),(0,i.kt)("h2",{id:"pagination"},"Pagination"),(0,i.kt)("p",null,"Results can be paginated using 2 different strategies (see ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/sort-pagination#pagination"},"REST API documentation")," for more details):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"pagination by page, when defining the ",(0,i.kt)("inlineCode",{parentName:"li"},"page")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"pageSize")," parameters,"),(0,i.kt)("li",{parentName:"ul"},"and pagination by offset, when defining the ",(0,i.kt)("inlineCode",{parentName:"li"},"start")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"limit")," parameters.")),(0,i.kt)("p",null,"2 different functions can be used to paginate results with the Entity Service API and accept different pagination strategies: "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Function name"),(0,i.kt)("th",{parentName:"tr",align:null},"Possible pagination method(s)"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"findMany()")),(0,i.kt)("td",{parentName:"tr",align:null},"Offset pagination only")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"findPage()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("ul",null,(0,i.kt)("li",null,"Offset pagination"),(0,i.kt)("li",null,"Page pagination")))))),(0,i.kt)(c,{mdxType:"Tabs"},(0,i.kt)(u,{value:"find-many",label:"findMany()",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"findMany()")," should only be used with offset pagination:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.findMany('api::article.article', {\n  start: 10,\n  limit: 15,\n});\n"))),(0,i.kt)(u,{value:"find-page",label:"findPage()",mdxType:"TabItem"},(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"findPage()")," accepts both offset and page pagination, provided you use only one pagination strategy per query:"),(0,i.kt)(c,{mdxType:"Tabs"},(0,i.kt)(u,{value:"offset-pagination",label:"Offset pagination",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.findPage('api::article.article', {\n  start: 10,\n  limit: 15,\n});\n"))),(0,i.kt)(u,{value:"page-pagination",label:"Page pagination",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.findPage('api::article.article', {\n  page: 1,\n  pageSize: 15,\n});\n")))))))}g.isMDXComponent=!0}}]);