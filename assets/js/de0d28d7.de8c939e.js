"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[1919],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},81660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const o={title:"Go",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Go."},i="Getting Started with GO",s={unversionedId:"dev-docs/integrations/go",id:"dev-docs/integrations/go",title:"Go",description:"Integrate Strapi with Go.",source:"@site/docs/dev-docs/integrations/go.md",sourceDirName:"dev-docs/integrations",slug:"/dev-docs/integrations/go",permalink:"/aberabook/dev-docs/integrations/go",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/integrations/go.md",tags:[],version:"current",frontMatter:{title:"Go",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Go."},sidebar:"devDocsSidebar",previous:{title:"Gridsome",permalink:"/aberabook/dev-docs/integrations/gridsome"},next:{title:"GraphQL",permalink:"/aberabook/dev-docs/integrations/graphql"}},l={},p=[{value:"Create a Go file",id:"create-a-go-file",level:2},{value:"GET Request your collection type",id:"get-request-your-collection-type",level:2},{value:"Example",id:"example",level:3},{value:"POST Request your collection type",id:"post-request-your-collection-type",level:2},{value:"Example",id:"example-1",level:3},{value:"PUT Request your collection type",id:"put-request-your-collection-type",level:2},{value:"Example",id:"example-2",level:3}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=d("ApiCall"),c=d("Request"),m=d("Response"),h={toc:p};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started-with-go"},"Getting Started with GO"),(0,a.kt)("p",null,"This integration guide follows the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/quick-start"},"Quick Start Guide"),' and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL ',(0,a.kt)("a",{parentName:"p",href:"http://localhost:1337/api/restaurants"},"http://localhost:1337/api/restaurants"),"."),(0,a.kt)("p",null,"If you haven't gone through the Quick Start guide, the way you request a Strapi API with ",(0,a.kt)("a",{parentName:"p",href:"https://golang.org/"},"GO")," remains the same except that you do not fetch the same content."),(0,a.kt)("h2",{id:"create-a-go-file"},"Create a Go file"),(0,a.kt)("p",null,"Be sure to have ",(0,a.kt)("a",{parentName:"p",href:"https://golang.org/doc/install"},"Go installed")," on your computer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"touch strapi.go\n")),(0,a.kt)("p",null,'Go has built-in packages to make HTTP Requests like GET, POST, PUT, and DELETE.\nWe will use the "net/http" package along with other packages.'),(0,a.kt)("h2",{id:"get-request-your-collection-type"},"GET Request your collection type"),(0,a.kt)("p",null,"Execute a ",(0,a.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,a.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to fetch all your restaurants."),(0,a.kt)("p",null,"Be sure that you activated the ",(0,a.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,a.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,a.kt)(u,{noSideBySide:!0,mdxType:"ApiCall"},(0,a.kt)(c,{title:"Example GET request",mdxType:"Request"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'response, error := http.Get("http://localhost:1337/api/restaurants")\n'))),(0,a.kt)(m,{title:"Example response",mdxType:"Response"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[{\n  "id": 1,\n  "name": "Biscotte Restaurant",\n  "description": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",\n  "created_at": "2021-03-31T11:37:16.964Z",\n  "updated_at": "2021-03-31T11:37:16.975Z",\n  "categories": [{\n      "id": 1,\n      "name": "French Food",\n      "created_by": 1,\n      "updated_by": 1,\n      "created_at": "2021-03-31T11:36:23.164Z",\n      "updated_at": "2021-03-31T11:36:23.172Z"\n    },\n    {\n      "id": 2,\n      "name": "Brunch ",\n      "published_at": "2021-03-07T10:10:19.608Z",\n      "created_at": "2021-03-07T10:10:14.477Z",\n      "updated_at": "2021-03-07T10:10:19.649Z"\n    }\n  ]\n}]\n')))),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "io/ioutil"\n    "net/http"\n)\n\nfunc main() {\n    getD()\n}\n\nfunc getD() {\n    fmt.Println("Getting data...")\n    res, error := http.Get("http://localhost:1337/api/restaurants")\n    if error != nil {\n        fmt.Printf("The HTTP request failed with error %s\\n", error)\n    } else {\n        data, _ := ioutil.ReadAll(res.Body)\n        fmt.Println(string(data))\n    }\n}\n')),(0,a.kt)("h2",{id:"post-request-your-collection-type"},"POST Request your collection type"),(0,a.kt)("p",null,"Execute a ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," request on the ",(0,a.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to create a restaurant."),(0,a.kt)("p",null,"Be sure that you activated the ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," permission for the ",(0,a.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type and the ",(0,a.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,a.kt)("inlineCode",{parentName:"p"},"category")," Collection type."),(0,a.kt)(u,{noSideBySide:!0,mdxType:"ApiCall"},(0,a.kt)(c,{title:"Example POST request",mdxType:"Request"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'postRest, _ := json.Marshal(map[string]string{\n  "name":  "Nwanyi Igbo",\n  "description": "This is a very nice place to eat native soup",\n})\nresponseBody := bytes.NewBuffer(postRest)\nresp, error := http.Post("http://localhost:1337/api/restaurants", "application/json", responseBody)\n'))),(0,a.kt)(m,{title:"Example response",mdxType:"Response"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 2,\n  "name": "Nwanyi Igbo",\n  "description": "This is a very nice place to eat native soup",\n  "created_at": "2021-03-04T09:57:11.669Z",\n  "updated_at": "2021-04-04T09:57:11.669Z",\n  "categories": []\n}\n')))),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "bytes"\n  "encoding/json"\n  "fmt"\n  "io/ioutil"\n  "log"\n  "net/http"\n)\n\nfunc main() {\n  postD()\n}\n\nfunc getD() {\n  fmt.Println("Getting data...")\n  resp, error := http.Get("http://localhost:1337/api/restaurants")\n  if error != nil {\n    fmt.Printf("The HTTP request failed with error %s\\n", error)\n  } else {\n    data, _ := ioutil.ReadAll(resp.Body)\n    fmt.Println(string(data))\n  }\n}\n\nfunc postD() {\n  fmt.Println("Posting  data...")\n  //Encode the data\n  postRest, _ := json.Marshal(map[string]string{\n    "name":        "Nwanyi Igbo",\n    "description": "This is a very nice place to eat native soup",\n  })\n  responseBody := bytes.NewBuffer(postRest)\n  resp, error := http.Post("http://localhost:1337/api/restaurants", "application/json", responseBody)\n  //Handle Error\n  if error != nil {\n    log.Fatalf("An Error Occurred %v", error)\n  }\n  defer resp.Body.Close()\n  //Read the response body\n  body, error := ioutil.ReadAll(resp.Body)\n  if error != nil {\n    log.Fatalln(error)\n  }\n  fmt.Println(string(body))\n}\n')),(0,a.kt)("h2",{id:"put-request-your-collection-type"},"PUT Request your collection type"),(0,a.kt)("p",null,"Execute a ",(0,a.kt)("inlineCode",{parentName:"p"},"PUT")," request on the ",(0,a.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to update the category of a restaurant."),(0,a.kt)("p",null,"Be sure that you activated the ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," permission for the ",(0,a.kt)("inlineCode",{parentName:"p"},"restaurant"),' collection type.\nPUT Request is sligtly different as we need to target the particular thing we want update. We do this by first making a request to http://localhost:1337/api/restaurants/1 and then update what we want to update. In this example, we are going to update  "Biscotte Restaurant" to "Restaurant Home".'),(0,a.kt)(u,{noSideBySide:!0,mdxType:"ApiCall"},(0,a.kt)(c,{title:"Example PUT request",mdxType:"Request"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'putRest, _ := json.Marshal(map[string]string {\n  "name": "Restaurant Homes",    \n})\nclient := &http.Client{}\nurl := "http://localhost:1337/api/restaurants/1"\nreq, error := http.NewRequest(http.MethodPut, url, bytes.NewBuffer(putRest))\nreq.Header.Set("Content-Type", "application/json")\n'))),(0,a.kt)(m,{title:"Example response",mdxType:"Response"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 1,\n  "name": "Restaurant Homes",\n  "description": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",\n  "published_at": "2021-03-07T10:10:46.949Z",\n  "created_at": "2021-03-07T10:08:53.929Z",\n  "updated_at": "2021-03-07T14:06:01.567Z",\n  "categories": [{\n      "id": 1,\n      "name": "French Food",\n      "published_at": "2021-03-07T10:09:43.232Z",\n      "created_at": "2021-03-07T10:09:34.135Z",\n      "updated_at": "2021-03-07T10:09:43.280Z"\n    },\n    {\n      "id": 2,\n      "name": "Brunch ",\n      "published_at": "2021-03-07T10:10:19.608Z",\n      "created_at": "2021-03-07T10:10:14.477Z",\n      "updated_at": "2021-03-07T10:10:19.649Z"\n    }\n  ]\n}\n')))),(0,a.kt)("h3",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "io/ioutil"\n    "log"\n    "net/http"\n)\n\nfunc main() {\n    //getD()\n    //postD()\n    putD()\n}\nfunc getD() {\n    fmt.Println("Getting data...")\n    resp, error := http.Get("http://localhost:1337/api/restaurants")\n    if error != nil {\n        fmt.Printf("The HTTP request failed with error %s\\n", error)\n    } else {\n        data, _ := ioutil.ReadAll(resp.Body)\n        fmt.Println(string(data))\n    }\n}\nfunc postD() {\n    fmt.Println("Posting  data...")\n\n    // Encode the data\n    postRest, _ := json.Marshal(map[string]string{\n        "name":        "Nwanyi Igbo",\n        "description": "This is a very nice place to eat native soup",\n    })\n\n    responseBody := bytes.NewBuffer(postRest)\n    resp, error := http.Post("http://localhost:1337/api/restaurants", "application/json", responseBody)\n    // Handle Error\n    if error != nil {\n        log.Fatalf("An Error Occured %v", error)\n    }\n    defer resp.Body.Close()\n    // Read the response body\n    body, error := ioutil.ReadAll(resp.Body)\n    if error != nil {\n        log.Fatalln(error)\n    }\n\n    fmt.Println(string(body))\n}\nfunc putD() {\n    putRest, _ := json.Marshal(map[string]string{\n        "name": "Restaurant Homes",\n    })\n    client := &http.Client{}\n    url := "http://localhost:1337/api/restaurants/1"\n    req, error := http.NewRequest(http.MethodPut, url, bytes.NewBuffer(putRest))\n    req.Header.Set("Content-Type", "application/json")\n    if error != nil {\n        log.Fatal(error)\n    }\n    resp, error := client.Do(req)\n    if error != nil {\n        log.Fatal(error)\n    }\n    defer resp.Body.Close()\n\n    body, error := ioutil.ReadAll(resp.Body)\n    if error != nil {\n        log.Fatal(error)\n    }\n    fmt.Println(string(body))\n}\n\n')))}g.isMDXComponent=!0}}]);