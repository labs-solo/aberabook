"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[1565],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,g=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},84878:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(83117),i=(t(67294),t(3905));const r={title:"GraphQL resolvers",displayed_sidebar:"devDocsSidebar",description:"Migrate GraphQL resolvers from Strapi v3.6.x to v4.0.x with step-by-step instructions",sidebarDepth:3},o="v4 code migration: Updating GraphQL resolvers",s={unversionedId:"dev-docs/migration/v3-to-v4/code/graphql",id:"dev-docs/migration/v3-to-v4/code/graphql",title:"GraphQL resolvers",description:"Migrate GraphQL resolvers from Strapi v3.6.x to v4.0.x with step-by-step instructions",source:"@site/docs/dev-docs/migration/v3-to-v4/code/graphql.md",sourceDirName:"dev-docs/migration/v3-to-v4/code",slug:"/dev-docs/migration/v3-to-v4/code/graphql",permalink:"/aberabook/dev-docs/migration/v3-to-v4/code/graphql",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/migration/v3-to-v4/code/graphql.md",tags:[],version:"current",frontMatter:{title:"GraphQL resolvers",displayed_sidebar:"devDocsSidebar",description:"Migrate GraphQL resolvers from Strapi v3.6.x to v4.0.x with step-by-step instructions",sidebarDepth:3},sidebar:"devDocsSidebar",previous:{title:"Global middlewares",permalink:"/aberabook/dev-docs/migration/v3-to-v4/code/global-middlewares"},next:{title:"Policies",permalink:"/aberabook/dev-docs/migration/v3-to-v4/code/policies"}},l={},p=[{value:"Adding new definitions",id:"adding-new-definitions",level:2},{value:"Types",id:"types",level:3},{value:"Queries",id:"queries",level:3},{value:"Mutations",id:"mutations",level:3},{value:"Replacing resolvers",id:"replacing-resolvers",level:2},{value:"Disabling APIs and fields from APIs",id:"disabling-apis-and-fields-from-apis",level:2},{value:"Adding policies",id:"adding-policies",level:2},{value:"Adding middlewares",id:"adding-middlewares",level:2},{value:"Adding authorization",id:"adding-authorization",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"v4-code-migration-updating-graphql-resolvers"},"v4 code migration: Updating GraphQL resolvers"),(0,i.kt)("p",null,"This guide is part of the ",(0,i.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/migration/v3-to-v4/code-migration"},"v4 code migration guide")," designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x"),(0,i.kt)("p",null,":::strapi v3/v4 comparison"),(0,i.kt)("p",null,"In Strapi v3, GraphQL resolvers are either automatically bound to REST controllers (from the core API) or customized using the ",(0,i.kt)("inlineCode",{parentName:"p"},"./api/<api-name>/config/schema.graphql.js")," files."),(0,i.kt)("p",null,"In Strapi v4, ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql"},"GraphQL")," dedicated core resolvers are automatically created for the basic CRUD operations for each API. Additional resolvers can be ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql#customization"},"customized programmatically")," using GraphQL\u2019s extension service, accessible using ",(0,i.kt)("inlineCode",{parentName:"p"},"strapi.plugin(\u2019graphql\u2019).service(\u2019extension\u2019)"),"."),(0,i.kt)("p",null,":::"),(0,i.kt)("p",null,"Migrating GraphQL resolvers to Strapi v4 requires:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"moving the Strapi v3 logic, found in ",(0,i.kt)("inlineCode",{parentName:"li"},"./api/<api-name>/config/schema.graphql.js")," files, to ",(0,i.kt)("a",{parentName:"li",href:"/dev-docs/configurations/functions#register"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"register")," method")," found in the ",(0,i.kt)("inlineCode",{parentName:"li"},"./src/index.js")," file of Strapi v4"),(0,i.kt)("li",{parentName:"ul"},"and adapting the existing Strapi v3 code to take advantage of the GraphQL extension service introduced in Strapi v4, accessible through ",(0,i.kt)("inlineCode",{parentName:"li"},"strapi.plugin(\u2019graphql\u2019).service(\u2019extension\u2019)"),".")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The entire logic for Strapi v4 GraphQL resolvers doesn\u2019t need to be in the ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," method of ",(0,i.kt)("inlineCode",{parentName:"p"},"./src/index.js")," but it should be referenced from there.")),(0,i.kt)("p",null,"The following documentation provides use case examples of transforming Strapi v3 code to Strapi v4 code that uses the GraphQL extension service. The GraphQL extension service allows adding new definitions for types, queries, and mutations, replacing resolvers, disabling APIs and fields from APIs, and adding policies, middlewares and authorization."),(0,i.kt)("h2",{id:"adding-new-definitions"},"Adding new definitions"),(0,i.kt)("p",null,"Adding new ",(0,i.kt)("a",{parentName:"p",href:"#types"},"types"),", ",(0,i.kt)("a",{parentName:"p",href:"#queries"},"queries")," or ",(0,i.kt)("a",{parentName:"p",href:"#mutations"},"mutations")," definitions in Strapi v4 is done through the ",(0,i.kt)("inlineCode",{parentName:"p"},"use()")," method of the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql#extending-the-schema"},"GraphQL extension service"),"."),(0,i.kt)("h3",{id:"types"},"Types"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v3"),":"),(0,i.kt)("p",null,"The following code example adds a new ",(0,i.kt)("inlineCode",{parentName:"p"},"MyEnum")," type definition to Strapi v3:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="path:\xa0./api/foo/config/schema.graphql.js"',title:'"path:\xa0./api/foo/config/schema.graphql.js"'},"\nmodule.exports = {\n  definition: `\n    enum MyEnum {\n      a\n      b\n      c\n    }\n  `,\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v4"),":"),(0,i.kt)("p",null,"The Strapi v3 code example above should be replaced by the following code in Strapi v4:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/index.js"',title:'"./src/index.js"'},"\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use(({ nexus }) => {\n      const MyEnum = nexus.enumType({\n        name: 'MyEnum',\n        members: ['a', 'b', 'c'],\n      });\n\n      return { types: [MyEnum] };\n    });\n  }\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"It's recommended to use the ",(0,i.kt)("a",{parentName:"p",href:"https://nexusjs.org/"},"nexus")," definition instead of raw ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/learn/schema/"},"SDL"),", but it\u2019s still possible to use ",(0,i.kt)("inlineCode",{parentName:"p"},"typeDefs")," to write raw SDL.")),(0,i.kt)("h3",{id:"queries"},"Queries"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v3"),":"),(0,i.kt)("p",null,"The following code example adds a new query definition to Strapi v3:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="path:\xa0./api/foo/config/schema.graphql.js"',title:'"path:\xa0./api/foo/config/schema.graphql.js"'},"\nmodule.exports = {\n  query: `\n    myQuery(id: ID, status: MyInput, limit: Int): [MyQuery]!\n  `,\n  resolver: {\n    Query: {\n      myQuery: {\n        resolver: 'application::api-name.content-type-name.customFind',\n        // OR\n        resolver: async (obj, options, { context }) => {\n          await strapi.controllers.content-type-name.customFind(context);\n\n          return context.body.myQuery || [];\n        }\n      }\n    }\n  },\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v4"),":"),(0,i.kt)("p",null,"The Strapi v3 code example above should be replaced by the following code in Strapi v4:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/index.js"',title:'"./src/index.js"'},"\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use(({ nexus }) => {\n      const myQuery = nexus.extendType({\n        type: 'Query',\n        definition(t) {\n          //  myQuery definition\n          t.field('myQuery', {\n            // Response type\n            type: nexus.nonNull(nexus.list('MyQuery')),\n\n            // Args definition\n            args: { id: 'ID', status: 'MyInput', limit: 'Int' },\n\n            // Resolver definition\n            resolve(parent, args, context) {\n              const { id, status, limit } = args;\n      \n              return strapi.service('api::api-name.content-type-name').customFind(id, status, limit);\n            }\n          });\n        }\n      });\n\n      return { types: [myQuery] };\n    });\n  }\n}\n")),(0,i.kt)("admonition",{title:"NOTES",type:"note"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In Strapi v4, REST controllers and GraphQL resolvers are not coupled anymore. The business logic is implemented in services and called either from the controller or the resolver. This approach keeps the business logic in one place so both REST and GraphQL can be customized the way you want.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In Strapi v4, it\u2019s not recommended to reference a REST controller directly from the GraphQL resolver. However, you can still call it programmatically from the resolver definition.")))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The service that Strapi provides to perform queries is called the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service")," and is available with ",(0,i.kt)("inlineCode",{parentName:"p"},"strapi.entityService"),". It can be used to create queries or mutations.")),(0,i.kt)("h3",{id:"mutations"},"Mutations"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v3"),":"),(0,i.kt)("p",null,"The following code example adds a new mutation definition to Strapi v3:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="path:\xa0./api/foo/config/schema.graphql.js"',title:'"path:\xa0./api/foo/config/schema.graphql.js"'},"\nmodule.exports = {\n  mutation: `\n    sendItemByEmail(itemID: ID!, email: String!): Boolean!\n  `,\n  resolver: {\n    Mutation: {\n      attachRestaurantToChef: {\n        resolver: 'application::api-name.content-type-name.sendItemByEmail',\n        // OR\n        resolver: async (obj, options, { context }) {\n          await strapi.controllers.content-type-name.sendItemByEmail(context);\n\n          return context.body || false;\n        }\n      },\n    },\n  }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v4"),":"),(0,i.kt)("p",null,"The Strapi v3 code example above should be replaced by the following code in Strapi v4:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/index.js"',title:'"./src/index.js"'},"\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use(({ nexus }) => {\n      const sendItemByEmailMutation = nexus.extendType({\n        type: 'Mutation',\n        definition(t) {\n          // \"sendItemByEmail\" query definition\n          t.field('sendItemByEmail', {\n            // Response type\n            type: nexus.nonNull('Boolean'),\n\n            // Args definition\n            args: { ItemID: nexus.nonNull('ID'), email: nexus.nonNull('String') },\n\n            // Resolver definition\n            resolve(parent, args, context) {\n              const { ItemID, email } = args;\n              \n              return strapi.service('api::api-name.content-type-name').sendItemByEmail(itemID, email);\n            }\n          });\n        }\n      });\n\n      return { types: [sendItemByEmailMutation] };\n    });\n  }\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The service that Strapi provides to perform queries is called the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service")," and is available with ",(0,i.kt)("inlineCode",{parentName:"p"},"strapi.entityService"),". It can be used to create queries or mutations.")),(0,i.kt)("h2",{id:"replacing-resolvers"},"Replacing resolvers"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v3"),":"),(0,i.kt)("p",null,"Strapi v3 offers 2 ways of replacing the behavior of a query or mutation resolver: have the resolver point to a REST controller, or create a new custom GraphQL resolver then associate the resolver to an existing query or mutation."),(0,i.kt)("details",null,(0,i.kt)("summary",null," Example of a Strapi v3 resolver pointing to a REST controller"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="path:\xa0./api/<content-type-name>/config/schema.graphql.js"',title:'"path:\xa0./api/<content-type-name>/config/schema.graphql.js"'},"\nmodule.exports = {\n  query: `\n    testQuery: myQuery\n  `,\n  resolver: {\n    Query: {\n      testQuery: {\n        resolver: 'application::api-name.content-type-name.find',\n      },\n    },\n  },\n};\n"))),(0,i.kt)("details",null,(0,i.kt)("summary",null," Example of creating a new custom resolver and associating it to an existing query in Strapi v3"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="path:\xa0./api/<content-type-name>/config/schema.graphql.js"',title:'"path:\xa0./api/<content-type-name>/config/schema.graphql.js"'},"\nmodule.exports = {\n  query: `\n    testQuery: myQuery\n  `,\n  resolver: {\n    Query: {\n      testQuery: {\n        resolver: async (obj, args) => {\n          // custom logic here\n          // ... \n\n          // Return response.\n          return { myResult: 'some data' };\n        },\n      },\n    },\n  },\n};\n"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v4"),":"),(0,i.kt)("p",null,"In Strapi v4, the recommended way to replace or customize a resolver is to use ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql#extending-the-schema"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"resolvers")," field")," of the new GraphQL extension service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/index.js"',title:'"./src/index.js"'},"\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use(({ nexus }) => ({\n      resolvers: {\n        Query: {\n          testQuery: async (obj, args) => {\n          // custom logic here\n          // ... \n\n          // return response\n          return { myResult: 'some data' };\n        },\n      }\n    });\n  }\n}\n")),(0,i.kt)("h2",{id:"disabling-apis-and-fields-from-apis"},"Disabling APIs and fields from APIs"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v3"),":"),(0,i.kt)("p",null,"In Strapi v3, a query resolver, a mutation resolver or a field is disabled by setting it to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="path:\xa0./api/<content-type-name>/config/schema.graphql.js"',title:'"path:\xa0./api/<content-type-name>/config/schema.graphql.js"'},"\nmodule.exports = {\n  // disable a query resolver\n  resolver: {\n    Query: {\n      myQuery: false,\n    },\n  },\n  // disable a field\n  type: {\n    myTypeQuery: {\n      myField: false,\n    },\n  },\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v4"),":"),(0,i.kt)("p",null,"Strapi v4 uses programmatic APIs to ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql#disabling-operations-in-the-shadow-crud"},"disable queries, mutation, actions or fields"),". The Strapi v3 code example above should be replaced by the following code in Strapi v4:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/index.js"',title:'"./src/index.js"'},"\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    // disable an action on a query\n    extensionService.shadowCRUD('api::api-name.content-type-name').disableAction('find');\n    // disable a field\n    extensionService.shadowCRUD('api::api-name.content-type-name').field('myField').disable();\n  }\n}\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"adding-policies"},"Adding policies"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v3"),":"),(0,i.kt)("p",null,"In Strapi v3, policies applied to a resolver are defined either for the REST controller or in the ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.graphql.js")," customization file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="path:\xa0./api/foo/config/schema.graphql.js"',title:'"path:\xa0./api/foo/config/schema.graphql.js"'},"\nmodule.exports = {\n  resolver: {\n    Query: {\n      findItems: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n  },\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Strapi v4"),":"),(0,i.kt)("p",null,"In Strapi v4, policies applied to a resolver are explicitly defined in a ",(0,i.kt)("inlineCode",{parentName:"p"},"resolversConfig")," object (see ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql#policies"},"GraphQL policies documentation"),") and applied through the GraphQL extension service. The Strapi v3 code example above should be replaced by the following code in Strapi v4:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/index.js"',title:'"./src/index.js"'},"\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use(({ nexus }) => ({\n      resolversConfig: {\n        'Query.findItems': {\n          policies: ['admin::isAuthenticatedAdmin']\n        }\n      }\n    }));\n  }\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Strapi v4 policies are not inherited from controllers anymore since the resolvers are stand-alone.")),(0,i.kt)("h2",{id:"adding-middlewares"},"Adding middlewares"),(0,i.kt)("p",null,"In Strapi v3, middlewares applied to a resolver are inherited from middlewares associated to the REST controller."),(0,i.kt)("p",null,"In Strapi v4, middlewares applied to a resolver are explicitly ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql#middlewares"},"defined in a ",(0,i.kt)("inlineCode",{parentName:"a"},"resolversConfig")," object")," and applied through the GraphQL extension service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/index.js"',title:'"./src/index.js"'},"\nmodule.exports = {\n  register({ strapi }) {\n    const extensionService = strapi.plugin('graphql').service('extension');\n\n    extensionService.use(({ nexus }) => ({\n      resolversConfig: {\n        'Query.findItems': {\n          middlewares: [\n            (resolve, ...args) => {\n              console.log(\"We're in a middleware\");\n              return resolve(...args);\n            }\n          ]\n        }\n      }\n    }));\n  }\n}\n")),(0,i.kt)("h2",{id:"adding-authorization"},"Adding authorization"),(0,i.kt)("p",null,"The resolvers automatically generated in Strapi v4 are protected by authorization strategies. The actions can be customized and the authorization can be disabled through the ",(0,i.kt)("inlineCode",{parentName:"p"},"resolversConfig")," object (see ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql#authorization-configuration"},"GraphQL authorization documentation"),")."))}c.isMDXComponent=!0}}]);