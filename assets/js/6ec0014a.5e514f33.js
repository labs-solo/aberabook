"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[6005,5398,5446,9325],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),c=o,f=m["".concat(p,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>N,frontMatter:()=>p,metadata:()=>d,toc:()=>m});var a=n(83117),o=(n(67294),n(3905)),r=n(20823),i=n(87514),l=n(19986);const p={title:"Populate and Select",description:"Use Strapi's REST API to populate or select certain fields.",sidebarDepth:3,displayed_sidebar:"restApiSidebar"},s="REST API: Population & Field Selection",d={unversionedId:"dev-docs/api/rest/populate-select",id:"dev-docs/api/rest/populate-select",title:"Populate and Select",description:"Use Strapi's REST API to populate or select certain fields.",source:"@site/docs/dev-docs/api/rest/populate-select.md",sourceDirName:"dev-docs/api/rest",slug:"/dev-docs/api/rest/populate-select",permalink:"/aberabook/dev-docs/api/rest/populate-select",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/rest/populate-select.md",tags:[],version:"current",frontMatter:{title:"Populate and Select",description:"Use Strapi's REST API to populate or select certain fields.",sidebarDepth:3,displayed_sidebar:"restApiSidebar"},sidebar:"restApiSidebar",previous:{title:"Parameters",permalink:"/aberabook/dev-docs/api/rest/parameters"},next:{title:"Filters, Locale, and Publication State",permalink:"/aberabook/dev-docs/api/rest/filters-locale-publication"}},u={},m=[{value:"Field selection",id:"field-selection",level:2},{value:"Population",id:"population",level:2},{value:"Combining Population with other operators",id:"combining-population-with-other-operators",level:3},{value:"Populate with field selection",id:"populate-with-field-selection",level:4},{value:"Populate with filtering",id:"populate-with-filtering",level:4}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},f=c("SideBySideContainer"),y=c("SideBySideColumn"),k=c("ApiCall"),g=c("Request"),h=c("Response"),b={toc:m};function N(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rest-api-population--field-selection"},"REST API: Population & Field Selection"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/api/rest"},"REST API")," by default does not populate any relations, media fields, components, or dynamic zones. Use the ",(0,o.kt)("a",{parentName:"p",href:"#population"},(0,o.kt)("inlineCode",{parentName:"a"},"populate")," parameter")," to populate specific fields and the ",(0,o.kt)("a",{parentName:"p",href:"#field-selection"},(0,o.kt)("inlineCode",{parentName:"a"},"select")," parameter")," to return only specific fields with the query results. Ensure that the find permission is given to the field(s) for the relation(s) you populate."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)(r.default,{mdxType:"QsIntroFull"})),(0,o.kt)(f,{mdxType:"SideBySideContainer"},(0,o.kt)(y,{mdxType:"SideBySideColumn"},(0,o.kt)("h2",{id:"field-selection"},"Field selection"),(0,o.kt)("p",null,"Queries can accept a ",(0,o.kt)("inlineCode",{parentName:"p"},"fields")," parameter to select only some fields. By default, only the following ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#model-attributes"},"types of fields")," are returned:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"string types: string, text, richtext, enumeration, email, password, and uid,"),(0,o.kt)("li",{parentName:"ul"},"date types: date, time, datetime, and timestamp,"),(0,o.kt)("li",{parentName:"ul"},"number types: integer, biginteger, float, and decimal,"),(0,o.kt)("li",{parentName:"ul"},"generic types: boolean, array, and JSON.")),(0,o.kt)("p",null,"Field selection does not work on relational, media, component, or dynamic zone fields. To populate these fields, use the ",(0,o.kt)("a",{parentName:"p",href:"#population"},(0,o.kt)("inlineCode",{parentName:"a"},"populate")," parameter"),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"By default, fields are selected except relations, media, dynamic zones, and components, but you can specify a wildcard ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," instead of an array."))),(0,o.kt)(y,{mdxType:"SideBySideColumn"},(0,o.kt)("br",null),(0,o.kt)("br",null),(0,o.kt)(k,{noSideBySide:!0,mdxType:"ApiCall"},(0,o.kt)(g,{title:"Example request: Return only title and body fields",mdxType:"Request"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"GET /api/users?fields[0]=title&fields[1]=body"))),(0,o.kt)(h,{title:"Example response",mdxType:"Response"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 1,\n      "attributes": {\n        "title": "test1",\n        "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."\n      }\n    }\n  ],\n  "meta": {\n    // ...\n  }\n}\n')))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)(i.default,{mdxType:"QsForQueryTitle"})),(0,o.kt)(l.default,{mdxType:"QsForQueryBody"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const qs = require('qs');\nconst query = qs.stringify(\n  {\n    fields: ['title', 'body'],\n  },\n  {\n    encodeValuesOnly: true, // prettify URL\n  }\n);\n\nawait request(`/api/users?${query}`);\n"))))),(0,o.kt)("h2",{id:"population"},"Population"),(0,o.kt)("p",null,"The REST API by default does not populate any type of fields, so it will not populate relations, media fields, components, or dynamic zones unless you pass a ",(0,o.kt)("inlineCode",{parentName:"p"},"populate")," parameter to populate various field types."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"populate")," parameter can be used alone or ",(0,o.kt)("a",{parentName:"p",href:"#combining-population-with-other-operators"},"in combination with with multiple operators")," to have much more control over the population."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," permission must be enabled for the content-types that are being populated. If a role doesn't have access to a content-type it will not be populated (see ",(0,o.kt)("a",{parentName:"p",href:"/user-docs/users-roles-permissions/configuring-end-users-roles#editing-a-role"},"User Guide")," for additional information on how to enable ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," permissions for content-types).")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"It's currently not possible to return just an array of ids with a request.")),(0,o.kt)("p",null,":::strapi Populating guides"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/guides/intro"},"REST API guides")," section includes more detailed information about various possible use cases for the populate parameter:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"/dev-docs/api/rest/guides/understanding-populate"},"Understanding populate")," guide explains in details how populate works, with diagrams, comparisons, and real-world examples."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"/dev-docs/api/rest/guides/populate-creator-fields"},"How to populate creator fields")," guide provides step-by-step instructions on how to add ",(0,o.kt)("inlineCode",{parentName:"li"},"createdBy")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"updatedBy")," fields to your queries responses.")),(0,o.kt)("p",null,"The Strapi Blog also includes a tutorial on ",(0,o.kt)("a",{parentName:"p",href:"https://strapi.io/blog/demystifying-strapi-s-populate-and-filtering"},"how to populate and filter data with your queries"),".\n:::"),(0,o.kt)("p",null,"The following table sums up possible populate use cases and their associated parameter syntaxes, and links to sections of the Understanding populate guide which includes more detailed explanations:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Use case"),(0,o.kt)("th",{parentName:"tr",align:null},"Example parameter syntax"),(0,o.kt)("th",{parentName:"tr",align:null},"Detailed explanations to read"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate everything, 1 level deep, including media fields, relations, components, and dynamic zones"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate=*")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#populate-all-relations-and-fields-1-level-deep"},"Populate all relations and fields, 1 level deep"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate one relation,",(0,o.kt)("br",null),"1 level deep"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate[0]=a-relation-name")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#populate-1-level-deep-for-specific-relations"},"Populate 1 level deep for specific relations"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate several relations,",(0,o.kt)("br",null),"1 level deep"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate[0]=relation-name&populate[1]=another-relation-name&populate[2]=yet-another-relation-name")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#populate-1-level-deep-for-specific-relations"},"Populate 1 level deep for specific relations"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate some relations, several levels deep"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate[first-level-relation-to-populate][populate][0]=second-level-relation-to-populate")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#populate-several-levels-deep-for-specific-relations"},"Populate several levels deep for specific relations"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate a component"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate[0]=component-name")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#populate-components"},"Populate components"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate a component and one of its nested components"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate[0]=component-name&populate[1]=component-name.nested-component-name")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#populate-components"},"Populate components"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate a dynamic zone (only its first-level elements)"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate[0]=dynamic-zone-name")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#populate-dynamic-zones"},"Populate dynamic zones"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate a dynamic zone and its nested elements and relations, using a unique, shared population strategy"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate[dynamic-zone-name][populate]=*")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#shared-population-strategy"},"Populate dynamic zones"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Populate a dynamic zone and its nested elements and relations, using a precisely defined, detailed population strategy"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"populate[dynamic-zone-name][on][dynamic-zone-name.component-name][populate][relation-name][populate][0]=field-name")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/dev-docs/api/rest/guides/understanding-populate#detailed-population-strategy"},"Populate dynamic zones"))))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The easiest way to build complex queries with multiple-level population is to use our ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/interactive-query-builder"},"interactive query builder")," tool.")),(0,o.kt)("h3",{id:"combining-population-with-other-operators"},"Combining Population with other operators"),(0,o.kt)("p",null,"By utilizing the ",(0,o.kt)("inlineCode",{parentName:"p"},"populate")," operator it is possible to combine other operators such as ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/populate-select#field-selection"},"field selection"),", ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/filters-locale-publication"},"filters"),", and ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/sort-pagination"},"sort")," in the population queries."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The population and pagination operators cannot be combined.")),(0,o.kt)("h4",{id:"populate-with-field-selection"},"Populate with field selection"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"fields")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"populate")," can be combined."),(0,o.kt)(k,{noSideBySide:!0,mdxType:"ApiCall"},(0,o.kt)(g,{title:"Example request",mdxType:"Request"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"GET /api/articles?fields[0]=title&fields[1]=slug&populate[headerImage][fields][0]=name&populate[headerImage][fields][1]=url"))),(0,o.kt)(h,{title:"Example response",mdxType:"Response"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 1,\n      "attributes": {\n        "title": "Test Article",\n        "slug": "test-article",\n        "headerImage": {\n          "data": {\n            "id": 1,\n            "attributes": {\n              "name": "17520.jpg",\n              "url": "/uploads/17520_73c601c014.jpg"\n            }\n          }\n        }\n      }\n    }\n  ],\n  "meta": {\n    // ...\n  }\n}\n')))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)(i.default,{mdxType:"QsForQueryTitle"})),(0,o.kt)(l.default,{mdxType:"QsForQueryBody"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const qs = require('qs');\nconst query = qs.stringify(\n  {\n    fields: ['title', 'slug'],\n    populate: {\n      headerImage: {\n        fields: ['name', 'url'],\n      },\n    },\n  },\n  {\n    encodeValuesOnly: true, // prettify URL\n  }\n);\n\nawait request(`/api/articles?${query}`);\n"))),(0,o.kt)("h4",{id:"populate-with-filtering"},"Populate with filtering"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"filters")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"populate")," can be combined."),(0,o.kt)(k,{noSideBySide:!0,mdxType:"ApiCall"},(0,o.kt)(g,{title:"Example request",mdxType:"Request"},(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"GET /api/articles?populate[categories][sort][0]=name%3Aasc&populate[categories][filters][name][$eq]=Cars"))),(0,o.kt)(h,{title:"Example response",mdxType:"Response"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 1,\n      "attributes": {\n        "title": "Test Article",\n        // ...\n        "categories": {\n          "data": [\n            {\n              "id": 2,\n              "attributes": {\n                "name": "Cars"\n                // ...\n              }\n            }\n          ]\n        }\n      }\n    }\n  ],\n  "meta": {\n    // ...\n  }\n}\n')))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)(i.default,{mdxType:"QsForQueryTitle"})),(0,o.kt)(l.default,{mdxType:"QsForQueryBody"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const qs = require('qs');\nconst query = qs.stringify(\n  {\n    populate: {\n      categories: {\n        sort: ['name:asc'],\n        filters: {\n          name: {\n            $eq: 'Cars',\n          },\n        },\n      },\n    },\n  },\n  {\n    encodeValuesOnly: true, // prettify URL\n  }\n);\n\nawait request(`/api/articles?${query}`);\n"))))}N.isMDXComponent=!0},19986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(83117),o=(n(67294),n(3905));const r={},i=void 0,l={unversionedId:"snippets/qs-for-query-body",id:"snippets/qs-for-query-body",title:"qs-for-query-body",description:"The query URL above was built using the qs library.",source:"@site/docs/snippets/qs-for-query-body.md",sourceDirName:"snippets",slug:"/snippets/qs-for-query-body",permalink:"/aberabook/snippets/qs-for-query-body",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/qs-for-query-body.md",tags:[],version:"current",frontMatter:{}},p={},s=[],d={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The query URL above was built using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ljharb/qs"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"qs")," library"),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"qs")," can be run locally on your machine, as shown in the following code example, or you can use our ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/dev-docs/api/rest/interactive-query-builder"},"interactive query builder"))," online tool."))}u.isMDXComponent=!0},87514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(83117),o=(n(67294),n(3905));const r={},i=void 0,l={unversionedId:"snippets/qs-for-query-title",id:"snippets/qs-for-query-title",title:"qs-for-query-title",description:"JavaScript query (built with the qs library):",source:"@site/docs/snippets/qs-for-query-title.md",sourceDirName:"snippets",slug:"/snippets/qs-for-query-title",permalink:"/aberabook/snippets/qs-for-query-title",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/qs-for-query-title.md",tags:[],version:"current",frontMatter:{}},p={},s=[],d={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"JavaScript query (built with the qs library):"))}u.isMDXComponent=!0},20823:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(83117),o=(n(67294),n(3905));const r={},i=void 0,l={unversionedId:"snippets/qs-intro-full",id:"snippets/qs-intro-full",title:"qs-intro-full",description:"Strapi takes advantage of the ability of the qs library to parse nested objects to create more complex queries.",source:"@site/docs/snippets/qs-intro-full.md",sourceDirName:"snippets",slug:"/snippets/qs-intro-full",permalink:"/aberabook/snippets/qs-intro-full",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/qs-intro-full.md",tags:[],version:"current",frontMatter:{}},p={},s=[],d={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Strapi takes advantage of the ability of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ljharb/qs"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"qs")," library")," to parse nested objects to create more complex queries."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"qs")," directly to generate complex queries instead of creating them manually. Examples in this documentation showcase how you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"qs"),"."),(0,o.kt)("p",null,"You can also use the ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/interactive-query-builder"},"interactive query builder")," if you prefer playing with our online tool instead of generating queries with ",(0,o.kt)("inlineCode",{parentName:"p"},"qs")," on your machine."))}u.isMDXComponent=!0}}]);