"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[8068],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},92420:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(83117),r=(n(67294),n(3905));const o={title:"How to store and access data from a Strapi plugin",description:"Learn how to store and access data from a Strapi plugin",sidebar_label:"Store and access data",displayed_sidebar:"devDocsSidebar"},i="How to store and access data from a Strapi plugin",s={unversionedId:"dev-docs/plugins/guides/store-and-access-data",id:"dev-docs/plugins/guides/store-and-access-data",title:"How to store and access data from a Strapi plugin",description:"Learn how to store and access data from a Strapi plugin",source:"@site/docs/dev-docs/plugins/guides/store-and-access-data.md",sourceDirName:"dev-docs/plugins/guides",slug:"/dev-docs/plugins/guides/store-and-access-data",permalink:"/aberabook/dev-docs/plugins/guides/store-and-access-data",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/plugins/guides/store-and-access-data.md",tags:[],version:"current",frontMatter:{title:"How to store and access data from a Strapi plugin",description:"Learn how to store and access data from a Strapi plugin",sidebar_label:"Store and access data",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Developing plugins",permalink:"/aberabook/dev-docs/plugins/developing-plugins"},next:{title:"Pass data from server to admin",permalink:"/aberabook/dev-docs/plugins/guides/pass-data-from-server-to-admin"}},p={},l=[{value:"Create a content-type for your plugin",id:"create-a-content-type-for-your-plugin",level:2},{value:"Ensure plugin content-types are imported",id:"ensure-plugin-content-types-are-imported",level:3},{value:"Interact with data from the plugin",id:"interact-with-data-from-the-plugin",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},d=c("Tabs"),u=c("TabItem"),m={toc:l};function y(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-store-and-access-data-from-a-strapi-plugin"},"How to store and access data from a Strapi plugin"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/dev-docs/plugins/developing-plugins"},"Plugins")," in Strapi help you add additional features to the existing core set of built-in features. They can be used to extend the API, customize the admin panel, and more. In many cases, you would like your plugin to store data for later retrieval, and to access this data."),(0,r.kt)("p",null,"To store data with a Strapi plugin, use a plugin content-type. Plugin content-types work exactly like other ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models"},"content-types"),". Once the content-type is ",(0,r.kt)("a",{parentName:"p",href:"#create-a-content-type-for-your-plugin"},"created"),", you can start ",(0,r.kt)("a",{parentName:"p",href:"#interact-with-data-from-the-plugin"},"interacting with the data"),"."),(0,r.kt)("h2",{id:"create-a-content-type-for-your-plugin"},"Create a content-type for your plugin"),(0,r.kt)("p",null,"To create a content-type with the CLI generator, run the following command in a terminal:"),(0,r.kt)(d,{groupId:"yarn-npm",mdxType:"Tabs"},(0,r.kt)(u,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn strapi generate content-type\n"))),(0,r.kt)(u,{value:"npm",label:"NPM",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run strapi generate content-type\n")))),(0,r.kt)("p",null,"The generator CLI is interactive and asks a few questions about the content-type and the attributes it will contain. Answer the first questions, then for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Where do you want to add this model?")," question, choose the ",(0,r.kt)("inlineCode",{parentName:"p"},"Add model to existing plugin")," option and type the name of the related plugin when asked."),(0,r.kt)("figure",{style:{width:"100%",margin:"0"}},(0,r.kt)("img",{src:"/img/assets/development/generate-plugin-content-type.png",alt:"Generating a content-type plugin with the CLI"}),(0,r.kt)("em",null,(0,r.kt)("figcaption",{style:{fontSize:"12px"}},"The ",(0,r.kt)("code",null,"strapi generate content-type")," CLI generator is used to create a basic content-type for a plugin."))),(0,r.kt)("br",null),(0,r.kt)("p",null,"The CLI will generate some code required to use your plugin, which includes the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/backend-customization/models#model-schema"},"content-type schema")),(0,r.kt)("li",{parentName:"ul"},"and a basic ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/backend-customization/controllers"},"controller"),", ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/backend-customization/services"},"service"),", and ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/backend-customization/routes"},"route")," for the content-type")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You may want to create the whole structure of your content-types either entirely with the CLI generator or by directly creating and editing ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.json")," files. We recommend you first create a simple content-type with the CLI generator and then leverage the ",(0,r.kt)("a",{parentName:"p",href:"/user-docs/content-type-builder"},"Content-Type Builder")," in the admin panel to edit your content-type."),(0,r.kt)("p",{parentName:"admonition"},"If your content-type is not visible in the admin panel, you might need to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"content-manager.visible")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"content-type-builder.visible")," parameters to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"pluginOptions")," object of the content-type schema:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Making a plugin content-type visible in the admin panel:"),(0,r.kt)("p",{parentName:"admonition"},"The following highlighted lines in an example ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.json")," file show how to make a plugin content-type visible to the Content-Type Builder and Content-Manager:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="/server/content-types/my-plugin-content-type/schema.json" {13-20} showLineNumbers',title:'"/server/content-types/my-plugin-content-type/schema.json"',"{13-20}":!0,showLineNumbers:!0},'{\n  "kind": "collectionType",\n  "collectionName": "my_plugin_content_types",\n  "info": {\n    "singularName": "my-plugin-content-type",\n    "pluralName": "my-plugin-content-types",\n    "displayName": "My Plugin Content-Type"\n  },\n  "options": {\n    "draftAndPublish": false,\n    "comment": ""\n  },\n  "pluginOptions": {\n    "content-manager": {\n      "visible": true\n    },\n    "content-type-builder": {\n      "visible": true\n    }\n  },\n  "attributes": {\n    "name": {\n      "type": "string"\n    }\n  }\n}\n\n')))),(0,r.kt)("h3",{id:"ensure-plugin-content-types-are-imported"},"Ensure plugin content-types are imported"),(0,r.kt)("p",null,"The CLI generator might not have imported all the related content-type files for your plugin, so you might have to make the following adjustments after the ",(0,r.kt)("inlineCode",{parentName:"p"},"strapi generate content-type")," CLI command has finished running:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"/server/index.js")," file, import the content-types:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'{7,22} showLineNumbers title="/server/index.js"',"{7,22}":!0,showLineNumbers:!0,title:'"/server/index.js"'},"'use strict';\n\nconst register = require('./register');\nconst bootstrap = require('./bootstrap');\nconst destroy = require('./destroy');\nconst config = require('./config');\nconst contentTypes = require('./content-types');\nconst controllers = require('./controllers');\nconst routes = require('./routes');\nconst middlewares = require('./middlewares');\nconst policies = require('./policies');\nconst services = require('./services');\n\nmodule.exports = {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\n\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"/server/content-types/index.js")," file, import the content-type folder:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/server/content-types/index.js"',title:'"/server/content-types/index.js"'},"'use strict';\n\nmodule.exports = {\n  // In the line below, replace my-plugin-content-type\n  // with the actual name and folder path of your content type\n  \"my-plugin-content-type\": require('./my-plugin-content-type'),\n};\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Ensure that the ",(0,r.kt)("inlineCode",{parentName:"p"},"/server/content-types/[your-content-type-name]")," folder contains not only the ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.json")," file generated by the CLI, but also an ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," file that exports the content-type with the following code:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="/server/content-types/my-plugin-content-type/index.js',title:'"/server/content-types/my-plugin-content-type/index.js'},"'use strict';\n\nconst schema = require('./schema');\n\nmodule.exports = {\n  schema,\n};\n")))),(0,r.kt)("h2",{id:"interact-with-data-from-the-plugin"},"Interact with data from the plugin"),(0,r.kt)("p",null,"Once you have created a content-type for your plugin, you can create, read, update, and delete data."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A plugin can only interact with data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"/server")," folder. If you need to update data from the admin panel, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/plugins/guides/pass-data-from-server-to-admin"},"passing data guide"),".")),(0,r.kt)("p",null,"To create, read, update, and delete data, you can use either the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service API")," or the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/query-engine"},"Query Engine API"),". While it's recommended to use the Entity Service API, especially if you need access to components or dynamic zones, the Query Engine API is useful if you need unrestricted access to the underlying database."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"plugin::your-plugin-slug.the-plugin-content-type-name")," syntax for content-type identifiers in Entity Service and Query Engine API queries."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("p",null,"Here is how to find all the entries for the ",(0,r.kt)("inlineCode",{parentName:"p"},"my-plugin-content-type")," collection type created for a plugin called ",(0,r.kt)("inlineCode",{parentName:"p"},"my-plugin"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Using the Entity Service API\nlet data = await strapi.entityService.findMany('plugin::my-plugin.my-plugin-content-type');\n\n// Using the Query Engine API\nlet data = await strapi.db.query('plugin::my-plugin.my-plugin-content-type').findMany();\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can access the database via the ",(0,r.kt)("inlineCode",{parentName:"p"},"strapi")," object which can be found in ",(0,r.kt)("inlineCode",{parentName:"p"},"middlewares"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"policies"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"controllers"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"services"),", as well as from the ",(0,r.kt)("inlineCode",{parentName:"p"},"register"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"boostrap"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"destroy")," lifecycle functions.")))}y.isMDXComponent=!0}}]);