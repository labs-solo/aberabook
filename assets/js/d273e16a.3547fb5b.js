"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[1049],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(a),m=o,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||r;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var d=2;d<r;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},28102:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=a(83117),o=(a(67294),a(3905));const r={title:"Custom middlewares",description:"Learn how to use custom middlewares using our FoodAdvisor example",displayed_sidebar:"devDocsSidebar",pagination_prev:"dev-docs/backend-customization/examples/routes"},s="Examples cookbook: Custom global middlewares",i={unversionedId:"dev-docs/backend-customization/examples/middlewares",id:"dev-docs/backend-customization/examples/middlewares",title:"Custom middlewares",description:"Learn how to use custom middlewares using our FoodAdvisor example",source:"@site/docs/dev-docs/backend-customization/examples/middlewares.md",sourceDirName:"dev-docs/backend-customization/examples",slug:"/dev-docs/backend-customization/examples/middlewares",permalink:"/aberabook/dev-docs/backend-customization/examples/middlewares",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/backend-customization/examples/middlewares.md",tags:[],version:"current",frontMatter:{title:"Custom middlewares",description:"Learn how to use custom middlewares using our FoodAdvisor example",displayed_sidebar:"devDocsSidebar",pagination_prev:"dev-docs/backend-customization/examples/routes"},sidebar:"devDocsSidebar",previous:{title:"Custom routes",permalink:"/aberabook/dev-docs/backend-customization/examples/routes"},next:{title:"TypeScript",permalink:"/aberabook/dev-docs/typescript"}},l={},d=[{value:"Populating an analytics dashboard in Google Sheets with a custom middleware",id:"populating-an-analytics-dashboard-in-google-sheets-with-a-custom-middleware",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},u=c("SideBySideContainer"),p=c("SideBySideColumn"),m=c("SubtleCallout"),h={toc:d};function g(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"examples-cookbook-custom-global-middlewares"},"Examples cookbook: Custom global middlewares"),(0,o.kt)("admonition",{type:"prerequisites"},(0,o.kt)("p",{parentName:"admonition"},"This page is part of the back end customization examples cookbook. Please ensure you've read its ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples"},"introduction"),".")),(0,o.kt)("p",null,"Out of the box, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," does not provide any custom middlewares that could use incoming requests and perform some additional logic before executing the controller code."),(0,o.kt)("p",null,"There are 2 types of middlewares in Strapi: ",(0,o.kt)("strong",{parentName:"p"},"route middlewares")," control access to a route while ",(0,o.kt)("strong",{parentName:"p"},"global middlewares")," have a wider scope (see reference documentation for ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/middlewares"},"middlewares customization"),")."),(0,o.kt)("p",null,"Custom route middlewares could be used instead of policies to control access to an endpoint (see ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/policies"},"policies cookbook"),") and could modify the context before passing it down to further core elements of the Strapi server. This page will ",(0,o.kt)("em",{parentName:"p"},"not")," cover custom route middlewares but rather illustrate a more elaborated usage for ",(0,o.kt)("strong",{parentName:"p"},"custom global middlewares"),"."),(0,o.kt)("h2",{id:"populating-an-analytics-dashboard-in-google-sheets-with-a-custom-middleware"},"Populating an analytics dashboard in Google Sheets with a custom middleware"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\ud83d\udcad Context:")),(0,o.kt)("p",null,"In essence, a middleware gets executed between a request arriving at the server and the controller function getting executed. So, for instance, a middleware is a good place to perform some analytics. "),(0,o.kt)(u,{mdxType:"SideBySideContainer"},(0,o.kt)(p,{mdxType:"SideBySideColumn"},(0,o.kt)("p",null,"Let\u2019s create a rudimentary example of an analytics dashboard made with Google Spreadsheets to have some insights on which restaurants pages of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," are more visited.")),(0,o.kt)(p,{mdxType:"SideBySideColumn"},(0,o.kt)("figure",{style:{width:"100%",margin:"0"}},(0,o.kt)("img",{src:"/img/assets/backend-customization/custom-global-middleware-in-action.gif",alt:"Visiting a restaurant page updates the Google Sheets spreadsheet"}),(0,o.kt)("em",null,(0,o.kt)("figcaption",{style:{fontSize:"12px"}},"Every GET request to a restaurant's page executes the code of a custom middleware, updating a Google Sheets spreadsheet in real-time."))))),(0,o.kt)(u,{mdxType:"SideBySideContainer"},(0,o.kt)(p,{mdxType:"SideBySideColumn"},(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\ud83c\udfaf Goals"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create some utility functions that interact with Google Sheets."),(0,o.kt)("li",{parentName:"ul"},"Create a custom Strapi middleware that will create and/or update an existing Google Sheet document every time we have an incoming request to a Restaurants page of the FoodAdvisor project."),(0,o.kt)("li",{parentName:"ul"},"Append the custom middleware to the route where we want it to get executed."))),(0,o.kt)(p,{mdxType:"SideBySideColumn"},(0,o.kt)(m,{title:"Related concept",mdxType:"SubtleCallout"},(0,o.kt)("p",null,"Additional information can be found in the ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/middlewares"},"middlewares customization")," documentation.")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\ud83e\uddd1\u200d\ud83d\udcbb Code example:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"/api")," folder of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," project, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"/restaurant/middlewares/utils.js")," file with the following example code:"),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Example utility functions that could be used to read, write and update a Google spreadsheet:"),(0,o.kt)("p",{parentName:"li"},"The following code allows reading, writing, and updating a Google spreadsheet given an API Key read from a JSON file and a spreadsheet ID retrieved from the URL:"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"Google Spreadsheet URL",src:a(59229).Z,width:"972",height:"53"})),(0,o.kt)("p",{parentName:"li"},"Additional information can be found in the official ",(0,o.kt)("a",{parentName:"p",href:"https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values?hl=es-419"},"Google Sheets API documentation"),"."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/api/restaurant/middlewares/utils.js"',title:'"src/api/restaurant/middlewares/utils.js"'},"\nconst { google } = require('googleapis');\n\nconst createGoogleSheetClient = async ({\n  keyFile,\n  sheetId,\n  tabName,\n  range,\n}) => {\n  async function getGoogleSheetClient() {\n    const auth = new google.auth.GoogleAuth({\n      keyFile,\n      scopes: ['https://www.googleapis.com/auth/spreadsheets'],\n    });\n    const authClient = await auth.getClient();\n    return google.sheets({\n      version: 'v4',\n      auth: authClient,\n    });\n  }\n\n  const googleSheetClient = await getGoogleSheetClient();\n\n  const writeGoogleSheet = async (data) => {\n    googleSheetClient.spreadsheets.values.append({\n      spreadsheetId: sheetId,\n      range: `${tabName}!${range}`,\n      valueInputOption: 'USER_ENTERED',\n      insertDataOption: 'INSERT_ROWS',\n      resource: {\n        majorDimension: 'ROWS',\n        values: data,\n      },\n    });\n  };\n\n  const updateoogleSheet = async (cell, data) => {\n    googleSheetClient.spreadsheets.values.update({\n      spreadsheetId: sheetId,\n      range: `${tabName}!${cell}`,\n      valueInputOption: 'USER_ENTERED',\n      resource: {\n        majorDimension: 'ROWS',\n        values: data,\n      },\n    });\n  };\n\n  const readGoogleSheet = async () => {\n    const res = await googleSheetClient.spreadsheets.values.get({\n      spreadsheetId: sheetId,\n      range: `${tabName}!${range}`,\n    });\n\n    return res.data.values;\n  };\n\n  return {\n    writeGoogleSheet,\n    updateoogleSheet,\n    readGoogleSheet,\n  };\n};\n\nmodule.exports = {\n  createGoogleSheetClient,\n};\n")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"/api")," folder of the FoodAdvisor project, create a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"analytics")," middleware with the following code:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/api/restaurant/middlewares/analytics.js"',title:'"src/api/restaurant/middlewares/analytics.js"'},"\n'use strict';\n\nconst { createGoogleSheetClient } = require('./utils');\n\nconst serviceAccountKeyFile = './gs-keys.json';\n// Replace the sheetId value with the corresponding id found in your own URL\nconst sheetId = '1P7Oeh84c18NlHp1Zy-5kXD8zgpoA1WmvYL62T4GWpfk';\nconst tabName = 'Restaurants';\nconst range = 'A2:C';\n\nconst VIEWS_CELL = 'C';\n\nconst transformGSheetToObject = (response) =>\n  response.reduce(\n    (acc, restaurant) => ({\n      ...acc,\n      [restaurant[0]]: {\n        id: restaurant[0],\n        name: restaurant[1],\n        views: restaurant[2],\n        cellNum: Object.keys(acc).length + 2 // + 2 because we need to consider the header and that the initial length is 0, so our first real row would be 2,\n      },\n    }),\n    {}\n  );\n\nmodule.exports = (config, { strapi }) => {\n  return async (context, next) => {\n    // Generating google sheet client\n    const { readGoogleSheet, updateoogleSheet, writeGoogleSheet } =\n      await createGoogleSheetClient({\n        keyFile: serviceAccountKeyFile,\n        range,\n        sheetId,\n        tabName,\n      });\n    \n    // Get the restaurant ID from the params in the URL\n    const restaurantId = context.params.id;\n    const restaurant = await strapi.entityService.findOne(\n      'api::restaurant.restaurant',\n      restaurantId\n    );\n\n    // Read the spreadsheet to get the current data\n    const restaurantAnalytics = await readGoogleSheet();\n    \n    /** \n     * The returned data comes in the shape [1, \"Mint Lounge\", 23],\n     * and we need to transform it into an object: {id: 1, name: \"Mint Lounge\", views: 23, cellNum: 2}\n     */\n    const requestedRestaurant =\n      transformGSheetToObject(restaurantAnalytics)[restaurantId];\n\n    if (requestedRestaurant) {\n      await updateoogleSheet(\n        `${VIEWS_CELL}${requestedRestaurant.cellNum}:${VIEWS_CELL}${requestedRestaurant.cellNum}`,\n        [[Number(requestedRestaurant.views) + 1]]\n      );\n    } else {\n      /** If we don't have the restaurant in the spreadsheet already, \n       * we create it with 1 view.\n       */\n      const newRestaurant = [[restaurant.id, restaurant.name, 1]];\n      await writeGoogleSheet(newRestaurant);\n    }\n  \n    // Call next to continue with the flow and get to the controller\n    await next();\n  };\n};\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'Configure the routes for the "Restaurants" content-type to execute the custom ',(0,o.kt)("inlineCode",{parentName:"p"},"analytics")," middleware whenever a restaurant page is queried. To do so, use the following code:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/api/restaurant/routes/restaurant.js"',title:'"src/api/restaurant/routes/restaurant.js"'},"\n'use strict';\n\nconst { createCoreRouter } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreRouter('api::restaurant.restaurant', {\n  config: {\n    findOne: {\n      auth: false,\n      policies: [],\n      middlewares: ['api::restaurant.analytics'],\n    },\n  },\n});\n")))))}g.isMDXComponent=!0},59229:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/tutorial-spreadsheet-url-91efd5b0a428e0c263a776721d414343.png"}}]);