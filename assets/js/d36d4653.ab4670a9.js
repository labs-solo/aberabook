"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[411],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=i,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3860:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(83117),i=(n(67294),n(3905));const l={sidebar_label:"Admin Panel API",toc_max_heading_level:4},r="Admin Panel API for plugins",o={unversionedId:"dev-docs/api/plugins/admin-panel-api",id:"dev-docs/api/plugins/admin-panel-api",title:"Admin Panel API for plugins",description:"A Strapi plugin can interact with both the back end and the front end of a Strapi application. The Admin Panel API is about the front end part, i.e. it allows a plugin to customize Strapi's admin panel.",source:"@site/docs/dev-docs/api/plugins/admin-panel-api.md",sourceDirName:"dev-docs/api/plugins",slug:"/dev-docs/api/plugins/admin-panel-api",permalink:"/aberabook/dev-docs/api/plugins/admin-panel-api",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/plugins/admin-panel-api.md",tags:[],version:"current",frontMatter:{sidebar_label:"Admin Panel API",toc_max_heading_level:4}},p={},s=[{value:"Entry file",id:"entry-file",level:2},{value:"Lifecycle functions",id:"lifecycle-functions",level:2},{value:"register()",id:"register",level:3},{value:"registerPlugin()",id:"registerplugin",level:4},{value:"bootstrap()",id:"bootstrap",level:3},{value:"Async function",id:"async-function",level:2},{value:"registerTrads()",id:"registertrads",level:3},{value:"Available actions",id:"available-actions",level:2},{value:"Menu API",id:"menu-api",level:3},{value:"Settings API",id:"settings-api",level:3},{value:"createSettingSection()",id:"createsettingsection",level:4},{value:"addSettingsLink()",id:"addsettingslink",level:4},{value:"addSettingsLinks()",id:"addsettingslinks",level:4},{value:"Injection Zones API",id:"injection-zones-api",level:3},{value:"Using predefined injection zones",id:"using-predefined-injection-zones",level:4},{value:"Creating a custom injection zone",id:"creating-a-custom-injection-zone",level:4},{value:"Injecting components",id:"injecting-components",level:4},{value:"Accessing data with the <code>useCMEditViewDataManager</code> React hook",id:"accessing-data-with-the-usecmeditviewdatamanager-react-hook",level:4},{value:"Reducers API",id:"reducers-api",level:3},{value:"Hooks API",id:"hooks-api",level:3},{value:"Predefined hook",id:"predefined-hook",level:4}],d={toc:s};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"admin-panel-api-for-plugins"},"Admin Panel API for plugins"),(0,i.kt)("p",null,"A Strapi ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins"},"plugin")," can interact with both the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/plugins/server-api"},"back end")," and the front end of a Strapi application. The Admin Panel API is about the front end part, i.e. it allows a plugin to customize Strapi's ",(0,i.kt)("a",{parentName:"p",href:"/user-docs/intro"},"admin panel"),"."),(0,i.kt)("p",null,"The admin panel is a ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React")," application that can embed other React applications. These other React applications are the admin parts of each Strapi plugin."),(0,i.kt)("admonition",{type:"prerequisites"},(0,i.kt)("p",{parentName:"admonition"},"You have ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/development/create-a-plugin"},"created a Strapi plugin"),".")),(0,i.kt)("p",null,"The Admin Panel API includes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"an ",(0,i.kt)("a",{parentName:"li",href:"#entry-file"},"entry file")," which exports the required interface,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#lifecycle-functions"},"lifecycle functions")," and the ",(0,i.kt)("inlineCode",{parentName:"li"},"registerTrad()")," ",(0,i.kt)("a",{parentName:"li",href:"#async-function"},"async function"),","),(0,i.kt)("li",{parentName:"ul"},"and several ",(0,i.kt)("a",{parentName:"li",href:"#available-actions"},"specific APIs")," for your plugin to interact with the admin panel.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The whole code for the admin panel part of your plugin could live in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/strapi-admin.js|ts")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"/admin/src/index.js|ts")," file. However, it's recommended to split the code into different folders, just like the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins/development/plugin-structure"},"structure")," created by the ",(0,i.kt)("inlineCode",{parentName:"p"},"strapi generate plugin")," CLI generator command.")),(0,i.kt)("h2",{id:"entry-file"},"Entry file"),(0,i.kt)("p",null,"The entry file for the Admin Panel API is ",(0,i.kt)("inlineCode",{parentName:"p"},"[plugin-name]/admin/src/index.js"),". This file exports the required interface, with the following functions available:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Function type"),(0,i.kt)("th",{parentName:"tr",align:null},"Available functions"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Lifecycle functions"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("ul",null,(0,i.kt)("li",null," ",(0,i.kt)("a",{parentName:"td",href:"#register"},"register")),(0,i.kt)("li",null,(0,i.kt)("a",{parentName:"td",href:"#bootstrap"},"bootstrap"))))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Async function"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#registertrads"},"registerTrads"))))),(0,i.kt)("h2",{id:"lifecycle-functions"},"Lifecycle functions"),(0,i.kt)("h3",{id:"register"},"register()"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")),(0,i.kt)("p",null,"This function is called to load the plugin, even before the app is actually ",(0,i.kt)("a",{parentName:"p",href:"#bootstrap"},"bootstrapped"),". It takes the running Strapi application as an argument (",(0,i.kt)("inlineCode",{parentName:"p"},"app"),")."),(0,i.kt)("p",null,"Within the register function, a plugin can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#registerplugin"},"register itself")," so it's available to the admin panel"),(0,i.kt)("li",{parentName:"ul"},"add a new link to the main navigation (see ",(0,i.kt)("a",{parentName:"li",href:"#menu-api"},"Menu API"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#createsettingsection"},"create a new settings section")),(0,i.kt)("li",{parentName:"ul"},"define ",(0,i.kt)("a",{parentName:"li",href:"#injection-zones-api"},"injection zones")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#reducers-api"},"add reducers"))),(0,i.kt)("h4",{id:"registerplugin"},"registerPlugin()"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")),(0,i.kt)("p",null,"Registers the plugin to make it available in the admin panel."),(0,i.kt)("p",null,"This function returns an object with the following parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"id")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"Plugin id")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"name")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"Plugin name")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"injectionZones")),(0,i.kt)("td",{parentName:"tr",align:null},"Object"),(0,i.kt)("td",{parentName:"tr",align:null},"Declaration of available ",(0,i.kt)("a",{parentName:"td",href:"#injection-zones-api"},"injection zones"))))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Some parameters can be imported from the ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," file.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"\n// Auto-generated component\nimport PluginIcon from './components/PluginIcon';\nimport pluginId from './pluginId'\n\nexport default {\n  register(app) {\n    app.addMenuLink({\n      to: `/plugins/${pluginId}`,\n      icon: PluginIcon,\n      intlLabel: {\n        id: `${pluginId}.plugin.name`,\n        defaultMessage: 'My plugin',\n      },\n      Component: async () => {\n        const component = await import(/* webpackChunkName: \"my-plugin\" */ './pages/App');\n\n        return component;\n      },\n      permissions: [], // array of permissions (object), allow a user to access a plugin depending on its permissions\n    });\n    app.registerPlugin({\n      id: pluginId,\n      name,\n    });\n  },\n};\n")),(0,i.kt)("h3",{id:"bootstrap"},"bootstrap()"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")),(0,i.kt)("p",null,"Exposes the bootstrap function, executed after all the plugins are ",(0,i.kt)("a",{parentName:"p",href:"#register"},"registered"),"."),(0,i.kt)("p",null,"Within the bootstrap function, a plugin can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"extend another plugin, using ",(0,i.kt)("inlineCode",{parentName:"li"},"getPlugin('plugin-name')"),","),(0,i.kt)("li",{parentName:"ul"},"register hooks (see ",(0,i.kt)("a",{parentName:"li",href:"#hooks-api"},"Hooks API"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#settings-api"},"add links to a settings section"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = () => {\n  return {\n    // ...\n    bootstrap(app) {\n      // execute some bootstrap code\n      app.injectContentManagerComponent('editView', 'right-links', { name: 'my-compo', Component: () => 'my-compo' })\n    },\n  };\n};\n")),(0,i.kt)("h2",{id:"async-function"},"Async function"),(0,i.kt)("p",null,"While ",(0,i.kt)("a",{parentName:"p",href:"#register"},(0,i.kt)("inlineCode",{parentName:"a"},"register()"))," and ",(0,i.kt)("a",{parentName:"p",href:"#bootstrap"},(0,i.kt)("inlineCode",{parentName:"a"},"bootstrap()"))," are lifecycle functions, ",(0,i.kt)("inlineCode",{parentName:"p"},"registerTrads()")," is an async function."),(0,i.kt)("h3",{id:"registertrads"},"registerTrads()"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")),(0,i.kt)("p",null,"To reduce the build size, the admin panel is only shipped with 2 locales by default (",(0,i.kt)("inlineCode",{parentName:"p"},"en")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"fr"),"). The ",(0,i.kt)("inlineCode",{parentName:"p"},"registerTrads()")," function is used to register a plugin's translations files and to create separate chunks for the application translations. It does not need to be modified."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example: Register a plugin's translation files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'export default {\n  async registerTrads({ locales }) {\n    const importedTrads = await Promise.all(\n      locales.map(locale => {\n        return import(\n          /* webpackChunkName: "[pluginId]-[request]" */ `./translations/${locale}.json`\n        )\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n'))),(0,i.kt)("h2",{id:"available-actions"},"Available actions"),(0,i.kt)("p",null,"The Admin Panel API allows a plugin to take advantage of several small APIs to perform actions. Use this table as a reference:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Action"),(0,i.kt)("th",{parentName:"tr",align:null},"API to use"),(0,i.kt)("th",{parentName:"tr",align:null},"Function to use"),(0,i.kt)("th",{parentName:"tr",align:null},"Related lifecycle function"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Add a new link to the main navigation"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#menu-api"},"Menu API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#menu-api"},(0,i.kt)("inlineCode",{parentName:"a"},"addMenuLink()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#register"},(0,i.kt)("inlineCode",{parentName:"a"},"register()")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Create a new settings section"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#settings-api"},"Settings API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#createsettingsection"},(0,i.kt)("inlineCode",{parentName:"a"},"createSettingSection()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#register"},(0,i.kt)("inlineCode",{parentName:"a"},"register()")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Declare an injection zone"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#injection-zones-api"},"Injection Zones API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#registerplugin"},(0,i.kt)("inlineCode",{parentName:"a"},"registerPlugin()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#register"},(0,i.kt)("inlineCode",{parentName:"a"},"register()")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Add a reducer"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#reducers-api"},"Reducers API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#reducers-api"},(0,i.kt)("inlineCode",{parentName:"a"},"addReducers()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#register"},(0,i.kt)("inlineCode",{parentName:"a"},"register()")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Create a hook"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#hooks-api"},"Hooks API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#hooks-api"},(0,i.kt)("inlineCode",{parentName:"a"},"createHook()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#register"},(0,i.kt)("inlineCode",{parentName:"a"},"register()")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Add a single link to a settings section"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#settings-api"},"Settings API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#addsettingslink"},(0,i.kt)("inlineCode",{parentName:"a"},"addSettingsLink()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#bootstrap"},(0,i.kt)("inlineCode",{parentName:"a"},"bootstrap()")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Add multiple links to a settings section"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#settings-api"},"Settings API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#addsettingslinks"},(0,i.kt)("inlineCode",{parentName:"a"},"addSettingsLinks()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#bootstrap"},(0,i.kt)("inlineCode",{parentName:"a"},"bootstrap()")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Inject a Component in an injection zone"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#injection-zones-api"},"Injection Zones API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#injection-zones-api"},(0,i.kt)("inlineCode",{parentName:"a"},"injectComponent()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#register"},(0,i.kt)("inlineCode",{parentName:"a"},"bootstrap()")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Register a hook"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#hooks-api"},"Hooks API")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#hooks-api"},(0,i.kt)("inlineCode",{parentName:"a"},"registerHook()"))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#bootstrap"},(0,i.kt)("inlineCode",{parentName:"a"},"bootstrap()")))))),(0,i.kt)("admonition",{title:"Replacing the WYSIWYG",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The WYSIWYG editor can be replaced by taking advantage of ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/custom-fields"},"custom fields"),", for instance using the ",(0,i.kt)("a",{parentName:"p",href:"https://market.strapi.io/plugins/@ckeditor-strapi-plugin-ckeditor"},"CKEditor custom field plugin"),".")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The admin panel supports dotenv variables."),(0,i.kt)("p",{parentName:"admonition"},"All variables defined in a ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file and prefixed by ",(0,i.kt)("inlineCode",{parentName:"p"},"STRAPI_ADMIN_")," are available while customizing the admin panel through ",(0,i.kt)("inlineCode",{parentName:"p"},"process.env"),".")),(0,i.kt)("h3",{id:"menu-api"},"Menu API"),(0,i.kt)("p",null,"The Menu API allows a plugin to add a new link to the main navigation through the ",(0,i.kt)("inlineCode",{parentName:"p"},"addMenuLink()")," function with the following parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"to")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"Path the link should point to")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"icon")),(0,i.kt)("td",{parentName:"tr",align:null},"React Component"),(0,i.kt)("td",{parentName:"tr",align:null},"Icon to display in the main navigation")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"intlLabel")),(0,i.kt)("td",{parentName:"tr",align:null},"Object"),(0,i.kt)("td",{parentName:"tr",align:null},"Label for the link, following the ",(0,i.kt)("a",{parentName:"td",href:"https://formatjs.io/docs/react-intl"},"React Int'l")," convention, with:",(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"id"),": id used to insert the localized label"),(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"defaultMessage"),": default label for the link")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Component")),(0,i.kt)("td",{parentName:"tr",align:null},"Async function"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a dynamic import of the plugin entry point")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"permissions")),(0,i.kt)("td",{parentName:"tr",align:null},"Array of Objects"),(0,i.kt)("td",{parentName:"tr",align:null},"Permissions declared in the ",(0,i.kt)("inlineCode",{parentName:"td"},"permissions.js")," file of the plugin")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"intlLabel.id")," are ids used in translation files (",(0,i.kt)("inlineCode",{parentName:"p"},"[plugin-name]/admin/src/translations/[language].json"),")")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"import PluginIcon from './components/PluginIcon';\n\nexport default {\n  register(app) {\n    app.addMenuLink({\n      to: '/plugins/my-plugin',\n      icon: PluginIcon,\n      intlLabel: {\n        id: 'my-plugin.plugin.name',\n        defaultMessage: 'My plugin',\n      },\n      Component: () => 'My plugin',\n      permissions: [], // permissions to apply to the link\n    });\n    app.registerPlugin({ ... });\n  },\n  bootstrap() {},\n};\n")),(0,i.kt)("h3",{id:"settings-api"},"Settings API"),(0,i.kt)("p",null,"The Settings API allows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#createsettingsection"},"creating a new setting section")),(0,i.kt)("li",{parentName:"ul"},"adding ",(0,i.kt)("a",{parentName:"li",href:"#addsettingslink"},"a single link")," or ",(0,i.kt)("a",{parentName:"li",href:"#addsettingslinks"},"multiple links at once")," to existing settings sections")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Adding a new section happens in the ",(0,i.kt)("a",{parentName:"p",href:"#register"},"register")," lifecycle while adding links happens during the ",(0,i.kt)("a",{parentName:"p",href:"#bootstrap"},"bootstrap")," lifecycle.")),(0,i.kt)("p",null,"All functions accept links as objects with the following parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"id")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"React id")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"to")),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"Path the link should point to")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"intlLabel")),(0,i.kt)("td",{parentName:"tr",align:null},"Object"),(0,i.kt)("td",{parentName:"tr",align:null},"Label for the link, following the ",(0,i.kt)("a",{parentName:"td",href:"https://formatjs.io/docs/react-intl"},"React Int'l")," convention, with:",(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"id"),": id used to insert the localized label"),(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"defaultMessage"),": default label for the link")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Component")),(0,i.kt)("td",{parentName:"tr",align:null},"Async function"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns a dynamic import of the plugin entry point")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"permissions")),(0,i.kt)("td",{parentName:"tr",align:null},"Array of Objects"),(0,i.kt)("td",{parentName:"tr",align:null},"Permissions declared in the ",(0,i.kt)("inlineCode",{parentName:"td"},"permissions.js")," file of the plugin")))),(0,i.kt)("h4",{id:"createsettingsection"},"createSettingSection()"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")),(0,i.kt)("p",null,"Create a new settings section."),(0,i.kt)("p",null,"The function takes 2 arguments:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Argument"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"first argument"),(0,i.kt)("td",{parentName:"tr",align:null},"Object"),(0,i.kt)("td",{parentName:"tr",align:null},"Section label:",(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"id")," (String): section id"),(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"intlLabel")," (Object): localized label for the section, following the ",(0,i.kt)("a",{parentName:"td",href:"https://formatjs.io/docs/react-intl"},"React Int'l")," convention, with:",(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"id"),": id used to insert the localized label"),(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"defaultMessage"),": default label for the section")))))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"second argument"),(0,i.kt)("td",{parentName:"tr",align:null},"Array of Objects"),(0,i.kt)("td",{parentName:"tr",align:null},"Links included in the section")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"intlLabel.id")," are ids used in translation files (",(0,i.kt)("inlineCode",{parentName:"p"},"[plugin-name]/admin/src/translations/[language].json"),")")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"\nconst myComponent = async () => {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  register(app) {\n    app.createSettingSection(\n      { id: String, intlLabel: { id: String, defaultMessage: String } }, // Section to create\n      [\n        // links\n        {\n          intlLabel: { id: String, defaultMessage: String },\n          id: String,\n          to: String,\n          Component: myComponent,\n          permissions: Object[],\n        },\n      ]\n    );\n  },\n};\n")),(0,i.kt)("h4",{id:"addsettingslink"},"addSettingsLink()"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")),(0,i.kt)("p",null,"Add a unique link to an existing settings section."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"\nconst myComponent = async () => {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  bootstrap(app) {\n        // Adding a single link\n        app.addSettingsLink(\n         'global', // id of the section to add the link to\n            {\n                intlLabel: { id: String, defaultMessage: String },\n                id: String,\n                to: String,\n                Component: myComponent,\n                permissions: Object[]\n            }\n    )\n  }\n}\n")),(0,i.kt)("h4",{id:"addsettingslinks"},"addSettingsLinks()"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")),(0,i.kt)("p",null,"Add multiple links to an existing settings section."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"\nconst myComponent = async () => {\n  const component = await import(\n    /* webpackChunkName: \"users-providers-settings-page\" */ './pages/Providers'\n  );\n\n  return component;\n};\n\nexport default {\n  bootstrap(app) {\n    // Adding several links at once\n    app.addSettingsLinks(\n      'global', // id of the section to add the link in\n        [{\n          intlLabel: { id: String, defaultMessage: String },\n          id: String,\n          to: String,\n          Component: myComponent,\n          permissions: Object[]\n        }]\n    )\n  }\n}\n")),(0,i.kt)("h3",{id:"injection-zones-api"},"Injection Zones API"),(0,i.kt)("p",null,"Injection zones refer to areas of a view's layout where a plugin allows another to inject a custom React component (e.g. a UI element like a button)."),(0,i.kt)("p",null,"Plugins can use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Strapi's ",(0,i.kt)("a",{parentName:"li",href:"#using-predefined-injection-zones"},"predefined injection zones")," for the Content Manager,"),(0,i.kt)("li",{parentName:"ul"},"or custom injection zones, created by a plugin")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Injection zones are defined in the ",(0,i.kt)("a",{parentName:"p",href:"#register"},"register()")," lifecycle but components are injected in the ",(0,i.kt)("a",{parentName:"p",href:"#bootstrap"},"bootstrap()")," lifecycle.")),(0,i.kt)("h4",{id:"using-predefined-injection-zones"},"Using predefined injection zones"),(0,i.kt)("p",null,"Strapi admin panel comes with predefined injection zones so components can be added to the UI of the ",(0,i.kt)("a",{parentName:"p",href:"/user-docs/intro"},"Content Manager"),":"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"View"),(0,i.kt)("th",{parentName:"tr",align:null},"Injection zone name & Location"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"List view"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"actions"),": sits between Filters and the cogs icon"),(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"deleteModalAdditionalInfos()"),": sits at the bottom of the modal displayed when deleting items")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Edit view"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"informations"),": sits at the top right of the edit view"),(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"right-links"),': sits between "Configure the view" and "Edit" buttons')))))),(0,i.kt)("h4",{id:"creating-a-custom-injection-zone"},"Creating a custom injection zone"),(0,i.kt)("p",null,"To create a custom injection zone, declare it as a ",(0,i.kt)("inlineCode",{parentName:"p"},"<InjectionZone />")," React component with an ",(0,i.kt)("inlineCode",{parentName:"p"},"area")," prop that takes a string with the following naming convention: ",(0,i.kt)("inlineCode",{parentName:"p"},"plugin-name.viewName.injectionZoneName"),"."),(0,i.kt)("h4",{id:"injecting-components"},"Injecting components"),(0,i.kt)("p",null,"A plugin has 2 different ways of injecting a component:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"to inject a component from a plugin into another plugin's injection zones, use the ",(0,i.kt)("inlineCode",{parentName:"li"},"injectComponent()")," function"),(0,i.kt)("li",{parentName:"ul"},"to specifically inject a component into one of the Content Manager's ",(0,i.kt)("a",{parentName:"li",href:"#using-predefined-injection-zones"},"predefined injection zones"),", use the ",(0,i.kt)("inlineCode",{parentName:"li"},"injectContentManagerComponent()")," function instead")),(0,i.kt)("p",null,"Both the ",(0,i.kt)("inlineCode",{parentName:"p"},"injectComponent()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"injectContentManagerComponent()")," methods accept the following arguments:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Argument"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"first argument"),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"The view where the component is injected")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"second argument"),(0,i.kt)("td",{parentName:"tr",align:null},"String"),(0,i.kt)("td",{parentName:"tr",align:null},"The zone where the component is injected")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"third argument"),(0,i.kt)("td",{parentName:"tr",align:null},"Object"),(0,i.kt)("td",{parentName:"tr",align:null},"An object with the following keys:",(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"name")," (string): the name of the component"),(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"Component")," (function or class): the React component to be injected")))))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example: Inject a component in the informations box of the Edit View of the Content Manager:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"\nexport default {\n  bootstrap(app) {\n    app.injectContentManagerComponent('editView', 'informations', {\n      name: 'my-plugin-my-compo',\n      Component: () => 'my-compo',\n    });\n  }\n}\n"))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example: Creating a new injection zone and injecting it from a plugin to another one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-plugin/admin/src/injectionZones.js"',title:'"my-plugin/admin/src/injectionZones.js"'},"// Use the injection zone in a view\n\nimport { InjectionZone } from '@strapi/helper-plugin';\n\nconst HomePage = () => {\n  return (\n    <main>\n      <h1>This is the homepage</h1>\n        <InjectionZone area=\"my-plugin.homePage.right\" />\n    </main>\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"// Declare this injection zone in the register lifecycle of the plugin\n\nexport default {\n  register() {\n    app.registerPlugin({\n      // ...\n      injectionZones: {\n        homePage: {\n          right: []\n        }\n      }\n    });\n  },\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-other-plugin/admin/src/index.js"',title:'"my-other-plugin/admin/src/index.js"'},"// Inject the component from a plugin in another plugin\n\nexport default {\n  register() {\n    // ...\n  },\n  bootstrap(app) {\n    app.getPlugin('my-plugin').injectComponent('homePage', 'right', {\n      name: 'my-other-plugin-component',\n      Component: () => 'This component is injected',\n    });\n  }\n};\n"))),(0,i.kt)("h4",{id:"accessing-data-with-the-usecmeditviewdatamanager-react-hook"},"Accessing data with the ",(0,i.kt)("inlineCode",{parentName:"h4"},"useCMEditViewDataManager")," React hook"),(0,i.kt)("p",null,"Once an injection zone is defined, the component to be injected in the Content Manager can have access to all the data of the Edit View through the ",(0,i.kt)("inlineCode",{parentName:"p"},"useCMEditViewDataManager")," React hook."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example of a basic component using the 'useCMEditViewDataManager' hook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { useCMEditViewDataManager } from '@strapi/helper-plugin';\n\nconst MyCompo = () => {\n  const {\n    createActionAllowedFields: [], // Array of fields that the user is allowed to edit\n    formErrors: {}, // Object errors\n    readActionAllowedFields: [], // Array of field that the user is allowed to edit\n    slug: 'api::address.address', // Slug of the content-type\n    updateActionAllowedFields: [],\n    allLayoutData: {\n      components: {}, // components layout\n      contentType: {}, // content-type layout\n    },\n    initialData: {},\n    isCreatingEntry: true,\n    isSingleType: true,\n    status: 'resolved',\n    layout: {}, // Current content-type layout\n    hasDraftAndPublish: true,\n    modifiedData: {},\n    onPublish: () => {},\n    onUnpublish: () => {},\n    addComponentToDynamicZone: () => {},\n    addNonRepeatableComponentToField: () => {},\n    addRelation: () => {},\n    addRepeatableComponentToField: () => {},\n    moveComponentDown: () => {},\n    moveComponentField: () => {},\n    moveComponentUp: () => {},\n    moveRelation: () => {},\n    onChange: () => {},\n    onRemoveRelation: () => {},\n    removeComponentFromDynamicZone: () => {},\n    removeComponentFromField: () => {},\n    removeRepeatableField: () => {},\n  } = useCMEditViewDataManager()\n\n  return null\n}\n"))),(0,i.kt)("h3",{id:"reducers-api"},"Reducers API"),(0,i.kt)("p",null,"Reducers are ",(0,i.kt)("a",{parentName:"p",href:"https://redux.js.org/"},"Redux")," reducers that can be used to share state between components. Reducers can be useful when:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Large amounts of application state are needed in many places in the application."),(0,i.kt)("li",{parentName:"ul"},"The application state is updated frequently."),(0,i.kt)("li",{parentName:"ul"},"The logic to update that state may be complex.")),(0,i.kt)("p",null,"Reducers can be added to a plugin interface with the ",(0,i.kt)("inlineCode",{parentName:"p"},"addReducers()")," function during the ",(0,i.kt)("a",{parentName:"p",href:"#register"},(0,i.kt)("inlineCode",{parentName:"a"},"register"))," lifecycle."),(0,i.kt)("p",null,"A reducer is declared as an object with this syntax:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"import { exampleReducer } from './reducers'\n\nconst reducers = {\n  // Reducer Syntax\n  [`${pluginId}_exampleReducer`]: exampleReducer\n}\n\nexport default {\n  register(app) {\n    app.addReducers(reducers)\n  },\n  bootstrap() {},\n};\n\n\n")),(0,i.kt)("h3",{id:"hooks-api"},"Hooks API"),(0,i.kt)("p",null,"The Hooks API allows a plugin to create and register hooks, i.e. places in the application where plugins can add personalized behavior."),(0,i.kt)("p",null,"Hooks should be registered during the ",(0,i.kt)("a",{parentName:"p",href:"#bootstrap"},"bootstrap")," lifecycle of a plugin."),(0,i.kt)("p",null,"Hooks can then be run in series, in waterfall or in parallel:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"runHookSeries")," returns an array corresponding to the result of each function executed, ordered"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"runHookParallel")," returns an array corresponding to the result of the promise resolved by the function executed, ordered"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"runHookWaterfall")," returns a single value corresponding to all the transformations applied by the different functions starting with the initial value ",(0,i.kt)("inlineCode",{parentName:"li"},"args"),".")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example: Create a hook in a plugin and use it in another plugin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-plugin/admin/src/index.js"',title:'"my-plugin/admin/src/index.js"'},"// Create a hook in a plugin\nexport default {\n  register(app) {\n    app.createHook('My-PLUGIN/MY_HOOK');\n  }\n}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="my-other-plugin/admin/src/index.js"',title:'"my-other-plugin/admin/src/index.js"'},"// Use the hook in another plugin\nexport default {\n  bootstrap(app) {\n    app.registerHook('My-PLUGIN/MY_HOOK', (...args) => {\n      console.log(args)\n\n      // important: return the mutated data\n      return args\n    });\n\n    app.registerPlugin({...})\n  }\n}\n"))),(0,i.kt)("h4",{id:"predefined-hook"},"Predefined hook"),(0,i.kt)("p",null,"Strapi includes a predefined ",(0,i.kt)("inlineCode",{parentName:"p"},"Admin/CM/pages/ListView/inject-column-in-table")," hook that can be used to add or mutate a column of the List View of the ",(0,i.kt)("a",{parentName:"p",href:"/user-docs/intro"},"Content Manager"),"."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example: 'Admin/CM/pages/ListView/inject-column-in-table' hook, as used by the Internationalization plugin to add the 'Content available in' column"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./plugins/my-plugin/admin/src/index.js"',title:'"./plugins/my-plugin/admin/src/index.js"'},"import get from 'lodash/get';\nimport cellFormatter from './components/cellFormatter';\n\nexport default {\n  bootstrap(app) {\n    app.registerHook(\n      'Admin/CM/pages/ListView/inject-column-in-table',\n      ({ displayedHeaders, layout }) => {\n        const isFieldLocalized = get(\n          layout,\n          'contentType.pluginOptions.i18n.localized',\n          false\n        );\n        if (!isFieldLocalized) {\n          return { displayedHeaders, layout };\n        }\n        return {\n          layout,\n          displayedHeaders: [\n            ...displayedHeaders,\n            {\n              key: '__locale_key__', // Needed for the table\n              fieldSchema: { type: 'string' }, // Schema of the attribute\n              metadatas: {\n                label: 'Content available in', // Label of the header,\n                sortable: true | false, // Define if the column is sortable\n              }, // Metadatas for the label\n              // Name of the key in the data we will display\n              name: 'locales',\n              // Custom renderer: props => Object.keys(props).map(key => <p key={key}>key</p>)\n              cellFormatter,\n            },\n          ],\n        };\n      }\n    );\n  },\n}\n"))))}m.isMDXComponent=!0}}]);