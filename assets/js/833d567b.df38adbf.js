"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[3874],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(r),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return r?n.createElement(m,o(o({ref:t},s),{},{components:r})):n.createElement(m,o({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},76656:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=r(83117),a=(r(67294),r(3905));const i={title:"TypeScript configuration",sidebar_label:"TypeScript",displayed_sidebar:"devDocsConfigSidebar",description:"How to configure Strapi for TypeScript development."},o="TypeScript configuration",p={unversionedId:"dev-docs/configurations/typescript",id:"dev-docs/configurations/typescript",title:"TypeScript configuration",description:"How to configure Strapi for TypeScript development.",source:"@site/docs/dev-docs/configurations/typescript.md",sourceDirName:"dev-docs/configurations",slug:"/dev-docs/configurations/typescript",permalink:"/aberabook/dev-docs/configurations/typescript",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/configurations/typescript.md",tags:[],version:"current",frontMatter:{title:"TypeScript configuration",sidebar_label:"TypeScript",displayed_sidebar:"devDocsConfigSidebar",description:"How to configure Strapi for TypeScript development."},sidebar:"devDocsConfigSidebar",previous:{title:"Plugins",permalink:"/aberabook/dev-docs/configurations/plugins"},next:{title:"API tokens",permalink:"/aberabook/dev-docs/configurations/api-tokens"}},c={},l=[{value:"Project structure and TypeScript-specific configuration files",id:"project-structure-and-typescript-specific-configuration-files",level:2},{value:"Strapi-specific configuration for TypeScript",id:"strapi-specific-configuration-for-typescript",level:2}],s={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typescript-configuration"},"TypeScript configuration"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/dev-docs/typescript"},"TypeScript"),"-enabled Strapi projects have a specific project structure and handle TypeScript project configuration through ",(0,a.kt)("a",{parentName:"p",href:"#project-structure-and-typescript-specific-configuration-files"},(0,a.kt)("inlineCode",{parentName:"a"},"tsconfig.json")," files"),"."),(0,a.kt)("p",null,"Strapi also has dedicated TypeScript features that are configured ",(0,a.kt)("a",{parentName:"p",href:"#strapi-specific-configuration-for-typescript"},"in the ",(0,a.kt)("inlineCode",{parentName:"a"},"config/typescript.js|ts")," file"),"."),(0,a.kt)("h2",{id:"project-structure-and-typescript-specific-configuration-files"},"Project structure and TypeScript-specific configuration files"),(0,a.kt)("p",null,"TypeScript-enabled Strapi applications have a specific ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/project-structure"},"project structure")," with the following dedicated folders and configuration files:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"TypeScript-specific directories and files"),(0,a.kt)("th",{parentName:"tr",align:null},"Location"),(0,a.kt)("th",{parentName:"tr",align:null},"Purpose"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"./dist")," directory"),(0,a.kt)("td",{parentName:"tr",align:null},"application root"),(0,a.kt)("td",{parentName:"tr",align:null},"Adds the location for compiling the project JavaScript source code.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"build")," directory"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"./dist")),(0,a.kt)("td",{parentName:"tr",align:null},"Contains the compiled administration panel JavaScript source code. The directory is created on the first ",(0,a.kt)("inlineCode",{parentName:"td"},"yarn build")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"npm run build")," command")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"tsconfig.json")," file"),(0,a.kt)("td",{parentName:"tr",align:null},"application root"),(0,a.kt)("td",{parentName:"tr",align:null},"Manages TypeScript compilation for the server.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"tsconfig.json")," file"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"./src/admin/")),(0,a.kt)("td",{parentName:"tr",align:null},"Manages TypeScript compilation for the admin panel.")))),(0,a.kt)("h2",{id:"strapi-specific-configuration-for-typescript"},"Strapi-specific configuration for TypeScript"),(0,a.kt)("p",null,"Types generated by Strapi are based on the user project structure. Once the type definitions are emitted into their dedicated files, Strapi reads the type definitions to adapt the autocompletion results accordingly."),(0,a.kt)("p",null,"To avoid having to ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/typescript#generate-typings-for-project-schemas"},"manually generate types")," every time the server restarts, TypeScript-based projects autogenerate the types for you. However, generating types is not a requirement for JavaScript-based projects, so if you want you can turn types autogeneration off by creating an optional ",(0,a.kt)("inlineCode",{parentName:"p"},"config/typescript.js|ts")," configuration file and setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"autogenerate")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"autogenerate")),(0,a.kt)("td",{parentName:"tr",align:null},"Enable or disable automatic types generation on server restart"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Boolean")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/typescript.js"',title:'"./config/typescript.js"'},"module.exports = ({ env }) => ({\n  autogenerate: false,\n});\n")),(0,a.kt)("admonition",{title:"\ud83d\udea7 Experimental.",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Turning off types autogeneration for JavaScript projects is considered experimental and might have issues or break some features.")))}d.isMDXComponent=!0}}]);