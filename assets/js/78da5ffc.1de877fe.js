"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[8827],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const s={title:"Next.js",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Next.js."},o="Getting Started with Next.js",i={unversionedId:"dev-docs/integrations/next-js",id:"dev-docs/integrations/next-js",title:"Next.js",description:"Integrate Strapi with Next.js.",source:"@site/docs/dev-docs/integrations/next-js.md",sourceDirName:"dev-docs/integrations",slug:"/dev-docs/integrations/next-js",permalink:"/aberabook/dev-docs/integrations/next-js",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/integrations/next-js.md",tags:[],version:"current",frontMatter:{title:"Next.js",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Next.js."},sidebar:"devDocsSidebar",previous:{title:"Laravel",permalink:"/aberabook/dev-docs/integrations/laravel"},next:{title:"Nuxt",permalink:"/aberabook/dev-docs/integrations/nuxt-js"}},l={},p=[{value:"Create a Next.js app",id:"create-a-nextjs-app",level:2},{value:"Use an HTTP client",id:"use-an-http-client",level:2},{value:"GET Request your collection type",id:"get-request-your-collection-type",level:2},{value:"Example",id:"example",level:3},{value:"POST Request your collection type",id:"post-request-your-collection-type",level:2},{value:"Example",id:"example-1",level:3},{value:"PUT Request your collection type",id:"put-request-your-collection-type",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=c("Tabs"),d=c("TabItem"),m=c("Request"),h=c("Response"),g={toc:p};function y(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-nextjs"},"Getting Started with Next.js"),(0,r.kt)("p",null,"This integration guide follows the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/quick-start"},"Quick Start Guide"),' and assumes you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL ',(0,r.kt)("a",{parentName:"p",href:"http://localhost:1337/api/restaurants"},"http://localhost:1337/api/restaurants"),"."),(0,r.kt)("p",null,"If you haven't gone through the Quick Start Guide, the way you request a Strapi API with ",(0,r.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"Next.js")," remains the same except that you do not fetch the same content."),(0,r.kt)("h2",{id:"create-a-nextjs-app"},"Create a Next.js app"),(0,r.kt)("p",null,"Create a basic Next.js application."),(0,r.kt)(u,{groupId:"yarn-npm",mdxType:"Tabs"},(0,r.kt)(d,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn create next-app nextjs-app\n"))),(0,r.kt)(d,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-next-app nextjs-ap\n")))),(0,r.kt)("h2",{id:"use-an-http-client"},"Use an HTTP client"),(0,r.kt)("p",null,"Many HTTP clients are available but in this documentation we'll use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"Axios")," and ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"Fetch"),"."),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add axios\n"))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"No installation needed.\n\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you're getting ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," errors with Axios, but your requests work fine by replacing localhost with 127.0.0.1, please ensure this is not a CORS issue (see additional details in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axios/axios/issues/4837#issuecomment-1198487683"},"axios GitHub"),").")),(0,r.kt)("h2",{id:"get-request-your-collection-type"},"GET Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to fetch all your restaurants."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example GET request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios';\n\naxios.get('http://localhost:1337/api/restaurants').then(response => {\n  console.log(response.data);\n});\n")))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example GET request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fetch('http://localhost:1337/api/restaurants', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n  .then(response => response.json())\n  .then(data => console.log(data));\n\n"))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 1,\n      "attributes": {\n        "name": "Biscotte Restaurant",\n        "description": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",\n        "createdAt": "2022-07-31T09:14:12.569Z",\n        "updatedAt": "2022-07-31T09:14:12.569Z",\n        "publishedAt": "2022-07-31T09:14:12.569Z"\n      }\n    }\n  ],\n  "meta": {\n    "pagination": {\n      "page": 1,\n      "pageSize": 25,\n      "pageCount": 1,\n      "total": 1\n    }\n  }\n}\n'))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/index.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios';\n\nconst Home = ({ restaurants, error }) => {\n  if (error) {\n    return <div>An error occured: {error.message}</div>;\n  }\n  return (\n    <ul>\n      {restaurants.data.map(restaurant => (\n        <li key={restaurant.id}>{restaurant.attributes.Name}</li>\n      ))}\n    </ul>\n  );\n};\n\nHome.getInitialProps = async ctx => {\n  try {\n    const res = await axios.get('http://localhost:1337/api/restaurants');\n    const restaurants = res.data;\n    return { restaurants };\n  } catch (error) {\n    return { error };\n  }\n};\n\nexport default Home;\n"))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/index.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const Home = ({ restaurants, error }) => {\n  if (error) {\n    return <div>An error occured: {error.message}</div>;\n  }\n  return (\n    <ul>\n      {restaurants.data.map(restaurant => (\n        <li key={restaurant.id}>{restaurant.attributes.Name}</li>\n      ))}\n    </ul>\n  );\n};\nHome.getInitialProps = async ctx => {\n  try {\n    // Parses the JSON returned by a network request\n    const parseJSON = resp => (resp.json ? resp.json() : resp);\n    // Checks if a network request came back fine, and throws an error if not\n    const checkStatus = resp => {\n      if (resp.status >= 200 && resp.status < 300) {\n        return resp;\n      }\n\n      return parseJSON(resp).then(resp => {\n        throw resp;\n      });\n    };\n\n    const headers = {\n      'Content-Type': 'application/json',\n    };\n\n    const restaurants = await fetch('http://localhost:1337/api/restaurants', {\n      method: 'GET',\n      headers,\n    })\n      .then(checkStatus)\n      .then(parseJSON);\n\n    return { restaurants };\n  } catch (error) {\n    return { error };\n  }\n};\n\nexport default Home;\n")))),(0,r.kt)("h2",{id:"post-request-your-collection-type"},"POST Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to create a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type and the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," Collection type.\nAdd the ",(0,r.kt)("inlineCode",{parentName:"p"},"?populate=categories")," query parameter to return categories with the response."),(0,r.kt)("p",null,"In this example a ",(0,r.kt)("inlineCode",{parentName:"p"},"japanese")," category has been created which has the id: 3."),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example POST request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios';\n\naxios\n  .post('http://localhost:1337/api/restaurants/?populate=categories', {\n    data: {\n      name: 'Dolemon Sushi',\n      description:\n        'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',\n      categories: [3],\n    },\n  })\n  .then(response => {\n    console.log(response);\n  });\n")))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example POST request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fetch('http://localhost:1337/api/restaurants/?populate=categories', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    data: {\n      name: 'Dolemon Sushi',\n      description:\n        'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',\n      categories: [3],\n    },\n  }),\n})\n  .then(response => response.json())\n  .then(data => console.log(data));\n"))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "id": 2,\n    "attributes": {\n      "name": "Dolemon Sushi",\n      "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n      "createdAt": "2022-07-31T09:14:12.569Z",\n      "updatedAt": "2022-07-31T09:14:12.569Z",\n      "publishedAt": "2022-07-31T09:14:12.566Z",\n      "categories": {\n        "data": [\n          {\n            "id": 3,\n            "attributes": {\n              "name": "Japanese",\n              "createdAt": "2022-07-31T10:49:03.933Z",\n              "updatedAt": "2022-07-31T10:49:04.893Z",\n              "publishedAt": "2022-07-31T10:49:04.890Z"\n            }\n          }\n        ]\n      }\n    }\n  },\n  "meta": {}\n}\n'))),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/index.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react';\nimport axios from 'axios';\n\nconst Home = ({ allCategories, errorCategories }) => {\n  const [modifiedData, setModifiedData] = useState({\n    name: '',\n    description: '',\n    categories: [],\n  });\n  const [errorRestaurants, setErrorRestaurants] = useState(null);\n\n  const handleChange = ({ target: { name, value } }) => {\n    setModifiedData(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const response = await axios.post('http://localhost:1337/api/restaurants', {\n        data: modifiedData,\n      });\n      console.log(response);\n    } catch (error) {\n      setErrorRestaurants(error);\n    }\n  };\n\n  const renderCheckbox = category => {\n    const { categories } = modifiedData;\n    const isChecked = categories.includes(category.id);\n    const handleCheckboxChange = () => {\n      if (!categories.includes(category.id)) {\n        handleChange({ target: { name: 'categories', value: categories.concat(category.id) } });\n      } else {\n        handleChange({\n          target: { name: 'categories', value: categories.filter(v => v !== category.id) },\n        });\n      }\n    };\n    return (\n      <div key={category.id}>\n        <label htmlFor={category.id}>{category.attributes.Name}</label>\n        <input\n          type=\"checkbox\"\n          checked={isChecked}\n          onChange={handleCheckboxChange}\n          name=\"categories\"\n          id={category.id}\n        />\n      </div>\n    );\n  };\n  if (errorCategories) {\n    return <div>An error occured (categories): {errorCategories.message}</div>;\n  }\n  if (errorRestaurants) {\n    return <div>An error occured (restaurants): {errorRestaurants.message}</div>;\n  }\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <h3>Restaurants</h3>\n        <br />\n        <label>\n          Name:\n          <input type=\"text\" name=\"name\" value={modifiedData.name} onChange={handleChange} />\n        </label>\n        <label>\n          Description:\n          <input\n            type=\"text\"\n            name=\"description\"\n            value={modifiedData.description}\n            onChange={handleChange}\n          />\n        </label>\n        <div>\n          <br />\n          <b>Select categories</b>\n          <br />\n          {allCategories.data.map(renderCheckbox)}\n        </div>\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nHome.getInitialProps = async ctx => {\n  try {\n    const res = await axios.get('http://localhost:1337/api/categories');\n    const allCategories = res.data;\n    return { allCategories };\n  } catch (errorCategories) {\n    return { errorCategories };\n  }\n};\n\nexport default Home;\n"))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/index.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { useState } from 'react';\n\n// Parses the JSON returned by a network request\nconst parseJSON = resp => (resp.json ? resp.json() : resp);\n// Checks if a network request came back fine, and throws an error if not\nconst checkStatus = resp => {\n  if (resp.status >= 200 && resp.status < 300) {\n    return resp;\n  }\n  return parseJSON(resp).then(resp => {\n    throw resp;\n  });\n};\nconst headers = {\n  'Content-Type': 'application/json',\n};\n\nconst Home = ({ allCategories, errorCategories }) => {\n  const [modifiedData, setModifiedData] = useState({\n    name: '',\n    description: '',\n    categories: [],\n  });\n  const [errorRestaurants, setErrorRestaurants] = useState(null);\n\n  const handleChange = ({ target: { name, value } }) => {\n    setModifiedData(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const response = await fetch('http://localhost:1337/api/restaurants', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({ data: modifiedData }),\n      })\n        .then(checkStatus)\n        .then(parseJSON);\n    } catch (error) {\n      setErrorRestaurants(error);\n    }\n  };\n\n  const renderCheckbox = category => {\n    const { categories } = modifiedData;\n    const isChecked = categories.includes(category.id);\n    const handleCheckboxChange = () => {\n      if (!categories.includes(category.id)) {\n        handleChange({ target: { name: 'categories', value: categories.concat(category.id) } });\n      } else {\n        handleChange({\n          target: { name: 'categories', value: categories.filter(v => v !== category.id) },\n        });\n      }\n    };\n    return (\n      <div key={category.id}>\n        <label htmlFor={category.id}>{category.attributes.Name}</label>\n        <input\n          type=\"checkbox\"\n          checked={isChecked}\n          onChange={handleCheckboxChange}\n          name=\"categories\"\n          id={category.id}\n        />\n      </div>\n    );\n  };\n\n  if (errorCategories) {\n    return <div>An error occured (categories): {errorCategories.message}</div>;\n  }\n  if (errorRestaurants) {\n    return <div>An error occured (restaurants): {errorRestaurants.message}</div>;\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <h3>Restaurants</h3>\n        <br />\n        <label>\n          Name:\n          <input type=\"text\" name=\"name\" value={modifiedData.name} onChange={handleChange} />\n        </label>\n        <label>\n          Description:\n          <input\n            type=\"text\"\n            name=\"description\"\n            value={modifiedData.description}\n            onChange={handleChange}\n          />\n        </label>\n        <div>\n          <br />\n          <b>Select categories</b>\n          <br />\n          {allCategories.data.map(renderCheckbox)}\n        </div>\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nHome.getInitialProps = async ctx => {\n  try {\n    const allCategories = await fetch('http://localhost:1337/api/categories', {\n      method: 'GET',\n      headers,\n    })\n      .then(checkStatus)\n      .then(parseJSON);\n    return { allCategories };\n  } catch (errorCategories) {\n    return { errorCategories };\n  }\n};\nexport default Home;\n")))),(0,r.kt)("h2",{id:"put-request-your-collection-type"},"PUT Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to update the category of a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"put")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)("p",null,"We consider that the id of your restaurant is ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),".\nand the id of your category is ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example PUT request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios';\n\naxios\n  .put('http://localhost:1337/api/restaurants/2/?populate=categories', {\n    data: {\n      categories: [2],\n    },\n  })\n  .then(response => {\n    console.log(response);\n  });\n")))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example PUT request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fetch('http://localhost:1337/api/restaurants/2/?populate=categories', {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    data: {\n      categories: [2],\n    },\n  }),\n})\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n  });\n"))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "id": 2,\n    "attributes": {\n      "name": "Dolemon Sushi",\n      "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n      "createdAt": "2022-07-31T09:14:12.569Z",\n      "updatedAt": "2022-07-31T11:17:31.598Z",\n      "publishedAt": "2022-07-31T09:14:12.566Z",\n      "categories": {\n        "data": [\n          {\n            "id": 2,\n            "attributes": {\n              "name": "Brunch",\n              "createdAt": "2022-07-30T09:23:57.857Z",\n              "updatedAt": "2022-07-30T09:26:37.236Z",\n              "publishedAt": "2022-07-30T09:26:37.233Z"\n            }\n          }\n        ]\n      }\n    }\n  },\n  "meta": {}\n}\n'))))}y.isMDXComponent=!0}}]);