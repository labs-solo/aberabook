"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[1730],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return t?i.createElement(g,o(o({ref:n},c),{},{components:t})):i.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<r;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},26796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(83117),a=(t(67294),t(3905));const r={title:"Create new Role-Based Access Control (RBAC) conditions",sidebar_label:"Role-Based Access Control (RBAC)",displayed_sidebar:"devDocsConfigSidebar",description:"In Strapi, RBAC is an approach to restricting access to some features of the admin panel to some users. The Community Edition of Strapi offers 3 default roles."},o="Create new Role-Based Access Control (RBAC) conditions",s={unversionedId:"dev-docs/configurations/rbac",id:"dev-docs/configurations/rbac",title:"Create new Role-Based Access Control (RBAC) conditions",description:"In Strapi, RBAC is an approach to restricting access to some features of the admin panel to some users. The Community Edition of Strapi offers 3 default roles.",source:"@site/docs/dev-docs/configurations/rbac.md",sourceDirName:"dev-docs/configurations",slug:"/dev-docs/configurations/rbac",permalink:"/aberabook/dev-docs/configurations/rbac",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/configurations/rbac.md",tags:[],version:"current",frontMatter:{title:"Create new Role-Based Access Control (RBAC) conditions",sidebar_label:"Role-Based Access Control (RBAC)",displayed_sidebar:"devDocsConfigSidebar",description:"In Strapi, RBAC is an approach to restricting access to some features of the admin panel to some users. The Community Edition of Strapi offers 3 default roles."},sidebar:"devDocsConfigSidebar",previous:{title:"Configurations",permalink:"/aberabook/dev-docs/configurations"},next:{title:"Public assets",permalink:"/aberabook/dev-docs/configurations/public-assets"}},l={},d=[{value:"Declaring new conditions",id:"declaring-new-conditions",level:2},{value:"Using the condition handler",id:"using-the-condition-handler",level:2},{value:"Registering conditions",id:"registering-conditions",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},p=c("Tabs"),u=c("TabItem"),m={toc:d};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-new-role-based-access-control-rbac-conditions"},"Create new Role-Based Access Control (RBAC) conditions"),(0,a.kt)("p",null,"Role-Based Access Control (RBAC) is an approach to restricting access to some users. In a Strapi application, users of the admin panel are administrators. Their roles and permissions are ",(0,a.kt)("a",{parentName:"p",href:"/user-docs/users-roles-permissions/configuring-administrator-roles"},"configured in the admin panel"),"."),(0,a.kt)("h2",{id:"declaring-new-conditions"},"Declaring new conditions"),(0,a.kt)("p",null,"Declare a single condition as an object, and multiple conditions as an array of objects. Each condition object can have 5 possible properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"displayName")," (string): the condition name as shown in the admin panel,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," (string): the condition name, kebab-cased,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"category")," (string, ",(0,a.kt)("em",{parentName:"li"},"optional"),"): conditions can be grouped into categories available ",(0,a.kt)("a",{parentName:"li",href:"/user-docs/users-roles-permissions/configuring-administrator-roles#setting-custom-conditions-for-permissions"},"in the admin panel"),'; if undefined, the condition will appear under the "Default" category,'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"plugin")," (string, ",(0,a.kt)("em",{parentName:"li"},"optional"),"): if the condition is created by a plugin, should be the plugin's name, kebab-cased (e.g ",(0,a.kt)("inlineCode",{parentName:"li"},"content-manager"),"),"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"handler"),": a function used to verify the condition (see ",(0,a.kt)("a",{parentName:"li",href:"#using-the-condition-handler"},"using the condition handler"),")")),(0,a.kt)("p",null,"Declare and register conditions in the global ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/functions#bootstrap"},(0,a.kt)("inlineCode",{parentName:"a"},"bootstrap")," function")," found in ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/index.js")," (see ",(0,a.kt)("a",{parentName:"p",href:"#registering-conditions"},"Registering conditions"),")."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The condition ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," property acts as a unique id within its namespace, that is either the plugin if the ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin")," property is defined, or the root namespace.")),(0,a.kt)("h2",{id:"using-the-condition-handler"},"Using the condition handler"),(0,a.kt)("p",null,"A condition can be applied to any permission, and the condition ",(0,a.kt)("inlineCode",{parentName:"p"},"handler")," is used to verify the condition. The ",(0,a.kt)("inlineCode",{parentName:"p"},"handler")," is a function returning a query object or a boolean value."),(0,a.kt)("p",null,"Query objects are useful to verify conditions on the entities you read, create, update, delete or publish. They use the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/crcn/sift.js"},"sift.js")," library, but only with the following supported operators:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$or")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$and")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$eq")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$eqi")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$ne")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$in")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$nin")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$lt")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$lte")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$gt")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$gte")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$exists")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$elemMatch"))),(0,a.kt)("p",null,"The condition ",(0,a.kt)("inlineCode",{parentName:"p"},"handler")," can be a synchronous or asynchronous function that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"receives the authenticated user making the request,"),(0,a.kt)("li",{parentName:"ul"},"and returns ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),", or a query object.")),(0,a.kt)("p",null,"Returning ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," is useful to verify an external condition or a condition on the authenticated user.\nFor instance, a condition that allows access to a page in the admin panel only if server time is 5pm could use this handler:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"handler: () => new Date().getHours() === 17;\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"handler")," function receives the authenticated user, so it can verify conditions on the user:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const condition = {\n  displayName: 'Email address from strapi.io',\n  name: 'email-strapi-dot-io',\n  async handler(user) {\n    return user.email.includes('@strapi.io');\n  },\n};\n")),(0,a.kt)("p",null,"For more granular control, the ",(0,a.kt)("inlineCode",{parentName:"p"},"handler")," function can also return a query object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const condition = {\n  displayName: 'price greater than 50',\n  name: 'price-gt-50',\n  async handler(user) {\n    return { price: { $gt: 50 } };\n  },\n};\n")),(0,a.kt)("h2",{id:"registering-conditions"},"Registering conditions"),(0,a.kt)("p",null,"To be available in the admin panel, conditions should be declared and registered in the global ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/functions#bootstrap"},(0,a.kt)("inlineCode",{parentName:"a"},"bootstrap")," function")," found in ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/index"),". Register a single condition with the ",(0,a.kt)("inlineCode",{parentName:"p"},"conditionProvider.register()")," method:"),(0,a.kt)(p,{groupId:"js-ts",mdxType:"Tabs"},(0,a.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/index.js"',title:'"./src/index.js"'},"\nmodule.exports = async () => {\n  await strapi.admin.services.permission.conditionProvider.register({\n    displayName: 'Billing amount under 10K',\n    name: 'billing-amount-under-10k',\n    plugin: 'admin',\n    handler: { amount: { $lt: 10000 } },\n  });\n};\n"))),(0,a.kt)(u,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/index.ts"',title:'"./src/index.ts"'},"\nexport default async () => {\n  await strapi.admin.services.permission.conditionProvider.register({\n    displayName: 'Billing amount under 10K',\n    name: 'billing-amount-under-10k',\n    plugin: 'admin',\n    handler: { amount: { $lt: 10000 } },\n  });\n};\n")))),(0,a.kt)("p",null,"To register multiple conditions, defined as an array of ",(0,a.kt)("a",{parentName:"p",href:"#declaring-new-conditions"},"condition objects"),", use ",(0,a.kt)("inlineCode",{parentName:"p"},"conditionProvider.registerMany()"),":"),(0,a.kt)(p,{groupId:"js-ts",mdxType:"Tabs"},(0,a.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/index.js"',title:'"./src/index.js"'},'\nconst conditions = [\n  {\n    displayName: "Entity has same name as user",\n    name: "same-name-as-user",\n    plugin: "name of a plugin if created in a plugin",\n    handler: (user) => {\n      return { name: user.name };\n    },\n  },\n  {\n    displayName: "Email address from strapi.io",\n    name: "email-strapi-dot-io",\n    async handler(user) {\n      return user.email.includes(\'@strapi.io\');\n    },\n  }\n];\n\nmodule.exports = {\n  async bootstrap(/*{ strapi }*/) {\n  // do your boostrap\n\n    await strapi.admin.services.permission.conditionProvider.registerMany(conditions);\n  },\n};\n'))),(0,a.kt)(u,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// path: ./src/index.ts\n\nconst conditions = [\n  {\n    displayName: "Entity has same name as user",\n    name: "same-name-as-user",\n    plugin: "name of a plugin if created in a plugin"\n    handler: (user) => {\n      return { name: user.name };\n    },\n  },\n  {\n    displayName: "Email address from strapi.io",\n    name: "email-strapi-dot-io",\n    async handler(user) {\n      return user.email.includes(\'@strapi.io\');\n    },\n  }\n];\n\nexport default async () => {\n  // do your boostrap\n\n  await strapi.admin.services.permission.conditionProvider.registerMany(conditions);\n};\n')))))}g.isMDXComponent=!0}}]);