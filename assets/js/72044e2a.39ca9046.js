"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[878],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},38188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const o={title:"React",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with React."},s="Getting Started with React",i={unversionedId:"dev-docs/integrations/react",id:"dev-docs/integrations/react",title:"React",description:"Integrate Strapi with React.",source:"@site/docs/dev-docs/integrations/react.md",sourceDirName:"dev-docs/integrations",slug:"/dev-docs/integrations/react",permalink:"/aberabook/dev-docs/integrations/react",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/integrations/react.md",tags:[],version:"current",frontMatter:{title:"React",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with React."},sidebar:"devDocsSidebar",previous:{title:"Python",permalink:"/aberabook/dev-docs/integrations/python"},next:{title:"Ruby",permalink:"/aberabook/dev-docs/integrations/ruby"}},l={},p=[{value:"Create a React app",id:"create-a-react-app",level:2},{value:"Use an HTTP client",id:"use-an-http-client",level:2},{value:"GET Request your collection type",id:"get-request-your-collection-type",level:2},{value:"Example",id:"example",level:3},{value:"POST Request your collection type",id:"post-request-your-collection-type",level:2},{value:"Example",id:"example-1",level:3},{value:"PUT Request your collection type",id:"put-request-your-collection-type",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},d=c("Tabs"),u=c("TabItem"),m=c("Request"),h=c("Response"),k={toc:p};function y(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-react"},"Getting Started with React"),(0,r.kt)("p",null,"This integration guide follows the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/quick-start"},"Quick Start Guide"),' and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL ',(0,r.kt)("a",{parentName:"p",href:"http://localhost:1337/api/restaurants"},"http://localhost:1337/api/restaurants"),"."),(0,r.kt)("p",null,"If you haven't gone through the Quick Start Guide, the way you request a Strapi API with ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React")," remains the same except that you will not fetch the same content."),(0,r.kt)("h2",{id:"create-a-react-app"},"Create a React app"),(0,r.kt)("p",null,"Create a basic React application using ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/create-a-new-react-app.html"},"create-react-app"),"."),(0,r.kt)(d,{groupId:"yarn-npm",mdxType:"Tabs"},(0,r.kt)(u,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn create react-app react-app\n"))),(0,r.kt)(u,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app react-app\n")))),(0,r.kt)("h2",{id:"use-an-http-client"},"Use an HTTP client"),(0,r.kt)("p",null,"Many HTTP clients are available but in this documentation there are examples using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"Axios")," and ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"Fetch"),"."),(0,r.kt)("p",null,"To install Axios:"),(0,r.kt)(d,{groupId:"yarn-npm",mdxType:"Tabs"},(0,r.kt)(u,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add axios\n"))),(0,r.kt)(u,{value:"npm",label:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install axios\n")))),(0,r.kt)("p",null,"There is no installation required for ",(0,r.kt)("inlineCode",{parentName:"p"},"Fetch"),"."),(0,r.kt)("h2",{id:"get-request-your-collection-type"},"GET Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to fetch all your restaurants."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type"),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(u,{label:"axios",value:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example GET request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import axios from "axios";\n\naxios.get("http://localhost:1337/api/restaurants").then((response) => {\n  console.log(response);\n});\n')))),(0,r.kt)(u,{label:"fetch",value:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example GET request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fetch("http://localhost:1337/api/restaurants", {\n  method: "GET",\n  headers: {\n    "Content-Type": "application/json",\n  },\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n'))))),(0,r.kt)(h,{mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 1,\n      "attributes": {\n        "name": "Biscotte Restaurant",\n        "description": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",\n        "createdAt": "2023-03-02T19:24:33.456Z",\n        "updatedAt": "2023-03-02T19:32:01.904Z",\n        "publishedAt": "2023-03-02T19:32:01.902Z"\n      }\n    }\n  ],\n  "meta": {\n    "pagination": {\n      "page": 1,\n      "pageSize": 25,\n      "pageCount": 1,\n      "total": 2\n    }\n  }\n}\n'))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(u,{label:"axios",value:"axios",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/App.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import axios from "axios";\nimport { useEffect, useState } from "react";\n\nconst App = () => {\n  const [error, setError] = useState(null);\n  const [restaurants, setRestaurants] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get("http://localhost:1337/api/restaurants")\n      .then(({ data }) => setRestaurants(data.data))\n      .catch((error) => setError(error));\n  }, []);\n\n  if (error) {\n    // Print errors if any\n    return <div>An error occured: {error.message}</div>;\n  }\n\n  return (\n    <div className="App">\n      <ul>\n        {restaurants.map(({ id, attributes }) => (\n          <li key={id}>{attributes.Name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n'))),(0,r.kt)(u,{label:"fetch",value:"fetch",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/App.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { useEffect, useState } from "react";\n\n// Parses the JSON returned by a network request\nconst parseJSON = (resp) => (resp.json ? resp.json() : resp);\n\n// Checks if a network request came back fine, and throws an error if not\nconst checkStatus = (resp) => {\n  if (resp.status >= 200 && resp.status < 300) {\n    return resp;\n  }\n\n  return parseJSON(resp).then((resp) => {\n    throw resp;\n  });\n};\n\nconst headers = { "Content-Type": "application/json" };\n\nconst App = () => {\n  const [error, setError] = useState(null);\n  const [restaurants, setRestaurants] = useState([]);\n\n  useEffect(() => {\n    fetch("http://localhost:1337/api/restaurants", { headers, method: "GET" })\n      .then(checkStatus)\n      .then(parseJSON)\n      .then(({ data }) => setRestaurants(data.data))\n      .catch((error) => setError(error));\n  }, []);\n\n  if (error) {\n    // Print errors if any\n    return <div>An error occured: {error.message}</div>;\n  }\n\n  return (\n    <div className="App">\n      <ul>\n        {restaurants.map(({ id, attributes }) => (\n          <li key={id}>{attributes.Name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n')))),(0,r.kt)("h2",{id:"post-request-your-collection-type"},"POST Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to create a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type and the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission fot the ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," Collection type."),(0,r.kt)("p",null,"In this example a ",(0,r.kt)("inlineCode",{parentName:"p"},"japanese")," category has been created which has the id: 3."),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(u,{label:"axios",value:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example POST request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import axios from "axios";\n\naxios\n  .post("http://localhost:1337/api/restaurants", {\n    data: {\n      name: "Dolemon Sushi",\n      description:\n        "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n      categories: [3],\n    },\n  })\n  .then((response) => {\n    console.log(response);\n  });\n')))),(0,r.kt)(u,{label:"fetch",value:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example POST request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fetch("http://localhost:1337/api/restaurants", {\n  method: "POST",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify({\n    data: {\n      name: "Dolemon Sushi",\n      description:\n        "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n      categories: [3],\n    },\n  }),\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data));\n'))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "id": 3,\n    "attributes": {\n      "name": "Dolemon Sushi",\n      "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n      "createdAt": "2023-03-02T21:40:39.185Z",\n      "updatedAt": "2023-03-02T21:40:39.185Z",\n      "publishedAt": "2023-03-02T21:40:39.118Z"\n    }\n  },\n  "meta": {}\n}\n'))),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(u,{label:"axios",value:"axios",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/App.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import axios from "axios";\nimport { useCallback, useEffect, useState, useId } from "react";\n\nconst Checkbox = ({ name, isChecked, onAddCategory, onRemoveCategory }) => {\n  const id = useId();\n  return (\n    <div>\n      <label htmlFor={id}>{name}</label>\n      <input\n        type="checkbox"\n        checked={isChecked}\n        onChange={isChecked ? onRemoveCategory : onAddCategory}\n        name="categories"\n        id={id}\n      />\n    </div>\n  );\n};\n\nconst App = () => {\n  const [allCategories, setAllCategories] = useState([]);\n  const [error, setError] = useState(null);\n  const [modifiedData, setModifiedData] = useState({\n    categories: [],\n    description: "",\n    name: "",\n  });\n\n  const handleInputChange = useCallback(({ target: { name, value } }) => {\n    setModifiedData((prevData) => ({ ...prevData, [name]: value }));\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    await axios\n      .post("http://localhost:1337/api/restaurants", { data: modifiedData })\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((error) => {\n        setError(error);\n      });\n  };\n\n  useEffect(() => {\n    axios\n      .get("http://localhost:1337/api/categories")\n      .then(({ data }) => {\n        setAllCategories(data.data);\n        console.log(data.data);\n      })\n      .catch((error) => setError(error));\n  }, []);\n\n  if (error) {\n    // Print errors if any\n    return <div>An error occured: {error.message}</div>;\n  }\n\n  return (\n    <div className="App">\n      <form onSubmit={handleSubmit}>\n        <h3>Restaurants</h3>\n        <br />\n        <label>\n          Name:\n          <input\n            type="text"\n            name="name"\n            onChange={handleInputChange}\n            value={modifiedData.name}\n          />\n        </label>\n        <label>\n          Description:\n          <input\n            type="text"\n            name="description"\n            onChange={handleInputChange}\n            value={modifiedData.description}\n          />\n        </label>\n        <div>\n          <br />\n          <b>Select categories</b>\n          {allCategories.map(({ id, attributes }) => (\n            <Checkbox\n              key={id}\n              name={attributes.Name}\n              isChecked={modifiedData.categories.includes(id)}\n              onAddCategory={() => {\n                const nextData = {\n                  ...modifiedData,\n                  categories: [...modifiedData.categories, id],\n                };\n                setModifiedData(nextData);\n              }}\n              onRemoveCategory={() => {\n                const nextData = {\n                  ...modifiedData,\n                  categories: modifiedData.categories.filter(\n                    (catId) => catId !== id\n                  ),\n                };\n                setModifiedData(nextData);\n              }}\n            />\n          ))}\n        </div>\n        <br />\n        <button type="submit">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n'))),(0,r.kt)(u,{label:"fetch",value:"fetch",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/App.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { useCallback, useEffect, useState, useId } from "react";\n\n// Parses the JSON returned by a network request\nconst parseJSON = (resp) => (resp.json ? resp.json() : resp);\n\n// Checks if a network request came back fine, and throws an error if not\nconst checkStatus = (resp) => {\n  if (resp.status >= 200 && resp.status < 300) {\n    return resp;\n  }\n\n  return parseJSON(resp).then((resp) => {\n    throw resp;\n  });\n};\n\nconst headers = { "Content-Type": "application/json" };\n\nconst Checkbox = ({ name, isChecked, onAddCategory, onRemoveCategory }) => {\n  const id = useId();\n  return (\n    <div>\n      <label htmlFor={id}>{name}</label>\n      <input\n        type="checkbox"\n        checked={isChecked}\n        onChange={isChecked ? onRemoveCategory : onAddCategory}\n        name="categories"\n        id={id}\n      />\n    </div>\n  );\n};\n\nconst App = () => {\n  const [allCategories, setAllCategories] = useState([]);\n  const [error, setError] = useState(null);\n  const [modifiedData, setModifiedData] = useState({\n    categories: [],\n    description: "",\n    name: "",\n  });\n\n  const handleInputChange = useCallback(({ target: { name, value } }) => {\n    setModifiedData((prevData) => ({ ...prevData, [name]: value }));\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    await fetch("http://localhost:1337/api/restaurants", {\n      headers,\n      method: "POST",\n      body: JSON.stringify({ data: modifiedData }),\n    })\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((error) => {\n        setError(error);\n      });\n  };\n\n  useEffect(() => {\n    fetch("http://localhost:1337/api/categories", { headers, method: "GET" })\n      .then(checkStatus)\n      .then(parseJSON)\n      .then(({ data }) => setAllCategories(data))\n      .catch((error) => setError(error));\n  }, []);\n\n  if (error) {\n    // Print errors if any\n    return <div>An error occured: {error.message}</div>;\n  }\n\n  return (\n    <div className="App">\n      <form onSubmit={handleSubmit}>\n        <h3>Restaurants</h3>\n        <br />\n        <label>\n          Name:\n          <input\n            type="text"\n            name="name"\n            onChange={handleInputChange}\n            value={modifiedData.name}\n          />\n        </label>\n        <label>\n          Description:\n          <input\n            type="text"\n            name="description"\n            onChange={handleInputChange}\n            value={modifiedData.description}\n          />\n        </label>\n        <div>\n          <br />\n          <b>Select categories</b>\n          {allCategories.map(({ id, attributes }) => (\n            <Checkbox\n              key={id}\n              name={attributes.Name}\n              isChecked={modifiedData.categories.includes(id)}\n              onAddCategory={() => {\n                const nextData = {\n                  ...modifiedData,\n                  categories: [...modifiedData.categories, id],\n                };\n                setModifiedData(nextData);\n              }}\n              onRemoveCategory={() => {\n                const nextData = {\n                  ...modifiedData,\n                  categories: modifiedData.categories.filter(\n                    (catId) => catId !== id\n                  ),\n                };\n                setModifiedData(nextData);\n              }}\n            />\n          ))}\n        </div>\n        <br />\n        <button type="submit">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n')))),(0,r.kt)("h2",{id:"put-request-your-collection-type"},"PUT Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to update the category of a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"put")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)("p",null,"We consider that the id of your restaurant is ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),", and the id of your category is ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,r.kt)(d,{mdxType:"Tabs"},(0,r.kt)(u,{label:"axios",value:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example PUT request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import axios from "axios";\n\naxios\n  .put("http://localhost:1337/api/restaurants/2", {\n    data: {\n      categories: [2],\n    },\n  })\n  .then((response) => {\n    console.log(response);\n  });\n')))),(0,r.kt)(u,{label:"fetch",value:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example PUT request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fetch("http://localhost:1337/api/restaurants/3", {\n  method: "PUT",\n  headers: {\n    "Content-Type": "application/json",\n  },\n  body: JSON.stringify({\n    data: {\n      categories: [2],\n    },\n  }),\n})\n  .then((response) => response.json())\n  .then((data) => {\n    console.log(data);\n  });\n'))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "id": 3,\n    "attributes": {\n      "name": "Dolemon Sushi",\n      "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n      "createdAt": "2023-03-02T21:40:39.185Z",\n      "updatedAt": "2023-03-02T23:13:47.494Z",\n      "publishedAt": "2023-03-02T21:40:39.118Z"\n    }\n  },\n  "meta": {}\n}\n'))))}y.isMDXComponent=!0}}]);