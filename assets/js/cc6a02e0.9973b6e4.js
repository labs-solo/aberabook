"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[9152],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return n?i.createElement(g,o(o({ref:t},d),{},{components:n})):i.createElement(g,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},74883:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(83117),a=(n(67294),n(3905));const r={title:"Plugins extension",displayed_sidebar:"devDocsSidebar"},o="Plugins extension",s={unversionedId:"dev-docs/plugins-extension",id:"dev-docs/plugins-extension",title:"Plugins extension",description:"Strapi comes with plugins that can be installed from the Marketplace or as npm packages. You can also create your own plugins (see plugins development) or extend the existing ones.",source:"@site/docs/dev-docs/plugins-extension.md",sourceDirName:"dev-docs",slug:"/dev-docs/plugins-extension",permalink:"/aberabook/dev-docs/plugins-extension",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/plugins-extension.md",tags:[],version:"current",frontMatter:{title:"Plugins extension",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Custom fields",permalink:"/aberabook/dev-docs/custom-fields"},next:{title:"Developing plugins",permalink:"/aberabook/dev-docs/plugins/developing-plugins"}},l={},p=[{value:"Extending a plugin&#39;s content-types",id:"extending-a-plugins-content-types",level:2},{value:"Extending a plugin&#39;s interface",id:"extending-a-plugins-interface",level:2},{value:"Within the extensions folder",id:"within-the-extensions-folder",level:3},{value:"Within the register and bootstrap functions",id:"within-the-register-and-bootstrap-functions",level:3}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"plugins-extension"},"Plugins extension"),(0,a.kt)("p",null,"Strapi comes with ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/plugins"},"plugins")," that can be installed from the ",(0,a.kt)("a",{parentName:"p",href:"/user-docs/plugins/installing-plugins-via-marketplace#installing-marketplace-plugins-and-providers"},"Marketplace")," or as npm packages. You can also create your own plugins (see ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/plugins-development"},"plugins development"),") or extend the existing ones."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Any plugin update could break this plugin's extensions."),(0,a.kt)("li",{parentName:"ul"},"New versions of Strapi are released with ",(0,a.kt)("a",{parentName:"li",href:"/dev-docs/migration-guides"},"migration guides")," when required, but these guides never cover plugin extensions. Consider forking a plugin if extensive customizations are required."),(0,a.kt)("li",{parentName:"ul"},"Currently, the admin panel part of a plugin can only be extended using ",(0,a.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/patch-package"},"patch-package"),", but please consider that doing so might break your plugin in future versions of Strapi."))),(0,a.kt)("p",null,"Plugin extensions code is located in the ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/extensions")," folder (see ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/project-structure"},"project structure"),"). Some plugins automatically create files there, ready to be modified."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example of extensions folder structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"/extensions\n  /some-plugin-to-extend\n    strapi-server.js|ts\n    /content-types\n      /some-content-type-to-extend\n        model.json\n      /another-content-type-to-extend\n        model.json\n  /another-plugin-to-extend\n    strapi-server.js|ts\n"))),(0,a.kt)("p",null,"Plugins can be extended in 2 ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#extending-a-plugin-s-content-types"},"extending the plugin's content-types")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#extending-a-plugin-s-interface"},"extending the plugin's interface")," (e.g. to add controllers, services, policies, middlewares and more)")),(0,a.kt)("h2",{id:"extending-a-plugins-content-types"},"Extending a plugin's content-types"),(0,a.kt)("p",null,"A plugin's Content-Types can be extended in 2 ways: using the programmatic interface within ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-server.js|ts")," and by overriding the content-types schemas."),(0,a.kt)("p",null,"The final schema of the content-types depends on the following loading order:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"the content-types of the original plugin,"),(0,a.kt)("li",{parentName:"ol"},"the content-types overridden by the declarations in the ",(0,a.kt)("a",{parentName:"li",href:"/dev-docs/backend-customization/models#model-schema"},"schema")," defined in ",(0,a.kt)("inlineCode",{parentName:"li"},"./src/extensions/plugin-name/content-types/content-type-name/schema.json")),(0,a.kt)("li",{parentName:"ol"},"the content-types declarations in the ",(0,a.kt)("a",{parentName:"li",href:"/dev-docs/api/plugins/server-api#content-types"},(0,a.kt)("inlineCode",{parentName:"a"},"content-types")," key exported from ",(0,a.kt)("inlineCode",{parentName:"a"},"strapi-server.js|ts"))),(0,a.kt)("li",{parentName:"ol"},"the content-types declarations in the ",(0,a.kt)("a",{parentName:"li",href:"/dev-docs/configurations/functions#register"},(0,a.kt)("inlineCode",{parentName:"a"},"register()")," function")," of the Strapi application")),(0,a.kt)("p",null,"To overwrite a plugin's ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models"},"content-types"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"(optional)")," Create the ",(0,a.kt)("inlineCode",{parentName:"li"},"./src/extensions")," folder at the root of the app, if the folder does not already exist."),(0,a.kt)("li",{parentName:"ol"},"Create a subfolder with the same name as the plugin to be extended."),(0,a.kt)("li",{parentName:"ol"},"Create a ",(0,a.kt)("inlineCode",{parentName:"li"},"content-types")," subfolder."),(0,a.kt)("li",{parentName:"ol"},"Inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"content-types")," subfolder, create another subfolder with the same ",(0,a.kt)("a",{parentName:"li",href:"/dev-docs/backend-customization/models#model-information"},"singularName")," as the content-type to overwrite."),(0,a.kt)("li",{parentName:"ol"},"Inside this ",(0,a.kt)("inlineCode",{parentName:"li"},"content-types/name-of-content-type")," subfolder, define the new schema for the content-type in a ",(0,a.kt)("inlineCode",{parentName:"li"},"schema.json")," file (see ",(0,a.kt)("a",{parentName:"li",href:"/dev-docs/backend-customization/models#model-schema"},"schema")," documentation)."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"(optional)")," Repeat steps 4 and 5 for each content-type to overwrite.")),(0,a.kt)("h2",{id:"extending-a-plugins-interface"},"Extending a plugin's interface"),(0,a.kt)("p",null,"When a Strapi application is initializing, plugins, extensions and global lifecycle functions events happen in the following order:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Plugins are loaded and their interfaces are exposed."),(0,a.kt)("li",{parentName:"ol"},"Files in ",(0,a.kt)("inlineCode",{parentName:"li"},"./src/extensions")," are loaded."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"register()")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"bootstrap()")," functions in ",(0,a.kt)("inlineCode",{parentName:"li"},"./src/index.js|ts")," are called.")),(0,a.kt)("p",null,"A plugin's interface can be extended at step 2 (i.e. within ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/extensions"),") or step 3 (i.e. inside ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/index.js|ts"),")."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If your Strapi project is TypeScript-based, please ensure that the ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," file has a TypeScript extension (i.e., ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.ts"),") otherwise it will not be compiled.")),(0,a.kt)("h3",{id:"within-the-extensions-folder"},"Within the extensions folder"),(0,a.kt)("p",null,"To extend a plugin's server interface using the ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/extensions")," folder:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"(optional)")," Create the ",(0,a.kt)("inlineCode",{parentName:"li"},"./src/extensions")," folder at the root of the app, if the folder does not already exist."),(0,a.kt)("li",{parentName:"ol"},"Create a subfolder with the same name as the plugin to be extended."),(0,a.kt)("li",{parentName:"ol"},"Create a ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi-server.js|ts")," file to extend a plugin's back end using the ",(0,a.kt)("a",{parentName:"li",href:"/dev-docs/api/plugins/server-api"},"Server API"),"."),(0,a.kt)("li",{parentName:"ol"},"Within this file, define and export a function. The function receives the ",(0,a.kt)("inlineCode",{parentName:"li"},"plugin")," interface as an argument so it can be extended.")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example of backend extension"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/extensions/some-plugin-to-extend/strapi-server.js|ts"',title:'"./src/extensions/some-plugin-to-extend/strapi-server.js|ts"'},"\nmodule.exports = (plugin) => {\n  plugin.controllers.controllerA.find = (ctx) => {};\n\n  plugin.policies[newPolicy] = (ctx) => {};\n\n  plugin.routes['content-api'].routes.push({\n    method: 'GET',\n    path: '/route-path',\n    handler: 'controller.action',\n  });\n\n  return plugin;\n};\n"))),(0,a.kt)("h3",{id:"within-the-register-and-bootstrap-functions"},"Within the register and bootstrap functions"),(0,a.kt)("p",null,"To extend a plugin's interface within ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/index.js|ts"),", use the ",(0,a.kt)("inlineCode",{parentName:"p"},"bootstrap()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"register()")," ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/functions"},"functions")," of the whole project, and access the interface programmatically with ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/api/plugins/server-api#usage"},"getters"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example of extending a plugin's content-type within ./src/index.js|ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/index.js|ts"',title:'"./src/index.js|ts"'},"\nmodule.exports = {\n  register({ strapi }) {\n    const contentTypeName = strapi.contentType('plugin::my-plugin.content-type-name')  \n    contentTypeName.attributes = {\n      // Spread previous defined attributes\n      ...contentTypeName.attributes,\n      // Add new, or override attributes\n      'toto': {\n        type: 'string',\n      }\n    }\n  },\n  bootstrap({ strapi }) {},\n};\n"))))}c.isMDXComponent=!0}}]);