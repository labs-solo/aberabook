"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[6091],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},69449:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(83117),i=(t(67294),t(3905));const r={title:"Single Sign-on (SSO)",displayed_sidebar:"devDocsConfigSidebar",description:"Strapi's SSO allows you to configure additional sign-in and sign-up methods for your administration panel. It requires an Enterprise Edition with a Gold plan.",canonicalUrl:"https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/sso.html"},o="Single Sign-On <EnterpriseBadge/>",l={unversionedId:"dev-docs/configurations/sso",id:"dev-docs/configurations/sso",title:"Single Sign-on (SSO)",description:"Strapi's SSO allows you to configure additional sign-in and sign-up methods for your administration panel. It requires an Enterprise Edition with a Gold plan.",source:"@site/docs/dev-docs/configurations/sso.md",sourceDirName:"dev-docs/configurations",slug:"/dev-docs/configurations/sso",permalink:"/aberabook/dev-docs/configurations/sso",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/configurations/sso.md",tags:[],version:"current",frontMatter:{title:"Single Sign-on (SSO)",displayed_sidebar:"devDocsConfigSidebar",description:"Strapi's SSO allows you to configure additional sign-in and sign-up methods for your administration panel. It requires an Enterprise Edition with a Gold plan.",canonicalUrl:"https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/sso.html"},sidebar:"devDocsConfigSidebar",previous:{title:"Environment variables",permalink:"/aberabook/dev-docs/configurations/environment"},next:{title:"Features",permalink:"/aberabook/dev-docs/configurations/features"}},s={},p=[{value:"Accessing the configuration",id:"accessing-the-configuration",level:2},{value:"Setting up provider configuration",id:"setting-up-provider-configuration",level:2},{value:"The <code>createStrategy</code> Factory",id:"the-createstrategy-factory",level:3},{value:"Configuration Object",id:"configuration-object",level:4},{value:"Adding a provider",id:"adding-a-provider",level:3},{value:"Configuring the provider",id:"configuring-the-provider",level:3},{value:"Provider configuration examples",id:"provider-configuration-examples",level:3},{value:"Google",id:"google",level:4},{value:"Github",id:"github",level:4},{value:"Discord",id:"discord",level:4},{value:"Microsoft",id:"microsoft",level:4},{value:"Keycloak (OpenID Connect)",id:"keycloak-openid-connect",level:4},{value:"Okta",id:"okta",level:4},{value:"Performing advanced customization",id:"performing-advanced-customization",level:2},{value:"Admin panel URL",id:"admin-panel-url",level:3},{value:"Custom Logic",id:"custom-logic",level:3},{value:"Authentication Events",id:"authentication-events",level:3}],d=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},c=d("EnterpriseBadge"),u=d("Tabs"),m=d("TabItem"),g={toc:p};function k(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"single-sign-on-"},"Single Sign-On ",(0,i.kt)(c,{mdxType:"EnterpriseBadge"})),(0,i.kt)("p",null,"Single Sign-On on Strapi allows you to configure additional sign-in and sign-up methods for your administration panel."),(0,i.kt)("admonition",{type:"prerequisites"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"A Strapi application running on version 3.5.0 or higher is required."),(0,i.kt)("li",{parentName:"ul"},"To configure SSO on your application, you will need an EE license with a ",(0,i.kt)("a",{parentName:"li",href:"https://strapi.io/pricing-self-hosted"},"Gold plan"),"."),(0,i.kt)("li",{parentName:"ul"},"Make sure the SSO feature is ",(0,i.kt)("a",{parentName:"li",href:"/user-docs/settings/single-sign-on"},"enabled in the admin panel"),"."),(0,i.kt)("li",{parentName:"ul"},"Make sure Strapi is part of the applications you can access with your provider. For example, with Microsoft (Azure) Active Directory, you must first ask someone with the right permissions to add Strapi to the list of allowed applications. Please refer to your provider(s) documentation to learn more about that."))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"It is currently not possible to associate a unique SSO provider to an email address used for a Strapi account, meaning that the access to a Strapi account cannot be restricted to only one SSO provider. For more information and workarounds to solve this issue, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/strapi/strapi/issues/9466#issuecomment-783587648"},"please refer to the dedicated GitHub issue"),".")),(0,i.kt)("p",null,"SSO configuration lives in the server configuration of the application, found at ",(0,i.kt)("inlineCode",{parentName:"p"},"./config/admin.js"),"."),(0,i.kt)("h2",{id:"accessing-the-configuration"},"Accessing the configuration"),(0,i.kt)("p",null,"The providers' configuration should be written within the ",(0,i.kt)("inlineCode",{parentName:"p"},"auth.providers")," path of the admin panel configuration."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"auth.providers")," is an array of ",(0,i.kt)("a",{parentName:"p",href:"#setting-up-provider-configuration"},"provider configuration"),"."),(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},"\nmodule.exports = ({ env }) => ({\n  // ...\n  auth: {\n    providers: [], // The providers' configuration lives there\n  },\n});\n"))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},"\nexport default ({ env }) => ({\n  // ...\n  auth: {\n    providers: [], // The providers' configuration lives there\n  },\n});\n")))),(0,i.kt)("h2",{id:"setting-up-provider-configuration"},"Setting up provider configuration"),(0,i.kt)("p",null,"A provider's configuration is a JavaScript object built with the following properties:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"uid")),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"The UID of the strategy. It must match the strategy's name")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"displayName")),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"The name that will be used on the login page to reference the provider")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"icon")),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"An image URL. If specified, it will replace the displayName on the login page")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"createStrategy")),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},"A factory that will build and return a new passport strategy for your provider. Takes the strapi instance as parameter")))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"uid")," property is the unique identifier of each strategy and is generally found in the strategy's package. If you are not sure of what it refers to, please contact the maintainer of the strategy.")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"By default, Strapi security policy does not allow loading images from external URLs, so provider logos will not show up on the ",(0,i.kt)("a",{parentName:"p",href:"/user-docs/intro#accessing-the-admin-panel"},"login screen")," of the admin panel unless ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/configurations/middlewares#security"},"a security exception is added"),".")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example: Security exception for provider logos"),(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./config/middlewares.js"',title:'"./config/middlewares.js"'},"module.exports = [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'dl.airtable.com',\n            'www.okta.com', // Base URL of the provider's logo\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'dl.airtable.com',\n            'www.okta.com', // Base URL of the provider's logo\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n]\n"))),(0,i.kt)(m,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/middlewares.ts"',title:'"./config/middlewares.ts"'},"export default [\n  // ...\n  {\n    name: 'strapi::security',\n    config: {\n      contentSecurityPolicy: {\n        useDefaults: true,\n        directives: {\n          'connect-src': [\"'self'\", 'https:'],\n          'img-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'dl.airtable.com',\n            'www.okta.com', // Base URL of the provider's logo\n          ],\n          'media-src': [\n            \"'self'\",\n            'data:',\n            'blob:',\n            'dl.airtable.com',\n            'www.okta.com', // Base URL of the provider's logo\n          ],\n          upgradeInsecureRequests: null,\n        },\n      },\n    },\n  },\n  // ...\n]\n"))))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"When deploying the admin panel to a different location or on a different subdomain, an additional configuration is required to set the common domain for the cookies. This is required to ensure the cookies are shared across the domains.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Deploying the admin and backend on entirely different unrelated domains is not possible at this time when using SSO.")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Example: Setting custom cookie domain"),(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},'module.exports = ({ env }) => ({\n  auth: {\n    domain: env("ADMIN_SSO_DOMAIN", ".test.example.com"),\n    providers: [\n      // ...\n    ],\n  },\n  url: env("ADMIN_URL", "http://admin.test.example.com"),\n  // ...\n});\n'))),(0,i.kt)(m,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},'export default ({ env }) => ({\n  auth: {\n    domain: env("ADMIN_SSO_DOMAIN", ".test.example.com"),\n    providers: [\n      // ...\n    ],\n  },\n  url: env("ADMIN_URL", "http://admin.test.example.com"),\n  // ...\n});\n'))))),(0,i.kt)("h3",{id:"the-createstrategy-factory"},"The ",(0,i.kt)("inlineCode",{parentName:"h3"},"createStrategy")," Factory"),(0,i.kt)("p",null,"A passport strategy is usually built by instantiating it using 2 parameters: the configuration object, and the verify function."),(0,i.kt)("h4",{id:"configuration-object"},"Configuration Object"),(0,i.kt)("p",null,"The configuration object depends on the strategy needs, but often asks for a callback URL to be redirected to once the connection has been made on the provider side."),(0,i.kt)("p",null,"A specific callback URL can be generated for your provider using the ",(0,i.kt)("inlineCode",{parentName:"p"},"getStrategyCallbackURL")," method. This URL also needs to be written on the provider side in order to allow redirection from it."),(0,i.kt)("p",null,"The format of the callback URL is the following: ",(0,i.kt)("inlineCode",{parentName:"p"},"/admin/connect/<provider_uid>"),"."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"strapi.admin.services.passport.getStrategyCallbackURL")," is a Strapi helper you can use to get a callback URL for a specific provider. It takes a provider name as a parameter and returns a URL.")),(0,i.kt)("p",null,"If needed, this is also where you will put your client ID and secret key for your OAuth2 application."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Verify Function")),(0,i.kt)("p",null,"The verify function is used here as a middleware allowing the user to transform and make extra processing on the data returned from the provider API."),(0,i.kt)("p",null,"This function always takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"done")," method as last parameter which is used to transfer needed data to the Strapi layer of SSO."),(0,i.kt)("p",null,"Its signature is the following: ",(0,i.kt)("inlineCode",{parentName:"p"},"void done(error: any, data: object);")," and it follows the following rules:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," is not set to ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", then the data sent is ignored, and the controller will throw an error."),(0,i.kt)("li",{parentName:"ul"},"If the SSO's auto-registration feature is disabled, then the ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," object only need to be composed of an ",(0,i.kt)("inlineCode",{parentName:"li"},"email")," property."),(0,i.kt)("li",{parentName:"ul"},"If the SSO's auto-registration feature is enabled, then you will need to define (in addition to the ",(0,i.kt)("inlineCode",{parentName:"li"},"email"),") either a ",(0,i.kt)("inlineCode",{parentName:"li"},"username")," property or both ",(0,i.kt)("inlineCode",{parentName:"li"},"firstname")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"lastname")," within the ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," object.")),(0,i.kt)("h3",{id:"adding-a-provider"},"Adding a provider"),(0,i.kt)("p",null,"Adding a new provider means adding a new way for your administrators to log-in."),(0,i.kt)("p",null,"Strapi uses ",(0,i.kt)("a",{parentName:"p",href:"http://www.passportjs.org/"},"Passport.js"),", which enables a large selection of providers. Any valid passport strategy that doesn't need additional custom data should therefore work with Strapi."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Strategies such as ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/vesse/passport-ldapauth"},"ldapauth")," don't work out of the box since they require extra data to be sent from the admin panel.\nIf you want to add an LDAP provider to your application, you will need to write a ",(0,i.kt)("a",{parentName:"p",href:"http://www.passportjs.org/packages/passport-custom/"},"custom strategy"),".\nYou can also use services such as Okta and Auth0 as bridge services.")),(0,i.kt)("h3",{id:"configuring-the-provider"},"Configuring the provider"),(0,i.kt)("p",null,"To configure a provider, follow the procedure below:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Make sure to import your strategy in your admin configuration file, either from an installed package or a local file."),(0,i.kt)("li",{parentName:"ol"},"You'll need to add a new item to the ",(0,i.kt)("inlineCode",{parentName:"li"},"auth.providers")," array in your admin panel configuration that will match the ",(0,i.kt)("a",{parentName:"li",href:"#setting-up-provider-configuration"},"format given above")),(0,i.kt)("li",{parentName:"ol"},"Restart your application, the provider should appear on your admin login page.")),(0,i.kt)("h3",{id:"provider-configuration-examples"},"Provider configuration examples"),(0,i.kt)("h4",{id:"google"},"Google"),(0,i.kt)("p",null,"Using: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mstade/passport-google-oauth2"},"passport-google-oauth2")),(0,i.kt)(u,{groupId:"yarn-npm",mdxType:"Tabs"},(0,i.kt)(m,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add passport-google-oauth2\n"))),(0,i.kt)(m,{value:"npm",label:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save passport-google-oauth2\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Configuration example for Google:"),(0,i.kt)("div",null,(0,i.kt)("div",null,(0,i.kt)("br",null),(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},'\nconst GoogleStrategy = require("passport-google-oauth2");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "google",\n        displayName: "Google",\n        icon: "https://cdn2.iconfinder.com/data/icons/social-icons-33/128/Google-512.png",\n        createStrategy: (strapi) =>\n          new GoogleStrategy(\n            {\n              clientID: env("GOOGLE_CLIENT_ID"),\n              clientSecret: env("GOOGLE_CLIENT_SECRET"),\n              scope: [\n                "https://www.googleapis.com/auth/userinfo.email",\n                "https://www.googleapis.com/auth/userinfo.profile",\n              ],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL("google"),\n            },\n            (request, accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                firstname: profile.given_name,\n                lastname: profile.family_name,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},'\nimport {Strategy as GoogleStrategy } from "passport-google-oauth2";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "google",\n        displayName: "Google",\n        icon: "https://cdn2.iconfinder.com/data/icons/social-icons-33/128/Google-512.png",\n        createStrategy: (strapi) =>\n          new GoogleStrategy(\n            {\n              clientID: env("GOOGLE_CLIENT_ID"),\n              clientSecret: env("GOOGLE_CLIENT_SECRET"),\n              scope: [\n                "https://www.googleapis.com/auth/userinfo.email",\n                "https://www.googleapis.com/auth/userinfo.profile",\n              ],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL("google"),\n            },\n            (request, accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                firstname: profile.given_name,\n                lastname: profile.family_name,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))))),(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"github"},"Github"),(0,i.kt)("p",null,"Using: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cfsghost/passport-github"},"passport-github")),(0,i.kt)(u,{groupId:"yarn-npm",mdxType:"Tabs"},(0,i.kt)(m,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add passport-github2\n"))),(0,i.kt)(m,{value:"npm",label:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save passport-github2\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Configuration example for Github:"),(0,i.kt)("div",null,(0,i.kt)("div",null,(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},'\nconst GithubStrategy = require("passport-github2");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "github",\n        displayName: "Github",\n        icon: "https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png",\n        createStrategy: (strapi) =>\n          new GithubStrategy(\n            {\n              clientID: env("GITHUB_CLIENT_ID"),\n              clientSecret: env("GITHUB_CLIENT_SECRET"),\n              scope: ["user:email"],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL("github"),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.emails[0].value,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n\n'))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},'\nimport { Strategy as GithubStrategy } from "passport-github2";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "github",\n        displayName: "Github",\n        icon: "https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png",\n        createStrategy: (strapi) =>\n          new GithubStrategy(\n            {\n              clientID: env("GITHUB_CLIENT_ID"),\n              clientSecret: env("GITHUB_CLIENT_SECRET"),\n              scope: ["user:email"],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL("github"),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.emails[0].value,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n\n'))))),(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"discord"},"Discord"),(0,i.kt)("p",null,"Using: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nicholastay/passport-discord#readme"},"passport-discord")),(0,i.kt)(u,{groupId:"yarn-npm",mdxType:"Tabs"},(0,i.kt)(m,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add passport-discord\n"))),(0,i.kt)(m,{value:"npm",label:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save passport-discord\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Configuration example for Discord:",(0,i.kt)("br",null)),(0,i.kt)("div",null,(0,i.kt)("div",null,(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},'\nconst DiscordStrategy = require("passport-discord");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "discord",\n        displayName: "Discord",\n        icon: "https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-512.png",\n        createStrategy: (strapi) =>\n          new DiscordStrategy(\n            {\n              clientID: env("DISCORD_CLIENT_ID"),\n              clientSecret: env("DISCORD_SECRET"),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  "discord"\n                ),\n              scope: ["identify", "email"],\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: `${profile.username}#${profile.discriminator}`,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},'\nimport { Strategy as DiscordStrategy } from "passport-discord";\n\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "discord",\n        displayName: "Discord",\n        icon: "https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-512.png",\n        createStrategy: (strapi) =>\n          new DiscordStrategy(\n            {\n              clientID: env("DISCORD_CLIENT_ID"),\n              clientSecret: env("DISCORD_SECRET"),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  "discord"\n                ),\n              scope: ["identify", "email"],\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: `${profile.username}#${profile.discriminator}`,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))))),(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"microsoft"},"Microsoft"),(0,i.kt)("p",null,"Using: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/auth0/passport-azure-ad-oauth2#readme"},"passport-azure-ad-oauth2")),(0,i.kt)(u,{groupId:"yarn-npm",mdxType:"Tabs"},(0,i.kt)(m,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add passport-azure-ad-oauth2 jsonwebtoken\n"))),(0,i.kt)(m,{value:"npm",label:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save passport-azure-ad-oauth2 jsonwebtoken\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Configuration example for Microsoft:"),(0,i.kt)("div",null,(0,i.kt)("div",null,(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},'\nconst AzureAdOAuth2Strategy = require("passport-azure-ad-oauth2");\nconst jwt = require("jsonwebtoken");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "azure_ad_oauth2",\n        displayName: "Microsoft",\n        icon: "https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Microsoft_logo_%282012%29.svg/320px-Microsoft_logo_%282012%29.svg.png",\n        createStrategy: (strapi) =>\n          new AzureAdOAuth2Strategy(\n            {\n              clientID: env("MICROSOFT_CLIENT_ID", ""),\n              clientSecret: env("MICROSOFT_CLIENT_SECRET", ""),\n              scope: ["user:email"],\n              tenant: env("MICROSOFT_TENANT_ID", ""),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  "azure_ad_oauth2"\n                ),\n            },\n            (accessToken, refreshToken, params, profile, done) => {\n              let waadProfile = jwt.decode(params.id_token, "", true);\n              done(null, {\n                email: waadProfile.email,\n                username: waadProfile.email,\n                firstname: waadProfile.given_name, // optional if email and username exist\n                lastname: waadProfile.family_name, // optional if email and username exist\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},'\nimport { Strategy as AzureAdOAuth2Strategy} from "passport-azure-ad-oauth2";\nimport jwt from "jsonwebtoken";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "azure_ad_oauth2",\n        displayName: "Microsoft",\n        icon: "https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Microsoft_logo_%282012%29.svg/320px-Microsoft_logo_%282012%29.svg.png",\n        createStrategy: (strapi) =>\n          new AzureAdOAuth2Strategy(\n            {\n              clientID: env("MICROSOFT_CLIENT_ID", ""),\n              clientSecret: env("MICROSOFT_CLIENT_SECRET", ""),\n              scope: ["user:email"],\n              tenant: env("MICROSOFT_TENANT_ID", ""),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  "azure_ad_oauth2"\n                ),\n            },\n            (accessToken, refreshToken, params, profile, done) => {\n              let waadProfile = jwt.decode(params.id_token, "", true);\n              done(null, {\n                email: waadProfile.email,\n                username: waadProfile.email,\n                firstname: waadProfile.given_name, // optional if email and username exist\n                lastname: waadProfile.family_name, // optional if email and username exist\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))))),(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"keycloak-openid-connect"},"Keycloak (OpenID Connect)"),(0,i.kt)("p",null,"Using: ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/passport-keycloak-oauth2-oidc"},"passport-keycloak-oauth2-oidc")),(0,i.kt)(u,{groupId:"yarn-npm",mdxType:"Tabs"},(0,i.kt)(m,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add passport-keycloak-oauth2-oidc\n"))),(0,i.kt)(m,{value:"npm",label:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save passport-keycloak-oauth2-oidc\n")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Configuration example for Keycloak (OpenID Connect):"),(0,i.kt)("div",null,(0,i.kt)("div",null,(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},'\nconst KeyCloakStrategy = require("passport-keycloak-oauth2-oidc");\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "keycloak",\n        displayName: "Keycloak",\n        icon: "https://raw.githubusercontent.com/keycloak/keycloak-admin-ui/main/themes/keycloak/logo.svg",\n        createStrategy: (strapi) =>\n          new KeyCloakStrategy(\n            {\n              clientID: env("KEYCLOAK_CLIENT_ID", ""),\n              realm: env("KEYCLOAK_REALM", ""),\n              publicClient: env.bool("KEYCLOAK_PUBLIC_CLIENT", false),\n              clientSecret: env("KEYCLOAK_CLIENT_SECRET", ""),\n              sslRequired: env("KEYCLOAK_SSL_REQUIRED", "external"),\n              authServerURL: env("KEYCLOAK_AUTH_SERVER_URL", ""),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  "keycloak"\n                ),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},'\nimport { Strategy as KeyCloakStrategy } from "passport-keycloak-oauth2-oidc";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "keycloak",\n        displayName: "Keycloak",\n        icon: "https://raw.githubusercontent.com/keycloak/keycloak-admin-ui/main/themes/keycloak/logo.svg",\n        createStrategy: (strapi) =>\n          new KeyCloakStrategy(\n            {\n              clientID: env("KEYCLOAK_CLIENT_ID", ""),\n              realm: env("KEYCLOAK_REALM", ""),\n              publicClient: env.bool("KEYCLOAK_PUBLIC_CLIENT", false),\n              clientSecret: env("KEYCLOAK_CLIENT_SECRET", ""),\n              sslRequired: env("KEYCLOAK_SSL_REQUIRED", "external"),\n              authServerURL: env("KEYCLOAK_AUTH_SERVER_URL", ""),\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL(\n                  "keycloak"\n                ),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))))),(0,i.kt)("br",null))),(0,i.kt)("h4",{id:"okta"},"Okta"),(0,i.kt)("p",null,"Using: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/antoinejaussoin/passport-okta-oauth20/#readme"},"passport-okta-oauth20")),(0,i.kt)(u,{groupId:"yarn-npm",mdxType:"Tabs"},(0,i.kt)(m,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add passport-okta-oauth20\n"))),(0,i.kt)(m,{value:"npm",label:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install --save passport-okta-oauth20\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"When setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"OKTA_DOMAIN")," environment variable, make sure to include the protocol (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"https://example.okta.com"),"). If you do not, you will end up in a redirect loop.")),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Configuration example for Okta:"),(0,i.kt)("div",null,(0,i.kt)("div",null,(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},'\nconst OktaOAuth2Strategy = require("passport-okta-oauth20").Strategy;\n\nmodule.exports = ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "okta",\n        displayName: "Okta",\n        icon: "https://www.okta.com/sites/default/files/Okta_Logo_BrightBlue_Medium-thumbnail.png",\n        createStrategy: (strapi) =>\n          new OktaOAuth2Strategy(\n            {\n              clientID: env("OKTA_CLIENT_ID"),\n              clientSecret: env("OKTA_CLIENT_SECRET"),\n              audience: env("OKTA_DOMAIN"),\n              scope: ["openid", "email", "profile"],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL("okta"),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},'\nimport { Strategy as OktaOAuth2Strategy } from "passport-okta-oauth20";\n\nexport default ({ env }) => ({\n  auth: {\n    // ...\n    providers: [\n      {\n        uid: "okta",\n        displayName: "Okta",\n        icon: "https://www.okta.com/sites/default/files/Okta_Logo_BrightBlue_Medium-thumbnail.png",\n        createStrategy: (strapi) =>\n          new OktaOAuth2Strategy(\n            {\n              clientID: env("OKTA_CLIENT_ID"),\n              clientSecret: env("OKTA_CLIENT_SECRET"),\n              audience: env("OKTA_DOMAIN"),\n              scope: ["openid", "email", "profile"],\n              callbackURL:\n                strapi.admin.services.passport.getStrategyCallbackURL("okta"),\n            },\n            (accessToken, refreshToken, profile, done) => {\n              done(null, {\n                email: profile.email,\n                username: profile.username,\n              });\n            }\n          ),\n      },\n    ],\n  },\n});\n'))))),(0,i.kt)("br",null))),(0,i.kt)("h2",{id:"performing-advanced-customization"},"Performing advanced customization"),(0,i.kt)("h3",{id:"admin-panel-url"},"Admin panel URL"),(0,i.kt)("p",null,"If the administration panel lives on a host/port different from the Strapi server, the admin panel URL needs to be updated:\nupdate the ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," key in the ",(0,i.kt)("inlineCode",{parentName:"p"},"./config/admin.js")," configuration file (see ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/admin-panel-customization#access-url"},"admin panel customization documentation"),")."),(0,i.kt)("h3",{id:"custom-logic"},"Custom Logic"),(0,i.kt)("p",null,"In some scenarios, you will want to write additional logic for your connection workflow such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"restricting connection and registration for a specific domain"),(0,i.kt)("li",{parentName:"ul"},"triggering actions on connection attempt"),(0,i.kt)("li",{parentName:"ul"},"adding analytics")),(0,i.kt)("p",null,"The easiest way to do so is to plug into the verify function of your strategy and write some code."),(0,i.kt)("p",null,"For example, if you want to allow only people with an official strapi.io email address, you can instantiate your strategy like this:"),(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},"\nconst strategyInstance = new Strategy(configuration, ({ email, username }, done) => {\n  // If the email ends with @strapi.io\n  if (email.endsWith('@strapi.io')) {\n    // then we continue with the data given by the provider\n    return done(null, { email, username });\n  }\n\n  // Otherwise, we continue by sending an error to the done function\n  done(new Error('Forbidden email address'));\n});\n"))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},"\nconst strategyInstance = new Strategy(configuration, ({ email, username }, done) => {\n  // If the email ends with @strapi.io\n  if (email.endsWith('@strapi.io')) {\n    // then we continue with the data given by the provider\n    return done(null, { email, username });\n  }\n\n  // Otherwise, we continue by sending an error to the done function\n  done(new Error('Forbidden email address'));\n});\n")))),(0,i.kt)("h3",{id:"authentication-events"},"Authentication Events"),(0,i.kt)("p",null,"The SSO feature adds a new ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/configurations/admin-panel#available-options"},"authentication event"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"onSSOAutoRegistration"),"."),(0,i.kt)("p",null,"This event is triggered whenever a user is created using the auto-register feature added by SSO.\nIt contains the created user (",(0,i.kt)("inlineCode",{parentName:"p"},"event.user"),"), and the provider used to make the registration (",(0,i.kt)("inlineCode",{parentName:"p"},"event.provider"),")."),(0,i.kt)(u,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(m,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/admin.js"',title:'"./config/admin.js"'},"\nmodule.exports = () => ({\n    auth: {\n      // ...\n      events: {\n        onConnectionSuccess(e) {},\n        onConnectionError(e) {},\n        // ...\n        onSSOAutoRegistration(e) {\n          const { user, provider } = e;\n\n          console.log(\n            `A new user (${user.id}) has been automatically registered using ${provider}`\n          );\n        },\n      },\n    },\n});\n"))),(0,i.kt)(m,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/admin.ts"',title:'"./config/admin.ts"'},"\nexport default () => ({\n    auth: {\n      // ...\n      events: {\n        onConnectionSuccess(e) {},\n        onConnectionError(e) {},\n        // ...\n        onSSOAutoRegistration(e) {\n          const { user, provider } = e;\n\n          console.log(\n            `A new user (${user.id}) has been automatically registered using ${provider}`\n          );\n        },\n      },\n    },\n});\n")))))}k.isMDXComponent=!0}}]);