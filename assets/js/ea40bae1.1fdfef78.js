"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[5111,469],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=d(a),c=r,k=u["".concat(o,".").concat(c)]||u[c]||m[c]||i;return a?n.createElement(k,l(l({ref:t},s),{},{components:a})):n.createElement(k,l({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6109:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(83117),r=(a(67294),a(3905)),i=a(74083);const l={title:"CRUD operations",description:"Use Strapi's Entity Service API to perform CRUD (create, read, update, delete) operations on your content.",displayed_sidebar:"devDocsSidebar"},p="CRUD operations",o={unversionedId:"dev-docs/api/entity-service/crud",id:"dev-docs/api/entity-service/crud",title:"CRUD operations",description:"Use Strapi's Entity Service API to perform CRUD (create, read, update, delete) operations on your content.",source:"@site/docs/dev-docs/api/entity-service/crud.md",sourceDirName:"dev-docs/api/entity-service",slug:"/dev-docs/api/entity-service/crud",permalink:"/aberabook/dev-docs/api/entity-service/crud",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/entity-service/crud.md",tags:[],version:"current",frontMatter:{title:"CRUD operations",description:"Use Strapi's Entity Service API to perform CRUD (create, read, update, delete) operations on your content.",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Entity Service API",permalink:"/aberabook/dev-docs/api/entity-service"},next:{title:"Filtering",permalink:"/aberabook/dev-docs/api/entity-service/filter"}},d={},s=[{value:"findOne()",id:"findone",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3},{value:"findMany()",id:"findmany",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Example",id:"example-1",level:3},{value:"create()",id:"create",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Example",id:"example-2",level:3},{value:"update()",id:"update",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"Example",id:"example-3",level:3},{value:"delete()",id:"delete",level:2},{value:"Parameters",id:"parameters-4",level:3},{value:"Example",id:"example-4",level:3}],m={toc:s};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"crud-operations"},"CRUD operations"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service API")," is built on top of the the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/query-engine"},"Query Engine API")," and uses it to perform CRUD operations on entities."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"uid")," parameter used in function calls for this API is a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," built with the following format: ",(0,r.kt)("inlineCode",{parentName:"p"},"[category]::[content-type]")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," is one of: ",(0,r.kt)("inlineCode",{parentName:"p"},"admin"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"plugin")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"api"),"."),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A correct ",(0,r.kt)("inlineCode",{parentName:"li"},"uid")," to get users of the Strapi admin panel is ",(0,r.kt)("inlineCode",{parentName:"li"},"admin::user"),"."),(0,r.kt)("li",{parentName:"ul"},"A possible ",(0,r.kt)("inlineCode",{parentName:"li"},"uid")," for the Upload plugin could be ",(0,r.kt)("inlineCode",{parentName:"li"},"plugin::upload.file"),"."),(0,r.kt)("li",{parentName:"ul"},"As the ",(0,r.kt)("inlineCode",{parentName:"li"},"uid"),"s for user-defined custom content-types follow the ",(0,r.kt)("inlineCode",{parentName:"li"},"api::[content-type]")," syntax, if a content-type ",(0,r.kt)("inlineCode",{parentName:"li"},"article")," exists, it is referenced by ",(0,r.kt)("inlineCode",{parentName:"li"},"api::article.article"),".")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Run the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/cli#strapi-content-types-list"},(0,r.kt)("inlineCode",{parentName:"a"},"strapi content-types:list"))," command in a terminal to display all possible content-types' ",(0,r.kt)("inlineCode",{parentName:"p"},"uid"),"s for a specific Strapi instance.")),(0,r.kt)("h2",{id:"findone"},"findOne()"),(0,r.kt)("p",null,"Finds the first entry matching the parameters."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"findOne(uid: string, id: ID, parameters: Params)")," \u21d2 ",(0,r.kt)("inlineCode",{parentName:"p"},"Entry")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fields")),(0,r.kt)("td",{parentName:"tr",align:null},"Attributes to return"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},"Relations, components and dynamic zones to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter")))))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entry = await strapi.entityService.findOne('api::article.article', 1, {\n  fields: ['title', 'description'],\n  populate: { category: true },\n});\n")),(0,r.kt)("h2",{id:"findmany"},"findMany()"),(0,r.kt)("p",null,"Finds entries matching the parameters."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"findMany(uid: string, parameters: Params)")," \u21d2 ",(0,r.kt)("inlineCode",{parentName:"p"},"Entry[]")),(0,r.kt)("h3",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fields")),(0,r.kt)("td",{parentName:"tr",align:null},"Attributes to return"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"filters")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/filter"},"Filters")," to use"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/filter"},(0,r.kt)("inlineCode",{parentName:"a"},"FiltersParameters")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"start")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of entries to skip (see ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/order-pagination#pagination"},"pagination"),")"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"limit")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of entries to return (see ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/order-pagination#pagination"},"pagination"),")"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sort")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/order-pagination"},"Order")," definition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/order-pagination"},(0,r.kt)("inlineCode",{parentName:"a"},"OrderByParameter")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},"Relations, components and dynamic zones to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"publicationState")),(0,r.kt)("td",{parentName:"tr",align:null},"Publication state, can be:",(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"live")," to return only published entries"),(0,r.kt)("li",null,(0,r.kt)("inlineCode",{parentName:"td"},"preview")," to return both draft entries & published entries (default)"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PublicationStateParameter"))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'For single types, "findMany" returns the entry data as an object instead of an array of entries.')),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.entityService.findMany('api::article.article', {\n  fields: ['title', 'description'],\n  filters: { title: 'Hello World' },\n  sort: { createdAt: 'DESC' },\n  populate: { category: true },\n});\n")),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To retrieve only draft entries, combine the ",(0,r.kt)("inlineCode",{parentName:"p"},"preview")," publication state and the ",(0,r.kt)("inlineCode",{parentName:"p"},"publishedAt")," fields:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.entityService.findMany('api::article.article', {\n  publicationState: 'preview',\n  filters: {\n    publishedAt: {\n      $null: true,\n    },\n  },\n});\n\n"))),(0,r.kt)("h2",{id:"create"},"create()"),(0,r.kt)("p",null,"Creates one entry and returns it"),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"create(uid: string, parameters: Params)")," \u21d2 ",(0,r.kt)("inlineCode",{parentName:"p"},"Entry")),(0,r.kt)("h3",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fields")),(0,r.kt)("td",{parentName:"tr",align:null},"Attributes to return"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},"Relations, components and dynamic zones to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},"Input data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Object"))))),(0,r.kt)(i.default,{components:a.components,mdxType:"ManagingRelations"}),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entry = await strapi.entityService.create('api::article.article', {\n  data: {\n    title: 'My Article',\n  },\n});\n")),(0,r.kt)("h2",{id:"update"},"update()"),(0,r.kt)("p",null,"Updates one entry and returns it."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"update()")," only performs a partial update, so existing fields that are not included won't be replaced.")),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"update(uid: string, id: ID, parameters: Params)")," \u21d2 ",(0,r.kt)("inlineCode",{parentName:"p"},"Entry")),(0,r.kt)(i.default,{components:a.components,mdxType:"ManagingRelations"}),(0,r.kt)("h3",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fields")),(0,r.kt)("td",{parentName:"tr",align:null},"Attributes to return"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},"Relations, components and dynamic zones to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},"Input data"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object"))))),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entry = await strapi.entityService.update('api::article.article', 1, {\n  data: {\n    title: 'xxx',\n  },\n});\n")),(0,r.kt)("h2",{id:"delete"},"delete()"),(0,r.kt)("p",null,"Deletes one entry and returns it."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"delete(uid: string, id: ID, parameters: Params)")," \u21d2 ",(0,r.kt)("inlineCode",{parentName:"p"},"Entry")),(0,r.kt)("h3",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fields")),(0,r.kt)("td",{parentName:"tr",align:null},"Attributes to return"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String[]"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},"Relations, components and dynamic zones to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/entity-service/populate"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter")))))),(0,r.kt)("h3",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entry = await strapi.entityService.delete('api::article.article', 1);\n")))}u.isMDXComponent=!0},74083:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=a(83117),r=(a(67294),a(3905));const i={},l=void 0,p={unversionedId:"snippets/managing-relations",id:"snippets/managing-relations",title:"managing-relations",description:"In the data object, relations can be managed with the connect, disconnect, and set parameters using the syntax described for the REST API (see managing relations).",source:"@site/docs/snippets/managing-relations.md",sourceDirName:"snippets",slug:"/snippets/managing-relations",permalink:"/aberabook/snippets/managing-relations",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/managing-relations.md",tags:[],version:"current",frontMatter:{}},o={},d=[],s={toc:d};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," object, relations can be managed with the ",(0,r.kt)("inlineCode",{parentName:"p"},"connect"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," parameters using the syntax described for the REST API (see ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/relations"},"managing relations"),").")))}m.isMDXComponent=!0}}]);