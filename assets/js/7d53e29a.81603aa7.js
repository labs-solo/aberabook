"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[3043],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(h,s(s({ref:t},u),{},{components:n})):a.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},23551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(83117),r=(n(67294),n(3905));const o={title:"Python",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Python.",canonicalUrl:"https://docs.strapi.io/developer-docs/latest/developer-resources/content-api/integrations/python.html"},s="Getting Started with Python",i={unversionedId:"dev-docs/integrations/python",id:"dev-docs/integrations/python",title:"Python",description:"Integrate Strapi with Python.",source:"@site/docs/dev-docs/integrations/python.md",sourceDirName:"dev-docs/integrations",slug:"/dev-docs/integrations/python",permalink:"/aberabook/dev-docs/integrations/python",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/integrations/python.md",tags:[],version:"current",frontMatter:{title:"Python",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Python.",canonicalUrl:"https://docs.strapi.io/developer-docs/latest/developer-resources/content-api/integrations/python.html"},sidebar:"devDocsSidebar",previous:{title:"PHP",permalink:"/aberabook/dev-docs/integrations/php"},next:{title:"React",permalink:"/aberabook/dev-docs/integrations/react"}},p={},l=[{value:"Create a Python file",id:"create-a-python-file",level:2},{value:"Use an HTTP client",id:"use-an-http-client",level:2},{value:"GET Request to your collection type",id:"get-request-to-your-collection-type",level:2},{value:"Example",id:"example",level:3},{value:"POST Request your collection type",id:"post-request-your-collection-type",level:2},{value:"Example",id:"example-1",level:3},{value:"PUT Request your collection type",id:"put-request-your-collection-type",level:2},{value:"Example",id:"example-2",level:3}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=u("ApiCall"),d=u("Request"),m=u("Response"),h={toc:l};function y(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-python"},"Getting Started with Python"),(0,r.kt)("p",null,"This integration guide follows the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/quick-start"},"Quick Start Guide"),' and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL ',(0,r.kt)("a",{parentName:"p",href:"http://localhost:1337/api/restaurants"},"http://localhost:1337/api/restaurants"),"."),(0,r.kt)("p",null,"If you haven't gone through the Quick Start Guide, the way you request a Strapi API with ",(0,r.kt)("a",{parentName:"p",href:"https://www.python.org/"},"Python")," remains the same except that you do not fetch the same content."),(0,r.kt)("h2",{id:"create-a-python-file"},"Create a Python file"),(0,r.kt)("p",null,"Be sure to have ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.python.org/moin/BeginnersGuide/Download"},"Python installed")," on your computer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"touch script.py\n")),(0,r.kt)("h2",{id:"use-an-http-client"},"Use an HTTP client"),(0,r.kt)("p",null,"Many HTTP clients are available, the following examples use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/psf/requests"},"Requests"),". To install ",(0,r.kt)("inlineCode",{parentName:"p"},"Requests")," run the following command in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python -m pip install requests\n")),(0,r.kt)("h2",{id:"get-request-to-your-collection-type"},"GET Request to your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to fetch all your restaurants."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(c,{noSideBySide:!0,mdxType:"ApiCall"},(0,r.kt)(d,{title:"Example GET request",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'requests.get("http://localhost:1337/api/restaurants")\n'))),(0,r.kt)(m,{mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 1,\n      "attributes": {\n        "name": "Biscotte Restaurant",\n        "description": "Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",\n        "createdAt": "2022-07-31T11:57:01.330Z",\n        "updatedAt": "2022-07-31T11:57:44.945Z",\n        "publishedAt": "2022-07-31T11:57:44.943Z"\n      }\n    }\n  ],\n  "meta": {\n    "pagination": {\n      "page": 1,\n      "pageSize": 25,\n      "pageCount": 1,\n      "total": 1\n    }\n  }\n}\n')))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import json\nimport requests\n\nclass Restaurant:\n    def __init__(self):\n        self.api_url = "http://localhost:1337/api"\n\n    def all(self):\n        r = requests.get(self.api_url + "/restaurants")\n        return r.json()\n\nrestaurant = Restaurant()\nprint(restaurant.all())\n')),(0,r.kt)("h2",{id:"post-request-your-collection-type"},"POST Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to create a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type and the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," Collection type.\nAdd the ",(0,r.kt)("inlineCode",{parentName:"p"},"?populate=categories")," query parameter to return categories with the response."),(0,r.kt)("p",null,"In this example a ",(0,r.kt)("inlineCode",{parentName:"p"},"japanese")," category has been created which has the id: 3."),(0,r.kt)(c,{noSideBySide:!0,mdxType:"ApiCall"},(0,r.kt)(d,{title:"Example POST request",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'requests.post(\n    "http://localhost:1337/api/restaurants",\n    headers={"Content-Type": "application/json"},\n    params={"populate": "categories"},\n    data=json.dumps(\n        {\n            "data": {\n                "name": "Dolemon Sushi",\n                "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n                "categories": [3],\n            }\n        }\n    ),\n)\n'))),(0,r.kt)(m,{mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "id": 2,\n    "attributes": {\n      "name": "Dolemon Sushi",\n      "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n      "createdAt": "2022-07-31T15:36:56.336Z",\n      "updatedAt": "2022-07-31T15:36:56.336Z",\n      "publishedAt": "2022-07-31T15:36:56.336Z",\n      "categories": {\n        "data": [\n          {\n            "id": 3,\n            "attributes": {\n              "name": "japanese",\n              "createdAt": "2022-07-31T11:57:35.040Z",\n              "updatedAt": "2022-07-31T11:57:35.631Z",\n              "publishedAt": "2022-07-31T11:57:35.629Z"\n            }\n          }\n        ]\n      }\n    }\n  },\n  "meta": {}\n}\n')))),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import json\nimport requests\n\nclass Restaurant:\n    def __init__(self):\n        self.api_url = "http://localhost:1337/api"\n\n    def all(self):\n        r = requests.get(self.api_url + "/restaurants")\n        return r.json()\n\n    def create(self, params):\n        r = requests.post(\n            self.api_url + "/restaurants",\n            headers={"Content-Type": "application/json"},\n            data=json.dumps(\n                {\n                    "data": {\n                        "name": params["name"],\n                        "description": params["description"],\n                        "categories": params["categories"],\n                    }\n                }\n            ),\n        )\n        return r.json()\n\n\nrestaurant = Restaurant()\nprint(\n    restaurant.create(\n        {\n            "name": "Dolemon Sushi",\n            "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n            "categories": [3],\n        }\n    )\n)\n')),(0,r.kt)("h2",{id:"put-request-your-collection-type"},"PUT Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to update the category of a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"put")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(c,{noSideBySide:!0,mdxType:"ApiCall"},(0,r.kt)(d,{title:"Example PUT request",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'requests.put(\n    "http://localhost:1337/api/restaurants/2",\n    params={"populate": "categories"},\n    headers={"Content-Type": "application/json"},\n    data=json.dumps(\n        {\n            "data": {\n                "categories": [2],\n            }\n        }\n    ),\n)\n'))),(0,r.kt)(m,{mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "id": 2,\n    "attributes": {\n      "name": "Dolemon Sushi",\n      "description": null,\n      "createdAt": "2022-07-31T15:43:44.039Z",\n      "updatedAt": "2022-07-31T15:46:29.903Z",\n      "publishedAt": "2022-07-31T15:43:44.038Z",\n      "categories": {\n        "data": [\n          {\n            "id": 2,\n            "attributes": {\n              "name": "Brunch",\n              "createdAt": "2022-07-31T11:57:23.472Z",\n              "updatedAt": "2022-07-31T11:57:25.180Z",\n              "publishedAt": "2022-07-31T11:57:25.179Z"\n            }\n          }\n        ]\n      }\n    }\n  },\n  "meta": {}\n}\n')))),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import json\nimport requests\n\nclass Restaurant:\n    def __init__(self):\n        self.api_url = "http://localhost:1337/api"\n\n    def all(self):\n        r = requests.get(self.api_url + "/restaurants")\n        return r.json()\n\n    def create(self, params):\n        r = requests.post(\n            self.api_url + "/restaurants",\n            headers={"Content-Type": "application/json"},\n            data=json.dumps(\n                {\n                    "data": {\n                        "name": params["name"],\n                        "description": params["description"],\n                        "categories": params["categories"],\n                    }\n                }\n            ),\n        )\n        return r.json()\n\n    def update(self, id, params):\n        r = requests.put(\n            self.api_url + "/restaurants/" + str(id),\n            headers={"Content-Type": "application/json"},\n            params={"populate": "categories"},\n            data=json.dumps({"data": {"categories": params["categories"]}}),\n        )\n        return r.json()\n\n\nrestaurant = Restaurant()\nprint(restaurant.update(2, {"categories": [2]}))\n')))}y.isMDXComponent=!0}}]);