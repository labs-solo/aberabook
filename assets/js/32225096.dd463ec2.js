"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[6834],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),y=r,g=d["".concat(l,".").concat(y)]||d[y]||u[y]||o;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},21566:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const o={title:"Gatsby",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Gatsby."},s="Getting Started with Gatsby",i={unversionedId:"dev-docs/integrations/gatsby",id:"dev-docs/integrations/gatsby",title:"Gatsby",description:"Integrate Strapi with Gatsby.",source:"@site/docs/dev-docs/integrations/gatsby.md",sourceDirName:"dev-docs/integrations",slug:"/dev-docs/integrations/gatsby",permalink:"/aberabook/dev-docs/integrations/gatsby",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/integrations/gatsby.md",tags:[],version:"current",frontMatter:{title:"Gatsby",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Gatsby."},sidebar:"devDocsSidebar",previous:{title:"Flutter",permalink:"/aberabook/dev-docs/integrations/flutter"},next:{title:"Gridsome",permalink:"/aberabook/dev-docs/integrations/gridsome"}},l={},p=[{value:"Create a Gatsby app",id:"create-a-gatsby-app",level:2},{value:"Configure Gatsby",id:"configure-gatsby",level:2},{value:"GET Request your collection type",id:"get-request-your-collection-type",level:2},{value:"Example",id:"example",level:3},{value:"Example",id:"example-1",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=c("ApiCall"),d=c("Request"),y=c("Response"),g={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-gatsby"},"Getting Started with Gatsby"),(0,r.kt)("p",null,"This integration guide follows the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/quick-start"},"Quick Start Guide"),' and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL ',(0,r.kt)("a",{parentName:"p",href:"http://localhost:1337/api/restaurants"},"http://localhost:1337/api/restaurants"),"."),(0,r.kt)("p",null,"If you haven't gone through the Quick Start Guide, the way you request a Strapi API with ",(0,r.kt)("a",{parentName:"p",href:"https://www.gatsbyjs.org/"},"Gatsby")," remains the same except that you do not fetch the same content."),(0,r.kt)("h2",{id:"create-a-gatsby-app"},"Create a Gatsby app"),(0,r.kt)("p",null,"Create a basic Gatsby application using the ",(0,r.kt)("a",{parentName:"p",href:"https://www.gatsbyjs.org/docs/gatsby-cli/"},"Gatsby CLI"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"gatsby new gatsby-app\n")),(0,r.kt)("h2",{id:"configure-gatsby"},"Configure Gatsby"),(0,r.kt)("p",null,"Gatsby is a ",(0,r.kt)("a",{parentName:"p",href:"https://www.staticgen.com/"},"Static Site Generator")," and will fetch your content from Strapi at build time. You need to configure Gatsby to communicate with your Strapi application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add gatsby-source-strapi\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add the ",(0,r.kt)("inlineCode",{parentName:"li"},"gatsby-source-strapi")," to the plugins section in the ",(0,r.kt)("inlineCode",{parentName:"li"},"gatsby-config.js")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  resolve: "gatsby-source-strapi",\n  options: {\n    apiURL: "http://localhost:1337",\n    collectionTypes: [\n      "restaurant",\n      "category",\n    ],\n    queryLimit: 1000,\n  },\n},\n')),(0,r.kt)("h2",{id:"get-request-your-collection-type"},"GET Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to fetch all your restaurants."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(u,{noSideBySide:!0,mdxType:"ApiCall"},(0,r.kt)(d,{title:"Example GET request",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  allStrapiRestaurant {\n    edges {\n      node {\n        data {\n          id\n          attributes {\n            name\n            description\n          }\n        }\n      }\n    }\n  }\n}\n"))),(0,r.kt)(y,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "allStrapiRestaurant": {\n      "edges": [\n        {\n          "node": {\n            "data":[\n              {\n                "id": 1,\n                {\n                  "attributes": {\n                    "name": "Biscotte Restaurant",\n                    "description": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers."\n                  }\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n')))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/pages/index.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\n\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query {\n    allStrapiRestaurant {\n      edges {\n        node {\n          data {\n            id\n            attributes {\n              name\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => (\n  <StaticQuery\n    query={query}\n    render={data => (\n      <ul>\n        {data.allStrapiRestaurant.edges[0].node.data.map(restaurant => (\n          <li key={restaurant.id}>{restaurant.attributes.name}</li>\n        ))}\n      </ul>\n    )}\n  />\n);\n\nexport default IndexPage;\n")),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," collection type in order to fetch a specific category with all the associated restaurants."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"findOne")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," collection type."),(0,r.kt)(u,{noSideBySide:!0,mdxType:"ApiCall"},(0,r.kt)(d,{title:"Example GET request",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  strapiCategory(data: { elemMatch: { id: { eq: 1 } } }) {\n    data {\n      id\n      attributes {\n        name\n        restaurants {\n          name\n          description\n        }\n      }\n    }\n  }\n}\n"))),(0,r.kt)(y,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "strapiCategory": {\n      "data": [\n        {\n          "id": 1,\n          "attributes": {\n            "name": "French Food",\n            "restaurants": [\n              {\n                "name": "Biscotte Restaurant",\n                "description": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers."\n              }\n            ]\n          }\n        }\n      ]\n    }\n  },\n  "extensions": {}\n}\n')))),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/pages/index.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\n\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query {\n    strapiCategory(data: { elemMatch: { id: { eq: 1 } } }) {\n      data {\n        id\n        attributes {\n          name\n          restaurants {\n            id\n            name\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst IndexPage = () => (\n  <StaticQuery\n    query={query}\n    render={data => (\n      <div>\n        <h1>{data.strapiCategory.data[0].attributes.name}</h1>\n        <ul>\n          {data.strapiCategory.data[0].attributes.restaurants.map(restaurant => (\n            <li key={restaurant.id}>{restaurant.name}</li>\n          ))}\n        </ul>\n      </div>\n    )}\n  />\n);\n\nexport default IndexPage;\n")),(0,r.kt)("p",null,"We can generate pages for each category."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Tell Gatsby to generate a page for each category by updating the ",(0,r.kt)("inlineCode",{parentName:"li"},"gatsby-node.js")," file with the following:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"exports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions;\n  const result = await graphql(\n    `\n      {\n        categories: allStrapiCategory {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    `\n  );\n\n  if (result.errors) {\n    throw result.errors;\n  }\n\n  // Create blog articles pages.\n  const categories = result.data.categories.edges;\n\n  const CategoryTemplate = require.resolve('./src/templates/category.js');\n\n  categories.forEach((category, index) => {\n    createPage({\n      path: `/category/${category.node.name}`,\n      component: CategoryTemplate,\n      context: {\n        name: category.node.name,\n      },\n    });\n  });\n};\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"./src/templates/category.js")," file that will display the content of each one of your category:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { graphql } from 'gatsby';\n\nexport const query = graphql`\n  query Category($name: String!) {\n    category: strapiCategory(name: { eq: $name }) {\n      name\n      restaurants {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst Category = ({ data }) => {\n  const restaurants = data.category.restaurants;\n  const category = data.category.name;\n\n  return (\n    <div>\n      <h1>{category}</h1>\n      <ul>\n        {restaurants.map(restaurant => {\n          return <li key={restaurant.id}>{restaurant.name}</li>;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Category;\n")),(0,r.kt)("p",null,"You can find your restaurant categories by browsing ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8000/category/<name-of-category>"),"."))}m.isMDXComponent=!0}}]);