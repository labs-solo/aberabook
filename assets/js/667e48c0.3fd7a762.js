"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[388],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>m});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},s=Object.keys(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(a=0;a<s.length;a++)n=s[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),p=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=p(t.components);return a.createElement(o.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,s=t.originalType,o=t.parentName,l=u(t,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(o,".").concat(m)]||c[m]||d[m]||s;return n?a.createElement(h,i(i({ref:e},l),{},{components:n})):a.createElement(h,i({ref:e},l))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var s=n.length,i=new Array(s);i[0]=c;var u={};for(var o in e)hasOwnProperty.call(e,o)&&(u[o]=e[o]);u.originalType=t,u.mdxType="string"==typeof t?t:r,i[1]=u;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},37277:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>i,default:()=>x,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const s={title:"Nuxt",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Nuxt 3."},i="Getting Started with Nuxt 3",u={unversionedId:"dev-docs/integrations/nuxt-js",id:"dev-docs/integrations/nuxt-js",title:"Nuxt",description:"Integrate Strapi with Nuxt 3.",source:"@site/docs/dev-docs/integrations/nuxt-js.md",sourceDirName:"dev-docs/integrations",slug:"/dev-docs/integrations/nuxt-js",permalink:"/aberabook/dev-docs/integrations/nuxt-js",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/integrations/nuxt-js.md",tags:[],version:"current",frontMatter:{title:"Nuxt",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Nuxt 3."},sidebar:"devDocsSidebar",previous:{title:"Next.js",permalink:"/aberabook/dev-docs/integrations/next-js"},next:{title:"PHP",permalink:"/aberabook/dev-docs/integrations/php"}},o={},p=[{value:"Create a Nuxt 3 app",id:"create-a-nuxt-3-app",level:2},{value:"Use an HTTP client",id:"use-an-http-client",level:2},{value:"GET Request - get list of entities or one entity",id:"get-request---get-list-of-entities-or-one-entity",level:2},{value:"POST Request - create new entity",id:"post-request---create-new-entity",level:2},{value:"PUT Request - update existing entity",id:"put-request---update-existing-entity",level:2},{value:"DELETE Request - delete existing entity",id:"delete-request---delete-existing-entity",level:2},{value:"Example",id:"example",level:3}],l=t=>function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)},d=l("Tabs"),c=l("TabItem"),m=l("Request"),h=l("Response"),k={toc:p};function x(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-nuxt-3"},"Getting Started with Nuxt 3"),(0,r.kt)("p",null,"This integration guide follows the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/quick-start"},"Quick Start Guide"),' and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL ',(0,r.kt)("a",{parentName:"p",href:"http://localhost:1337/api/restaurants"},"http://localhost:1337/api/restaurants"),"."),(0,r.kt)("p",null,"If you haven't gone through the Quick Start Guide, the way you request a Strapi API with ",(0,r.kt)("a",{parentName:"p",href:"https://nuxtjs.org/"},"Nuxt 3")," remains the same except that you do not fetch the same content."),(0,r.kt)("h2",{id:"create-a-nuxt-3-app"},"Create a Nuxt 3 app"),(0,r.kt)("p",null,"Create a basic Nuxt 3 application with npx package runner"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx nuxi init nuxt-app\n")),(0,r.kt)("h2",{id:"use-an-http-client"},"Use an HTTP client"),(0,r.kt)("p",null,"For this example we are using the awesome ",(0,r.kt)("a",{parentName:"p",href:"https://strapi.nuxtjs.org/"},"@nuxt/strapi")," module and Nuxt helper function ",(0,r.kt)("a",{parentName:"p",href:"https://nuxt.com/docs/api/utils/dollarfetch"},"$fetch")," (based on ",(0,r.kt)("inlineCode",{parentName:"p"},"ohmyfetch"),"). You may choose any of this variants."),(0,r.kt)(d,{groupid:"@nuxtjs/strapi-fetch",mdxType:"Tabs"},(0,r.kt)(c,{value:"@nuxtjs/strapi",label:"@nuxtjs/strapi",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev @nuxtjs/strapi\n")),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"@nuxtjs/strapi")," to the module section of ",(0,r.kt)("inlineCode",{parentName:"p"},"nuxt.config.ts")," with the following settings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"modules: ['@nuxtjs/strapi'],\nstrapi: {\n  url: 'http://localhost:1337'\n},\n"))),(0,r.kt)(c,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)("p",null,"No installation needed."))),(0,r.kt)("h2",{id:"get-request---get-list-of-entities-or-one-entity"},"GET Request - get list of entities or one entity"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to fetch your restaurants."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"findOne")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(d,{groupid:"@nuxtjs/strapi-fetch",mdxType:"Tabs"},(0,r.kt)(c,{value:"@nuxtjs/strapi",label:"@nuxtjs/strapi",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@nuxtjs/strapi")," exposes composables that are auto-imported by Nuxt 3. Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," function must be renamed because it's reserved word in JavaScript."),(0,r.kt)(m,{title:"Example GET request with @nuxtjs/strapi",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<script setup lang=\"ts\">\nimport type { Restaurant } from '~/types'\nconst { find, findOne, create, update, delete: remove } = useStrapi()\n<\/script>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Get all restaurants\nconst response = await find<Restaurant>('restaurants')\n\n// Get one restaurant by id\nconst response = await findOne<Restaurant>(\"restaurants\", restaurantId)\n")))),(0,r.kt)(c,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example GET request with $fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Get all restaurants\nconst response = $fetch("http://localhost:1337/api/restaurants")\n\n// Get one restaurant by id\nconst response = await $fetch(`http://localhost:1337/api/restaurants/${restaurantId}`)\n'))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// List of the restaurants\n{\n  "data": [\n    {\n      "id": 1,\n      "attributes": {\n        "name": "Biscotte Restaurant",\n        "description": "Welcome to Biscotte restaurant! \\nRestaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",\n        "createdAt": "2022-10-29T09:37:55.061Z",\n        "updatedAt": "2022-11-07T18:53:27.702Z",\n        "publishedAt": "2022-10-29T09:47:48.782Z"\n      }\n    },\n    {\n      "id": 2,\n      "attributes": {\n        "name": "Dolemon Sushi",\n        "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious.",\n        "createdAt": "2022-10-29T09:37:55.061Z",\n        "updatedAt": "2022-11-07T18:53:27.702Z",\n        "publishedAt": "2022-10-29T09:47:48.782Z"\n      }\n    }\n  ],\n  "meta": {\n    "pagination": { "page": 1, "pageSize": 25, "pageCount": 1, "total": 4 }\n  }\n}\n\n// One restaurant\n{\n  "data": {\n    "id": 1,\n    "attributes": {\n      "name": "Biscotte Restaurant",\n      "description": "Welcome to Biscotte restaurant! \\nRestaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",\n      "createdAt": "2022-10-29T09:37:55.061Z",\n      "updatedAt": "2022-11-07T18:53:27.702Z",\n      "publishedAt": "2022-10-29T09:47:48.782Z"\n    }\n  },\n  "meta": {}\n}\n\n'))),(0,r.kt)("h2",{id:"post-request---create-new-entity"},"POST Request - create new entity"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to create a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(d,{groupid:"@nuxtjs/strapi-fetch",mdxType:"Tabs"},(0,r.kt)(c,{value:"@nuxtjs/strapi",label:"@nuxtjs/strapi",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example POST request with @nuxtjs/strapi",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'await create<Restaurant>("restaurants", { \n    name: restaurantName, \n    description: restaurantDescription })\n')))),(0,r.kt)(c,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example POST request with $fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'await $fetch("http://localhost:1337/api/restaurants", {\n    method: "POST",\n    body: {\n      data: {\n        name: restaurantName,\n        description: restaurantDescription\n      }\n    }\n  })\n'))))),(0,r.kt)("h2",{id:"put-request---update-existing-entity"},"PUT Request - update existing entity"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to update your restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"put")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(d,{groupid:"@nuxtjs/strapi-fetch",mdxType:"Tabs"},(0,r.kt)(c,{value:"@nuxtjs/strapi",label:"@nuxtjs/strapi",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example PUT request with @nuxtjs/strapi",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'await update<Restaurant>("restaurants", restaurantId, { \n    name: restaurantName, \n    description: restaurantDescription })\n')))),(0,r.kt)(c,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example PUT request with $fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'await $fetch(`http://localhost:1337/api/restaurants/${restaurantId}`, {\n    method: "PUT",\n    body: {\n      data: {\n        name: restaurantName,\n        description: restaurantDescription\n      }\n    }\n  })\n'))))),(0,r.kt)("h2",{id:"delete-request---delete-existing-entity"},"DELETE Request - delete existing entity"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to delete your restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"delete")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(d,{groupid:"@nuxtjs/strapi-fetch",mdxType:"Tabs"},(0,r.kt)(c,{value:"@nuxtjs/strapi",label:"@nuxtjs/strapi",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example DELETE request with @nuxtjs/strapi",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'await remove<Restaurant>("restaurants", restaurantId);\n')))),(0,r.kt)(c,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example DELETE request with $fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"await $fetch(`http://localhost:1337/api/restaurants/${restaurantId}`, {\n    method: 'DELETE'\n  })\n"))))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"Consider an example of a simple CRUD Nuxt application that implements the functions described above."),(0,r.kt)(d,{groupid:"@nuxtjs/strapi-fetch",mdxType:"Tabs"},(0,r.kt)(c,{value:"@nuxtjs/strapi",label:"@nuxtjs/strapi",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/index.vue")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <div>\n    <ul>\n      <li v-for="restaurant in restaurants?.data" :key="restaurant.id">\n        {{ restaurant.attributes.name }}\n        <button @click="$router.push(`${$route.path}/restaurant/${restaurant.id}`)">Edit</button>\n        <button @click="deleteRestaurant(restaurant.id)">Delete</button>\n      </li>\n    </ul>\n    \n    <nuxt-link :to="`${$route.path}/restaurant/create`">Create</nuxt-link>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport type { Restaurant } from \'~/types\'\nconst { find, delete: remove } = useStrapi() // delete is keyword in JS, must not be used\nconst { data: restaurants, refresh } = await useAsyncData(\n  \'restaurants\',\n  () => find<Restaurant>(\'restaurants\')\n)\n\nconst deleteRestaurant = async (restaurantId: number) => {\n  await remove<Restaurant>("restaurants", restaurantId);\n  refresh()\n};\n<\/script>\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/restaurant/create.vue")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <div>\n    <div><input type="text" v-model="name" /></div>\n    <div><textarea v-model="description"></textarea></div>\n    <button @click="createRestaurant();$router.go(-1)">Create</button>\n    <button @click="$router.go(-1)">Cancel</button>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport type { Restaurant } from "~/types"\nconst { create } = useStrapi()\nconst name = ref("")\nconst description = ref("")\nconst createRestaurant = async () => {\n  await create<Restaurant>("restaurants", { \n    name: name.value,\n    description: description.value\n  })\n}\n<\/script>\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/restaurant/[id].vue")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <div>\n    <div><input type="text" v-model="name" /></div>\n    <div><textarea v-model="description"></textarea></div>\n    <button @click="updateRestaurant();$router.go(-1)">Update</button>\n    <button @click="$router.go(-1)">Cancel</button>\n    {{ restaurant }}\n  </div>\n</template>\n\n<script setup lang="ts">\nimport type { Restaurant } from \'~/types\'\nconst { findOne, update } = useStrapi()\nconst route = useRoute()\nconst restaurantId: number = +route.params.id // cast to number\nconst response = await findOne<Restaurant>("restaurants", restaurantId)\nconst name = ref(response.data.attributes.name)\nconst description = ref(response.data.attributes.description)\nconst updateRestaurant = async () => {\n  await update<Restaurant>("restaurants", restaurantId, { \n    name: name.value,\n    description: description.value\n  })\n}\n<\/script>\n'))),(0,r.kt)(c,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/index.vue")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <div>\n    <ul>\n      <li v-for="restaurant in restaurants.data" :key="restaurant.id">\n        {{ restaurant.attributes.name }}\n        <button @click="$router.push(`${$route.path}/restaurant/${restaurant.id}`)">Edit</button>\n        <button @click="deleteRestaurant(restaurant.id)">Delete</button>\n      </li>\n    </ul>\n    <div v-else>Loading...</div>\n    <nuxt-link :to="`${$route.path}/restaurant/create`">Create</nuxt-link>\n  </div>\n</template>\n\n<script setup>\nconst { data: restaurants, refresh } = await useAsyncData(\n  \'restaurants\', \n  () => $fetch("http://localhost:1337/api/restaurants")\n)\n\nconst deleteRestaurant = async (restaurantId) => {\n  await $fetch(`http://localhost:1337/api/restaurants/${restaurantId}`, {\n    method: \'DELETE\'\n  })\n  refresh()\n}\n<\/script>\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/restaurant/create.vue")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <div>\n    <div><input type="text" v-model="restaurant.name" /></div>\n    <div><textarea v-model="restaurant.description"></textarea></div>\n    <button @click="createRestaurant();$router.go(-1)">Create</button>\n    <button @click="$router.go(-1)">Cancel</button>\n    {{ restaurant }}\n  </div>\n</template>\n  \n<script setup>\nconst restaurant = ref({ name: "", description: "" })\nconst createRestaurant = async () => {\n  await $fetch("http://localhost:1337/api/restaurants", {\n    method: "POST",\n    body: {\n      data: {\n        name: restaurant.value.name,\n        description: restaurant.value.description\n      }\n    }\n  })\n}\n<\/script>\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./pages/restaurant/[id].vue")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <div>\n    <div><input type="text" v-model="restaurant.name" /></div>\n    <div><textarea v-model="restaurant.description"></textarea></div>\n    <button @click="updateRestaurant();$router.go(-1)">Update</button>\n    <button @click="$router.go(-1)">Cancel</button>\n    {{ restaurant }}\n  </div>\n</template>\n  \n<script setup>\nconst route = useRoute()\nconst response = await $fetch(`http://localhost:1337/api/restaurants/${route.params.id}`)\nconst restaurant = ref(response.data.attributes)\nconst updateRestaurant = async () => {\n  await $fetch(`http://localhost:1337/api/restaurants/${route.params.id}`, {\n    method: "PUT",\n    body: {\n      data: {\n        name: restaurant.value.name,\n        description: restaurant.value.description\n      }\n    }\n  })\n}\n<\/script>\n')))))}x.isMDXComponent=!0}}]);