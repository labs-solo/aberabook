"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[9924],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,g=m["".concat(p,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(g,l(l({ref:t},s),{},{components:n})):a.createElement(g,l({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(83117),r=(n(67294),n(3905));const i={title:"GraphQL API",displayed_sidebar:"devDocsSidebar"},l="GraphQL API",o={unversionedId:"dev-docs/api/graphql",id:"dev-docs/api/graphql",title:"GraphQL API",description:"To use the GraphQL API, install the GraphQL plugin.",source:"@site/docs/dev-docs/api/graphql.md",sourceDirName:"dev-docs/api",slug:"/dev-docs/api/graphql",permalink:"/aberabook/dev-docs/api/graphql",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/graphql.md",tags:[],version:"current",frontMatter:{title:"GraphQL API",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"REST API Guides",permalink:"/aberabook/dev-docs/api/rest/guides/intro"},next:{title:"Entity Service API",permalink:"/aberabook/dev-docs/api/entity-service"}},p={},d=[{value:"Unified response format",id:"unified-response-format",level:2},{value:"Queries",id:"queries",level:2},{value:"Fetch a single entry",id:"fetch-a-single-entry",level:3},{value:"Fetch multiple entries",id:"fetch-multiple-entries",level:3},{value:"Fetch dynamic zone data",id:"fetch-dynamic-zone-data",level:3},{value:"Mutations",id:"mutations",level:2},{value:"Create a new entry",id:"create-a-new-entry",level:3},{value:"Update an existing entry",id:"update-an-existing-entry",level:3},{value:"Delete an entry",id:"delete-an-entry",level:3},{value:"Filters",id:"filters",level:2},{value:"Sorting",id:"sorting",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Pagination by page",id:"pagination-by-page",level:3},{value:"Pagination by offset",id:"pagination-by-offset",level:3}],s={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"graphql-api"},"GraphQL API"),(0,r.kt)("admonition",{type:"prerequisites"},(0,r.kt)("p",{parentName:"admonition"},"To use the GraphQL API, install the ",(0,r.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/plugins/graphql"},"GraphQL")," plugin.")),(0,r.kt)("p",null,"The GraphQL API allows performing queries and mutations to interact with the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#content-types"},"content-types")," through Strapi's ",(0,r.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/plugins/graphql"},"GraphQL plugin"),". Results can be ",(0,r.kt)("a",{parentName:"p",href:"#filters"},"filtered"),", ",(0,r.kt)("a",{parentName:"p",href:"#sorting"},"sorted")," and ",(0,r.kt)("a",{parentName:"p",href:"#pagination"},"paginated"),"."),(0,r.kt)("h2",{id:"unified-response-format"},"Unified response format"),(0,r.kt)("p",null,"Responses are unified with the GraphQL API in that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"queries and mutations that return information for a single entry mainly use a ",(0,r.kt)("inlineCode",{parentName:"li"},"XxxEntityResponse")," type"),(0,r.kt)("li",{parentName:"ul"},"queries and mutations that return i\ufe0fnformation for multiple entries mainly use a ",(0,r.kt)("inlineCode",{parentName:"li"},"XxxEntityResponseCollection")," type, which includes ",(0,r.kt)("inlineCode",{parentName:"li"},"meta")," information (with ",(0,r.kt)("a",{parentName:"li",href:"#pagination"},"pagination"),") in addition to the data itself")),(0,r.kt)("p",null,"Responses can also include an ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," (see ",(0,r.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/error-handling"},"error handling documentation"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"title=\"Example: Response formats for queries and mutations with an example 'Article' content-type\"",title:'"Example:',Response:!0,formats:!0,for:!0,queries:!0,and:!0,mutations:!0,with:!0,an:!0,example:!0,"'Article'":!0,'content-type"':!0},"type ArticleEntityResponse {\n    data: ArticleEntity\n}\n\ntype ArticleEntityResponseCollection {\n    data: [ArticleEntityResponse!]!\n    meta: ResponseCollectionMeta!\n}\n\nquery {\n    article(...): ArticleEntityResponse # find one\n    articles(...): ArticleEntityResponseCollection # find many\n}\n\nmutation {\n    createArticle(...): ArticleEntityResponse # create\n    updateArticle(...): ArticleEntityResponse # update\n    deleteArticle(...): ArticleEntityResponse # delete\n}\n")),(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("p",null,"Queries in GraphQL are used to fetch data without modifying it."),(0,r.kt)("p",null,"We assume that the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/plugins/graphql#shadow-crud"},"Shadow CRUD")," feature is enabled. For each model, the GraphQL plugin auto-generates queries and mutations that mimics basic CRUD operations (findMany, findOne, create, update, delete)."),(0,r.kt)("h3",{id:"fetch-a-single-entry"},"Fetch a single entry"),(0,r.kt)("p",null,"Single entries can be found by their ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example query: Find the entry with id 1"',title:'"Example',"query:":!0,Find:!0,the:!0,entry:!0,with:!0,id:!0,'1"':!0},"query {\n  document(id: 1) {\n    data {\n      id\n      attributes {\n        title\n        categories {\n          data {\n            id\n            attributes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"fetch-multiple-entries"},"Fetch multiple entries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"title=\"Example query: Find all documents and populate 'categories' relation with the 'name' attribute\"",title:'"Example',"query:":!0,Find:!0,all:!0,documents:!0,and:!0,populate:!0,"'categories'":!0,relation:!0,with:!0,the:!0,"'name'":!0,'attribute"':!0},"query {\n  documents {\n    data {\n      id\n      attributes {\n        title\n        categories {\n          data {\n            id\n            attributes {\n                name\n            }\n          }\n        }\n      }\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        total\n        pageCount\n      }\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"fetch-dynamic-zone-data"},"Fetch dynamic zone data"),(0,r.kt)("p",null,"Dynamic zones are union types in graphql so you need to use fragments to query the fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  restaurants {\n    data {\n      attributes {\n        dynamiczone {\n          __typename\n          ...on ComponentDefaultClosingperiod {\n            label\n          }\n        }\n      }\n    }\n  }\n}\n")),(0,r.kt)("h2",{id:"mutations"},"Mutations"),(0,r.kt)("p",null,"Mutations in GraphQL are used to modify data (e.g. create, update, delete data)."),(0,r.kt)("h3",{id:"create-a-new-entry"},"Create a new entry"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation createArticle {\n  createArticle(data: { title: "Hello"}) {\n    data {\n      id\n      attributes {\n        title\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"The implementation of the mutations also supports relational attributes. For example, you can create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," and attach many ",(0,r.kt)("inlineCode",{parentName:"p"},"Restaurant")," to it by writing your query like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createUser(\n    data: {\n      username: "John"\n      email: "john@doe.com"\n      restaurants: ["1", "2"]\n    }\n  ) {\n    data {\n      id\n      attributes {\n        username\n        email\n        restaurants {\n          data {\n            id \n            attributes {\n              name\n              description\n              price\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"update-an-existing-entry"},"Update an existing entry"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation updateArticle {\n  updateArticle(id: "1", data: { title: "Hello" }) {\n    data {\n      id\n      attributes {\n        title\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"You can also update relational attributes by passing an ID or an array of IDs (depending on the relationship)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  updateRestaurant(\n    id: "5b5b27f8164f75c29c728110"\n    data: {\n      chef: "1" // User ID\n    }\n  }) {\n    data {\n      id\n      attributes {\n        chef {\n          data {\n            attributes {\n              username\n              email\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"delete-an-entry"},"Delete an entry"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation deleteArticle {\n  deleteArticle(id: 1) {\n    data {\n      id\n      attributes {\n        title\n      }\n    }\n  }\n}\n")),(0,r.kt)("h2",{id:"filters"},"Filters"),(0,r.kt)("p",null,"Queries can accept a ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," parameter with the following syntax:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"filters: { field: { operator: value } }")),(0,r.kt)("p",null,"Logical operators (",(0,r.kt)("inlineCode",{parentName:"p"},"and"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"or"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"not"),") can also be used and accept arrays of objects."),(0,r.kt)("p",null,"The following operators are available:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operator"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"eq")),(0,r.kt)("td",{parentName:"tr",align:null},"Equal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ne")),(0,r.kt)("td",{parentName:"tr",align:null},"Not equal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lt")),(0,r.kt)("td",{parentName:"tr",align:null},"Less than")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lte")),(0,r.kt)("td",{parentName:"tr",align:null},"Less than or equal to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gt")),(0,r.kt)("td",{parentName:"tr",align:null},"Greater than")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gte")),(0,r.kt)("td",{parentName:"tr",align:null},"Greater than or equal to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"in")),(0,r.kt)("td",{parentName:"tr",align:null},"Included in an array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"notIn")),(0,r.kt)("td",{parentName:"tr",align:null},"Not included in an array")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"contains")),(0,r.kt)("td",{parentName:"tr",align:null},"Contains, case sensitive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"notContains")),(0,r.kt)("td",{parentName:"tr",align:null},"Does not contain, case sensitive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"containsi")),(0,r.kt)("td",{parentName:"tr",align:null},"Contains, case insensitive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"notContainsi")),(0,r.kt)("td",{parentName:"tr",align:null},"Does not contain, case insensitive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"null")),(0,r.kt)("td",{parentName:"tr",align:null},"Is null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"notNull")),(0,r.kt)("td",{parentName:"tr",align:null},"Is not null")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"between")),(0,r.kt)("td",{parentName:"tr",align:null},"Is between")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"startsWith")),(0,r.kt)("td",{parentName:"tr",align:null},"Starts with")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"endsWith")),(0,r.kt)("td",{parentName:"tr",align:null},"Ends with")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"and")),(0,r.kt)("td",{parentName:"tr",align:null},"Logical ",(0,r.kt)("inlineCode",{parentName:"td"},"and"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"or")),(0,r.kt)("td",{parentName:"tr",align:null},"Logical ",(0,r.kt)("inlineCode",{parentName:"td"},"or"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"not")),(0,r.kt)("td",{parentName:"tr",align:null},"Logical ",(0,r.kt)("inlineCode",{parentName:"td"},"not"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example query with filters"',title:'"Example',query:!0,with:!0,'filters"':!0},'{\n  documents(filters: { name: { eq: "test" }, or: [{ price: { gt: 10 }}, { title: { startsWith: "Book" }}] }) {\n    data {\n      id\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"sorting"},"Sorting"),(0,r.kt)("p",null,"Queries can accept a ",(0,r.kt)("inlineCode",{parentName:"p"},"sort")," parameter with the following syntax:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"to sort based on a single value: ",(0,r.kt)("inlineCode",{parentName:"li"},'sort: "value"')," "),(0,r.kt)("li",{parentName:"ul"},"to sort based on multiple values: ",(0,r.kt)("inlineCode",{parentName:"li"},'sort: ["value1", "value2"]'))),(0,r.kt)("p",null,"The sorting order can be defined with ",(0,r.kt)("inlineCode",{parentName:"p"},":asc")," (ascending order, default, can be omitted) or ",(0,r.kt)("inlineCode",{parentName:"p"},":desc")," (for descending order)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example request: Sorting on title by ascending order"',title:!0,"request:":!0,Sorting:!0,on:!0,by:!0,ascending:!0,'order"':!0},'{\n  documents(sort: "title") {\n    data {\n      id\n    }\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example request: Sorting on title by descending order"',title:!0,"request:":!0,Sorting:!0,on:!0,by:!0,descending:!0,'order"':!0},'{\n  documents(sort: "title:desc") {\n    data {\n      id\n    }\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example request: Sorting on title by ascending order, then on price by descending order"',title:!0,"request:":!0,Sorting:!0,on:!0,by:!0,ascending:!0,"order,":!0,then:!0,price:!0,descending:!0,'order"':!0},'{\n  documents(sort: ["title:asc", "price:desc"]) {\n    data {\n      id\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"Queries can accept a ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," parameter. Results can be paginated either by page or by offset."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Pagination methods can not be mixed. Always use either ",(0,r.kt)("inlineCode",{parentName:"p"},"page")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," ",(0,r.kt)("strong",{parentName:"p"},"or")," ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"limit"),".")),(0,r.kt)("h3",{id:"pagination-by-page"},"Pagination by page"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pagination[page]")),(0,r.kt)("td",{parentName:"tr",align:null},"Page number"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pagination[pageSize]")),(0,r.kt)("td",{parentName:"tr",align:null},"Page size"),(0,r.kt)("td",{parentName:"tr",align:null},"10")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example query: Pagination by page"',title:'"Example',"query:":!0,Pagination:!0,by:!0,'page"':!0},"{\n  documents(pagination: { page: 1, pageSize: 10 }) {\n    data {\n      id\n    }\n    meta {\n      pagination {\n        page\n        pageSize\n        pageCount\n        total\n      }\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"pagination-by-offset"},"Pagination by offset"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Maximum"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pagination[start]")),(0,r.kt)("td",{parentName:"tr",align:null},"Start value"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pagination[limit]")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of entities to return"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"-1")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Example query: Pagination by offset"',title:'"Example',"query:":!0,Pagination:!0,by:!0,'offset"':!0},"{\n  documents(pagination: { start: 20, limit: 30 }) {\n    data {\n      id\n    }\n    meta {\n      pagination {\n        start\n        limit\n      }\n    }\n  }\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The default and maximum values for ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination[limit]")," can be ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/configurations/plugins#graphql-configuration"},"configured in the ",(0,r.kt)("inlineCode",{parentName:"a"},"./config/plugins.js"))," file with the ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql.config.defaultLimit")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql.config.maxLimit")," keys.")))}u.isMDXComponent=!0}}]);