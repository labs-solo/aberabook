"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[1424,6480],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(83117),r=(n(67294),n(3905));n(17155);const o={},i="Controllers",s={unversionedId:"dev-docs/backend-customization/controllers",id:"dev-docs/backend-customization/controllers",title:"Controllers",description:"Controllers are JavaScript files that contain a set of methods, called actions, reached by the client according to the requested route. Whenever a client requests the route, the action performs the business logic code and sends back the response. Controllers represent the C in the model-view-controller (MVC) pattern.",source:"@site/docs/dev-docs/backend-customization/controllers.md",sourceDirName:"dev-docs/backend-customization",slug:"/dev-docs/backend-customization/controllers",permalink:"/dev-docs/backend-customization/controllers",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/backend-customization/controllers.md",tags:[],version:"current",frontMatter:{}},l={},c={width:"100%",margin:"0"},d={fontSize:"12px"},u=[{value:"Implementation",id:"implementation",level:2},{value:"Adding a new controller",id:"adding-a-new-controller",level:3},{value:"Sanitization and Validation in controllers",id:"sanitization-and-validation-in-controllers",level:3},{value:"Sanitization when utilizing controller factories",id:"sanitization-when-utilizing-controller-factories",level:4},{value:"Sanitization and validation when building custom controllers",id:"sanitize-validate-custom-controllers",level:4},{value:"Extending core controllers",id:"extending-core-controllers",level:3},{value:"Usage",id:"usage",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=p("Tabs"),h=p("TabItem"),y={toc:u};function k(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"controllers"},"Controllers"),(0,r.kt)("p",null,"Controllers are JavaScript files that contain a set of methods, called actions, reached by the client according to the requested ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/routes"},"route"),". Whenever a client requests the route, the action performs the business logic code and sends back the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/requests-responses"},"response"),". Controllers represent the C in the model-view-controller (MVC) pattern."),(0,r.kt)("p",null,"In most cases, the controllers will contain the bulk of a project's business logic. But as a controller's logic becomes more and more complicated, it's a good practice to use ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/services"},"services")," to organize the code into re-usable parts."),(0,r.kt)("figure",{style:c},(0,r.kt)("img",{src:"/img/assets/backend-customization/diagram-controllers-services.png",alt:"Simplified Strapi backend diagram with controllers highlighted"}),(0,r.kt)("em",null,(0,r.kt)("figcaption",{style:d},"The diagram represents a simplified version of how a request travels through the Strapi back end, with controllers highlighted. The backend customization introduction page includes a complete, ",(0,r.kt)("a",{href:"/dev-docs/backend-customization#interactive-diagram"},"interactive diagram"),"."))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Before deciding to customize core controllers, please consider creating custom route middlewares (see ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/routes"},"routes documentation"),").")),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("p",null,"Controllers can be ",(0,r.kt)("a",{parentName:"p",href:"#adding-a-new-controller"},"generated or added manually"),". Strapi provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"createCoreController")," factory function that automatically generates core controllers and allows building custom ones or ",(0,r.kt)("a",{parentName:"p",href:"#extending-core-controllers"},"extend or replace the generated controllers"),"."),(0,r.kt)("h3",{id:"adding-a-new-controller"},"Adding a new controller"),(0,r.kt)("p",null,"A new controller can be implemented:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"with the ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/cli"},"interactive CLI command ",(0,r.kt)("inlineCode",{parentName:"a"},"strapi generate"))),(0,r.kt)("li",{parentName:"ul"},"or manually by creating a JavaScript file:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"in ",(0,r.kt)("inlineCode",{parentName:"li"},"./src/api/[api-name]/controllers/")," for API controllers (this location matters as controllers are auto-loaded by Strapi from there)"),(0,r.kt)("li",{parentName:"ul"},"or in a folder like ",(0,r.kt)("inlineCode",{parentName:"li"},"./src/plugins/[plugin-name]/server/controllers/")," for plugin controllers, though they can be created elsewhere as long as the plugin interface is properly exported in the ",(0,r.kt)("inlineCode",{parentName:"li"},"strapi-server.js")," file (see ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/api/plugins/server-api"},"Server API for Plugins documentation"),")")))),(0,r.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/controllers/restaurant.js"',title:'"./src/api/restaurant/controllers/restaurant.js"'},'const { createCoreController } = require("@strapi/strapi").factories;\n\nmodule.exports = createCoreController(\n  "api::restaurant.restaurant",\n  ({ strapi }) => ({\n    /**\n     * Example 1: Modifying a Strapi controller function\n     *\n     * If you need to modify the input or output of a pre-defined Strapi controller method,\n     * write a method of the same name, and use `super` to call the parent method.\n     * */\n    async find(ctx) {\n      // your custom logic for modifying the input\n      ctx.query = { ...ctx.query, locale: "en" }; // force ctx.query.locale to \'en\' regardless of what was requested\n\n      // Call the default parent controller action\n      const result = await super.find(ctx);\n\n      // your custom logic for modifying the output\n      result.meta.date = Date.now(); // change the date that is returned\n\n      return result;\n    },\n\n    /**\n     * Example 2: Replacing a Strapi controller function\n     *\n     * If you need to completely replace the behavior of a pre-defined Strapi controller method,\n     * you can do so by simply implementing a method of the same name.\n     *\n     * Caution: You will need to manage the security of the request and results on your own,\n     * as demonstrated in this example.\n     * */\n    async find(ctx) {\n      // validateQuery throws an error if any of the query params used are inaccessible to ctx.user\n      // That is, trying to access private fields, fields they don\'t have permission for, wrong data type, etc\n      await this.validateQuery(ctx);\n\n      // sanitizeQuery silently removes any query params that are invalid or the user does not have access to\n      // It is recommended to use sanitizeQuery even if validateQuery is used, as validateQuery allows\n      // a number of non-security-related cases such as empty objects in string fields to pass, while sanitizeQuery\n      // will remove them completely\n      const sanitizedQueryParams = await this.sanitizeQuery(ctx);\n\n      // Perform whatever custom actions are needed\n      const { results, pagination } = await strapi\n        .service("api::restaurant.restaurant")\n        .find(sanitizedQueryParams);\n\n      // sanitizeOutput removes any data that was returned by our query that the ctx.user should not have access to\n      const sanitizedResults = await this.sanitizeOutput(results, ctx);\n\n      // transformResponse correctly formats the data and meta fields of your results to return to the API\n      return this.transformResponse(sanitizedResults, { pagination });\n    },\n\n    /**\n     * Example 3: Writing your own new controller function\n     * If you need to create some new action that does not match one of the pre-configured Strapi methods,\n     * you can simply add the method with the desired name and implement whatever functionality you want.\n     *\n     * Caution: Similar to replacing a controller, you will need to manage the security of the request\n     * yourself, so remember to use sanitizers and validators as needed.\n     * */\n    async healthCheck(ctx) {\n      ctx.body = "ok";\n    },\n  })\n);\n'))),(0,r.kt)(h,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/controllers/restaurant.ts"',title:'"./src/api/restaurant/controllers/restaurant.ts"'},'import { factories } from "@strapi/strapi";\n\nexport default factories.createCoreController(\n  "api::restaurant.restaurant",\n  ({ strapi }) => ({\n    /**\n     * Example 1: Modifying a Strapi controller function\n     *\n     * If you need to modify the input or output of a pre-defined Strapi controller method,\n     * write a method of the same name, and use `super` to call the parent method.\n     * */\n    async find(ctx) {\n      // your custom logic for modifying the input\n      ctx.query = { ...ctx.query, locale: "en" }; // force ctx.query.locale to \'en\' regardless of what was requested\n\n      // Call the default parent controller action\n      const result = await super.find(ctx);\n\n      // your custom logic for modifying the output\n      result.meta.date = Date.now(); // change the date that is returned\n\n      return result;\n    },\n\n    /**\n     * Example 2: Replacing a Strapi controller function\n     *\n     * If you need to completely replace the behavior of a pre-defined Strapi controller method,\n     * you can do so by simply implementing a method of the same name.\n     *\n     * Caution: You will need to manage the security of the request and results on your own,\n     * as demonstrated in this example.\n     * */\n    async find(ctx) {\n      // validateQuery throws an error if any of the query params used are inaccessible to ctx.user\n      // That is, trying to access private fields, fields they don\'t have permission for, wrong data type, etc\n      await this.validateQuery(ctx);\n\n      // sanitizeQuery silently removes any query params that are invalid or the user does not have access to\n      // It is recommended to use sanitizeQuery even if validateQuery is used, as validateQuery allows\n      // a number of non-security-related cases such as empty objects in string fields to pass, while sanitizeQuery\n      // will remove them completely\n      const sanitizedQueryParams = await this.sanitizeQuery(ctx);\n\n      // Perform whatever custom actions are needed\n      const { results, pagination } = await strapi\n        .service("api::restaurant.restaurant")\n        .find(sanitizedQueryParams);\n\n      // sanitizeOutput removes any data that was returned by our query that the ctx.user should not have access to\n      const sanitizedResults = await this.sanitizeOutput(results, ctx);\n\n      // transformResponse correctly formats the data and meta fields of your results to return to the API\n      return this.transformResponse(sanitizedResults, { pagination });\n    },\n\n    /**\n     * Example 3: Writing your own new controller function\n     * If you need to create some new action that does not match one of the pre-configured Strapi methods,\n     * you can simply add the method with the desired name and implement whatever functionality you want.\n     *\n     * Caution: Similar to replacing a controller, you will need to manage the security of the request\n     * yourself, so remember to use sanitizers and validators as needed.\n     * */\n    async healthCheck(ctx) {\n      try {\n        ctx.body = "ok";\n      } catch (err) {\n        ctx.body = err;\n      }\n    },\n  })\n);\n')))),(0,r.kt)("p",null,"Each controller action can be an ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"sync")," function.\nEvery action receives a context object (",(0,r.kt)("inlineCode",{parentName:"p"},"ctx"),") as a parameter. ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx")," contains the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/requests-responses#requests"},"request context")," and the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/requests-responses#responses"},"response context"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example: GET /hello route calling a basic controller"),(0,r.kt)("p",null,"A specific ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /hello")," ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/routes"},"route")," is defined, the name of the router file (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),") is used to call the controller handler (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),"). Every time a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /hello")," request is sent to the server, Strapi calls the ",(0,r.kt)("inlineCode",{parentName:"p"},"index")," action in the ",(0,r.kt)("inlineCode",{parentName:"p"},"hello.js")," controller, which returns ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello World!"),":"),(0,r.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'"title="./src/api/hello/routes/hello.js"','"title':'"./src/api/hello/routes/hello.js"'},'module.exports = {\n  routes: [\n    {\n      method: "GET",\n      path: "/hello",\n      handler: "hello.index",\n    },\n  ],\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'"title="./src/api/hello/controllers/hello.js"','"title':'"./src/api/hello/controllers/hello.js"'},'module.exports = {\n  async index(ctx, next) {\n    // called by GET /hello\n    ctx.body = "Hello World!"; // we could also send a JSON\n  },\n};\n'))),(0,r.kt)(h,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'"title="./src/api/hello/routes/hello.ts"','"title':'"./src/api/hello/routes/hello.ts"'},'export default {\n  routes: [\n    {\n      method: "GET",\n      path: "/hello",\n      handler: "hello.index",\n    },\n  ],\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/hello/controllers/hello.ts"',title:'"./src/api/hello/controllers/hello.ts"'},'export default {\n  async index(ctx, next) {\n    // called by GET /hello\n    ctx.body = "Hello World!"; // we could also send a JSON\n  },\n};\n'))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"When a new ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#content-types"},"content-type")," is created, Strapi builds a generic controller with placeholder code, ready to be customized.")),(0,r.kt)("admonition",{title:"Tips",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"To see a possible advanced usage for custom controllers, read the ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/backend-customization/examples/services-and-controllers"},"services and controllers")," page of the backend customization examples cookbook."),(0,r.kt)("li",{parentName:"ul"},"If you want to implement unit testing to your controllers, this ",(0,r.kt)("a",{parentName:"li",href:"https://strapi.io/blog/automated-testing-for-strapi-api-with-jest-and-supertest"},"blog post")," should get you covered."))),(0,r.kt)("h3",{id:"sanitization-and-validation-in-controllers"},"Sanitization and Validation in controllers"),(0,r.kt)("p",null,"Sanitization means that the object is \u201ccleaned\u201d and returned."),(0,r.kt)("p",null,"Validation means an assertion is made that the data is already clean and throws an error if something is found that shouldn't be there."),(0,r.kt)("p",null,"In Strapi:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"validation is applied on query parameters, "),(0,r.kt)("li",{parentName:"ul"},"and only sanitization is applied to input data (create and update body data).")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"It's strongly recommended you sanitize (v4.8.0+) and/or validate (v4.13.0+) your incoming request query utilizing the new ",(0,r.kt)("inlineCode",{parentName:"p"},"sanitizeQuery")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"validateQuery")," functions to prevent the leaking of private data.")),(0,r.kt)("h4",{id:"sanitization-when-utilizing-controller-factories"},"Sanitization when utilizing controller factories"),(0,r.kt)("p",null,"Within the Strapi factories the following functions are exposed that can be used for sanitization and validation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sanitizeQuery")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ctx")),(0,r.kt)("td",{parentName:"tr",align:null},"Sanitizes the request query")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sanitizeOutput")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"entity"),"/",(0,r.kt)("inlineCode",{parentName:"td"},"entities"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ctx")),(0,r.kt)("td",{parentName:"tr",align:null},"Sanitizes the output data where entity/entities should be an object or array of data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sanitizeInput")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ctx")),(0,r.kt)("td",{parentName:"tr",align:null},"Sanitizes the input data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"validateQuery")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ctx")),(0,r.kt)("td",{parentName:"tr",align:null},"Validates the request query (throws an error on invalid params)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"validateInput")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ctx")),(0,r.kt)("td",{parentName:"tr",align:null},"(EXPERIMENTAL) Validates the input data (throws an error on invalid data)")))),(0,r.kt)("p",null,"These functions automatically inherit the sanitization settings from the model and sanitize the data accordingly based on the content-type schema and any of the content API authentication strategies, such as the Users & Permissions plugin or API tokens."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},'Because these methods use the model associated with the current controller, if you query data that is from another model (i.e., doing a find for "menus" within a "restaurant" controller method), you must instead use the ',(0,r.kt)("inlineCode",{parentName:"p"},"@strapi/utils")," tools, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"sanitize.contentAPI.query")," described in ",(0,r.kt)("a",{parentName:"p",href:"#sanitize-validate-custom-controllers"},"Sanitizing Custom Controllers"),", or else the result of your query will be sanitized against the wrong model.")),(0,r.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/controllers/restaurant.js"',title:'"./src/api/restaurant/controllers/restaurant.js"'},'const { createCoreController } = require("@strapi/strapi").factories;\n\nmodule.exports = createCoreController(\n  "api::restaurant.restaurant",\n  ({ strapi }) => ({\n    async find(ctx) {\n      await this.validateQuery(ctx);\n      const sanitizedQueryParams = await this.sanitizeQuery(ctx);\n      const { results, pagination } = await strapi\n        .service("api::restaurant.restaurant")\n        .find(sanitizedQueryParams);\n      const sanitizedResults = await this.sanitizeOutput(results, ctx);\n\n      return this.transformResponse(sanitizedResults, { pagination });\n    },\n  })\n);\n'))),(0,r.kt)(h,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/controllers/restaurant.ts"',title:'"./src/api/restaurant/controllers/restaurant.ts"'},'import { factories } from "@strapi/strapi";\n\nexport default factories.createCoreController(\n  "api::restaurant.restaurant",\n  ({ strapi }) => ({\n    async find(ctx) {\n      const sanitizedQueryParams = await this.sanitizeQuery(ctx);\n      const { results, pagination } = await strapi\n        .service("api::restaurant.restaurant")\n        .find(sanitizedQueryParams);\n      const sanitizedResults = await this.sanitizeOutput(results, ctx);\n\n      return this.transformResponse(sanitizedResults, { pagination });\n    },\n  })\n);\n')))),(0,r.kt)("h4",{id:"sanitize-validate-custom-controllers"},"Sanitization and validation when building custom controllers"),(0,r.kt)("p",null,"Within custom controllers, there are 5 primary functions exposed via the ",(0,r.kt)("inlineCode",{parentName:"p"},"@strapi/utils")," package that can be used for sanitization and validation:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sanitize.contentAPI.input")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"schema"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"auth")),(0,r.kt)("td",{parentName:"tr",align:null},'Sanitizes the request input including non-writable fields, removing restricted relations, and other nested "visitors" added by plugins')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sanitize.contentAPI.output")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"schema"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"auth")),(0,r.kt)("td",{parentName:"tr",align:null},'Sanitizes the response output including restricted relations, private fields, passwords, and other nested "visitors" added by plugins')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"sanitize.contentAPI.query")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ctx.query"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"schema"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"auth")),(0,r.kt)("td",{parentName:"tr",align:null},"Sanitizes the request query including filters, sort, fields, and populate")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"validate.contentAPI.query")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ctx.query"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"schema"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"auth")),(0,r.kt)("td",{parentName:"tr",align:null},"Validates the request query including filters, sort, fields (currently not populate)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"validate.contentAPI.input")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"schema"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"auth")),(0,r.kt)("td",{parentName:"tr",align:null},'(EXPERIMENTAL) Validates the request input including non-writable fields, removing restricted relations, and other nested "visitors" added by plugins')))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Depending on the complexity of your custom controllers, you may need additional sanitization that Strapi cannot currently account for, especially when combining the data from multiple sources.")),(0,r.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(h,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/controllers/restaurant.js"',title:'"./src/api/restaurant/controllers/restaurant.js"'},'const { sanitize, validate } = require("@strapi/utils");\n\nmodule.exports = {\n  async findCustom(ctx) {\n    const contentType = strapi.contentType("api::test.test");\n    await validate.contentAPI.query(ctx.query, contentType, {\n      auth: ctx.state.auth,\n    });\n    const sanitizedQueryParams = await sanitize.contentAPI.query(\n      ctx.query,\n      contentType,\n      { auth: ctx.state.auth }\n    );\n\n    const entities = await strapi.entityService.findMany(\n      contentType.uid,\n      sanitizedQueryParams\n    );\n\n    return await sanitize.contentAPI.output(entities, contentType, {\n      auth: ctx.state.auth,\n    });\n  },\n};\n'))),(0,r.kt)(h,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/controllers/restaurant.ts"',title:'"./src/api/restaurant/controllers/restaurant.ts"'},'import { sanitize, validate } from "@strapi/utils";\n\nexport default {\n  async findCustom(ctx) {\n    const contentType = strapi.contentType("api::test.test");\n\n    await validate.contentAPI.query(ctx.query, contentType, {\n      auth: ctx.state.auth,\n    });\n    const sanitizedQueryParams = await sanitize.contentAPI.query(\n      ctx.query,\n      contentType,\n      { auth: ctx.state.auth }\n    );\n\n    const entities = await strapi.entityService.findMany(\n      contentType.uid,\n      sanitizedQueryParams\n    );\n\n    return await sanitize.contentAPI.output(entities, contentType, {\n      auth: ctx.state.auth,\n    });\n  },\n};\n')))),(0,r.kt)("h3",{id:"extending-core-controllers"},"Extending core controllers"),(0,r.kt)("p",null,"Default controllers and actions are created for each content-type. These default controllers are used to return responses to API requests (e.g. when ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /api/articles/3")," is accessed, the ",(0,r.kt)("inlineCode",{parentName:"p"},"findOne"),' action of the default controller for the "Article" content-type is called). Default controllers can be customized to implement your own logic. The following code examples should help you get started.'),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"An action from a core controller can be replaced entirely by ",(0,r.kt)("a",{parentName:"p",href:"#adding-a-new-controller"},"creating a custom action")," and naming the action the same as the original action (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"findOne"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"update"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"delete"),").")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When extending a core controller, you do not need to re-implement any sanitization as it will already be handled by the core controller you are extending. Where possible it's strongly recommended to extend the core controller instead of creating a custom controller.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Collection type examples"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples"},"backend customization examples cookbook")," shows how you can overwrite a default controller action, for instance for the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/services-and-controllers#custom-controller"},(0,r.kt)("inlineCode",{parentName:"a"},"create")," action"),".")),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(h,{value:"find",label:"`find()`",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async find(ctx) {\n  // some logic here\n  const { data, meta } = await super.find(ctx);\n  // some more logic\n\n  return { data, meta };\n}\n"))),(0,r.kt)(h,{value:"findOne",label:"findOne()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async findOne(ctx) {\n  // some logic here\n  const response = await super.findOne(ctx);\n  // some more logic\n\n  return response;\n}\n"))),(0,r.kt)(h,{value:"create",label:"create()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async create(ctx) {\n  // some logic here\n  const response = await super.create(ctx);\n  // some more logic\n\n  return response;\n}\n"))),(0,r.kt)(h,{value:"update",label:"update()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async update(ctx) {\n  // some logic here\n  const response = await super.update(ctx);\n  // some more logic\n\n  return response;\n}\n"))),(0,r.kt)(h,{value:"delete",label:"delete()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async delete(ctx) {\n  // some logic here\n  const response = await super.delete(ctx);\n  // some more logic\n\n  return response;\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Single type examples"),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(h,{value:"find",label:"find()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async find(ctx) {\n  // some logic here\n  const response = await super.find(ctx);\n  // some more logic\n\n  return response;\n}\n"))),(0,r.kt)(h,{value:"update",label:"update()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async update(ctx) {\n  // some logic here\n  const response = await super.update(ctx);\n  // some more logic\n\n  return response;\n}\n"))),(0,r.kt)(h,{value:"delete",label:"delete()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async delete(ctx) {\n  // some logic here\n  const response = await super.delete(ctx);\n  // some more logic\n\n  return response;\n}\n"))))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Controllers are declared and attached to a route. Controllers are automatically called when the route is called, so controllers usually do not need to be called explicitly. However, ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/services"},"services")," can call controllers, and in this case the following syntax should be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// access an API controller\nstrapi.controller("api::api-name.controller-name");\n// access a plugin controller\nstrapi.controller("plugin::plugin-name.controller-name");\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To list all the available controllers, run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn strapi controllers:list"),".")))}k.isMDXComponent=!0},17155:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(83117),r=(n(67294),n(3905));const o={},i=void 0,s={unversionedId:"snippets/backend-customization-feedback-cta",id:"snippets/backend-customization-feedback-cta",title:"backend-customization-feedback-cta",description:"We are currently reworking the Backend Customization section of the Strapi documentation. If you would like to help, please feel free to fill in this form to share with us your opinions, needs and requests.",source:"@site/docs/snippets/backend-customization-feedback-cta.md",sourceDirName:"snippets",slug:"/snippets/backend-customization-feedback-cta",permalink:"/snippets/backend-customization-feedback-cta",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/backend-customization-feedback-cta.md",tags:[],version:"current",frontMatter:{}},l={},c=[],d={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"\ud83d\udcac Strapi team needs you to improve this documentation!",type:"callout"},(0,r.kt)("p",{parentName:"admonition"},"We are currently reworking the Backend Customization section of the Strapi documentation. If you would like to help, please feel free to fill in ",(0,r.kt)("a",{parentName:"p",href:"https://forms.gle/YS8zGUrG6FQ72dmh8"},"this form")," to share with us your opinions, needs and requests.")))}u.isMDXComponent=!0}}]);