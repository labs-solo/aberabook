"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[1664],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(o,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},37086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const i={title:"Server API for plugins",sidebar_label:"Server API",displayed_sidebar:"devDocsSidebar",description:"Strapi's Server API for plugins allows a Strapi plugin to customize the back end part (i.e. the server) of your application."},l="Server API for plugins",s={unversionedId:"dev-docs/api/plugins/server-api",id:"dev-docs/api/plugins/server-api",title:"Server API for plugins",description:"Strapi's Server API for plugins allows a Strapi plugin to customize the back end part (i.e. the server) of your application.",source:"@site/docs/dev-docs/api/plugins/server-api.md",sourceDirName:"dev-docs/api/plugins",slug:"/dev-docs/api/plugins/server-api",permalink:"/aberabook/dev-docs/api/plugins/server-api",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/plugins/server-api.md",tags:[],version:"current",frontMatter:{title:"Server API for plugins",sidebar_label:"Server API",displayed_sidebar:"devDocsSidebar",description:"Strapi's Server API for plugins allows a Strapi plugin to customize the back end part (i.e. the server) of your application."},sidebar:"devDocsSidebar",previous:{title:"Admin Panel API",permalink:"/aberabook/dev-docs/api/plugins/admin-panel-api"},next:{title:"Plugin CLI",permalink:"/aberabook/dev-docs/plugins/development/plugin-cli"}},o={},p=[{value:"Entry file",id:"entry-file",level:2},{value:"Lifecycle functions",id:"lifecycle-functions",level:2},{value:"register()",id:"register",level:3},{value:"bootstrap()",id:"bootstrap",level:3},{value:"destroy()",id:"destroy",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Cron",id:"cron",level:2},{value:"List cron jobs",id:"list-cron-jobs",level:3},{value:"Backend customization",id:"backend-customization",level:2},{value:"Content-types",id:"content-types",level:3},{value:"Routes",id:"routes",level:3},{value:"Controllers",id:"controllers",level:3},{value:"Services",id:"services",level:3},{value:"Policies",id:"policies",level:3},{value:"Middlewares",id:"middlewares",level:3},{value:"Usage",id:"usage",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=u("Tabs"),m=u("TabItem"),d={toc:p};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"server-api-for-plugins"},"Server API for plugins"),(0,a.kt)("p",null,"A Strapi ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/plugins"},"plugin")," can interact with both the back end and the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/api/plugins/admin-panel-api"},"front end")," of a Strapi application. The Server API is about the back-end part, i.e. how the plugin interacts with the server part of a Strapi application."),(0,a.kt)("admonition",{type:"prerequisites"},(0,a.kt)("p",{parentName:"admonition"},"You have ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/plugins/development/create-a-plugin"},"created a Strapi plugin"),".")),(0,a.kt)("p",null,"The Server API includes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"an ",(0,a.kt)("a",{parentName:"li",href:"#entry-file"},"entry file")," which export the required interface,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#lifecycle-functions"},"lifecycle functions"),","),(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("a",{parentName:"li",href:"#configuration"},"configuration")," API,"),(0,a.kt)("li",{parentName:"ul"},"the ability to add ",(0,a.kt)("a",{parentName:"li",href:"#cron"},"cron")," jobs,"),(0,a.kt)("li",{parentName:"ul"},"and the ability to ",(0,a.kt)("a",{parentName:"li",href:"#backend-customization"},"customize all elements of the back-end server"),".")),(0,a.kt)("p",null,"Once you have declared and exported the plugin interface, you will be able to ",(0,a.kt)("a",{parentName:"p",href:"#usage"},"use the plugin interface"),"."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The whole code for the server part of your plugin could live in the ",(0,a.kt)("inlineCode",{parentName:"p"},"/strapi-server.js|ts")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"/server/index.js|ts")," file. However, it's recommended to split the code into different folders, just like the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/plugins/development/plugin-structure"},"structure")," created by the ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi generate plugin")," CLI generator command.")),(0,a.kt)("h2",{id:"entry-file"},"Entry file"),(0,a.kt)("p",null,"To tap into the Server API, create a ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-server.js")," file at the root of the plugin package folder. This file exports the required interface, with the following parameters available:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter type"),(0,a.kt)("th",{parentName:"tr",align:null},"Available parameters"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Lifecycle functions"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("ul",null,(0,a.kt)("li",null," ",(0,a.kt)("a",{parentName:"td",href:"#register"},"register")),(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#bootstrap"},"bootstrap")),(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#destroy"},"destroy"))))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Configuration"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#configuration"},"config")," object   ")," ",(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#cron"},"Cron"))))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Backend customizations"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#content-types"},"contentTypes")),(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#routes"},"routes")),(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#controllers"},"controllers")),(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#services"},"services")),(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#policies"},"policies")),(0,a.kt)("li",null,(0,a.kt)("a",{parentName:"td",href:"#middlewares"},"middlewares"))))))),(0,a.kt)("h2",{id:"lifecycle-functions"},"Lifecycle functions"),(0,a.kt)("h3",{id:"register"},"register()"),(0,a.kt)("p",null,"This function is called to load the plugin, before the application is ",(0,a.kt)("a",{parentName:"p",href:"#bootstrap"},"bootstrapped"),", in order to register ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/plugins/users-permissions"},"permissions"),", the server part of ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/custom-fields#registering-a-custom-field-on-the-server"},"custom fields"),", or database migrations."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Function")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},"\nmodule.exports = () => ({\n  register({ strapi }) {\n    // execute some register code\n  },\n});\n")),(0,a.kt)("h3",{id:"bootstrap"},"bootstrap()"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/functions#bootstrap"},"bootstrap")," function is called right after the plugin has ",(0,a.kt)("a",{parentName:"p",href:"#register"},"registered"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Function")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},"\nmodule.exports = () => ({\n  bootstrap({ strapi }) {\n    // execute some bootstrap code\n  },\n});\n")),(0,a.kt)("h3",{id:"destroy"},"destroy()"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/functions#destroy"},"destroy")," lifecycle function is called to cleanup the plugin (close connections, remove listeners, etc.) when the Strapi instance is destroyed."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Function")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},"\nmodule.exports = () => ({\n  destroy({ strapi }) {\n    // execute some destroy code\n  },\n});\n")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"config")," stores the default plugin configuration. It loads and validates the configuration inputted from the user within the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/plugins"},(0,a.kt)("inlineCode",{parentName:"a"},"./config/plugins.js")," configuration file"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"default")),(0,a.kt)("td",{parentName:"tr",align:null},"Object, or Function that returns an Object"),(0,a.kt)("td",{parentName:"tr",align:null},"Default plugin configuration, merged with the user configuration")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"validator")),(0,a.kt)("td",{parentName:"tr",align:null},"Function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("ul",null,(0,a.kt)("li",null,"Checks if the results of merging the default plugin configuration with the user configuration is valid"),(0,a.kt)("li",null,"Throws errors when the resulting configuration is invalid")))))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js or ./src/plugins/my-plugin/server/index.js"',title:'"./src/plugins/my-plugin/strapi-server.js',or:!0,'./src/plugins/my-plugin/server/index.js"':!0},"\nconst config = require('./config');\n\nmodule.exports = () => ({\n  config: {\n    default: ({ env }) => ({ optionA: true }),\n    validator: (config) => { \n      if (typeof config.optionA !== 'boolean') {\n        throw new Error('optionA has to be a boolean');\n      }\n    },\n  },\n});\n")),(0,a.kt)("p",null,"Once defined, the configuration can be accessed:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"with ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi.plugin('plugin-name').config('some-key')")," for a specific configuration property,"),(0,a.kt)("li",{parentName:"ul"},"or with ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi.config.get('plugin.plugin-name')")," for the whole configuration object.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Run ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn strapi console")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run strapi console")," to access the strapi object in a live console.")),(0,a.kt)("h2",{id:"cron"},"Cron"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"cron")," object allows you to add cron jobs to the Strapi instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},'module.exports = () => ({\n  bootstrap({ strapi }) {\n    strapi.cron.add({\n      // runs every second\n      myJob: {\n        task: ({ strapi }) => {\n          console.log("hello from plugin");\n        },\n        options: {\n          rule: "* * * * * *",\n        },\n      },\n    });\n  },\n});\n')),(0,a.kt)("p",null,"To remove a CRON job you can call the remove function on the ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi.cron")," object and pass in the key corresponding to the CRON job you want to remove."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Cron jobs that are using the key as the rule can not be removed.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'strapi.cron.remove("myJob");\n')),(0,a.kt)("h3",{id:"list-cron-jobs"},"List cron jobs"),(0,a.kt)("p",null,"To list all the cron jobs that are currently running you can call the ",(0,a.kt)("inlineCode",{parentName:"p"},"jobs")," array on the ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi.cron")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"strapi.cron.jobs\n")),(0,a.kt)("h2",{id:"backend-customization"},"Backend customization"),(0,a.kt)("p",null,"All elements of the back-end server of Strapi can be customized through a plugin using the Server API."),(0,a.kt)("admonition",{type:"prerequisites"},(0,a.kt)("p",{parentName:"admonition"},"To better understand this section, ensure you have read through the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization"},"back-end customization")," documentation of a Strapi application.")),(0,a.kt)("h3",{id:"content-types"},"Content-types"),(0,a.kt)("p",null,"An object with the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models"},"content-types")," the plugin provides."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Content-Types keys in the ",(0,a.kt)("inlineCode",{parentName:"p"},"contentTypes")," object should re-use the ",(0,a.kt)("inlineCode",{parentName:"p"},"singularName")," defined in the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#model-information"},(0,a.kt)("inlineCode",{parentName:"a"},"info"))," key of the schema.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},"\n\"use strict\";\n\nmodule.exports = require('./server');\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./src/plugins/my-plugin/server/index.js"',title:'"path:','./src/plugins/my-plugin/server/index.js"':!0},"\nconst contentTypes = require('./content-types');\n\nmodule.exports = () => ({\n  contentTypes,\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./src/plugins/my-plugin/server/content-types/index.js"',title:'"path:','./src/plugins/my-plugin/server/content-types/index.js"':!0},"\nconst contentTypeA = require('./content-type-a');\nconst contentTypeB = require('./content-type-b');\n\nmodule.exports = {\n  'content-type-a': { schema: contentTypeA }, // should re-use the singularName of the content-type\n  'content-type-b': { schema: contentTypeB },\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./src/plugins/my-plugin/server/content-types/content-type-a.js"',title:'"path:','./src/plugins/my-plugin/server/content-types/content-type-a.js"':!0},"\nmodule.exports = {\n  kind: 'collectionType',\n  collectionName: 'content-type',\n  info: {\n    singularName: 'content-type-a', // kebab-case mandatory\n    pluralName: 'content-type-as', // kebab-case mandatory\n    displayName: 'Content Type A',\n    description: 'A regular content-type',\n  },\n  options: {\n    draftAndPublish: true,\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    }\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      min: 1,\n      max: 50,\n      configurable: false,\n    },\n  }\n};\n")),(0,a.kt)("h3",{id:"routes"},"Routes"),(0,a.kt)("p",null,"An array of ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/routes"},"routes")," configuration."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Object[]")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)(c,{mdxType:"Tabs"},(0,a.kt)(m,{value:"content-api",label:"Content API routes only",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./src/plugins/my-plugin/strapi-server.js"',title:'"path:','./src/plugins/my-plugin/strapi-server.js"':!0},"\n\"use strict\";\n\nmodule.exports = require('./server');\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./src/plugins/my-plugin/server/index.js"',title:'"path:','./src/plugins/my-plugin/server/index.js"':!0},"\nconst routes = require('./routes');\n\nmodule.exports = () => ({\n  routes,\n  type: 'content-api', // can also be 'admin' depending on the type of route\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./src/plugins/my-plugin/server/routes/index.js"',title:'"path:','./src/plugins/my-plugin/server/routes/index.js"':!0},"\nmodule.exports = [\n  {\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['policyName'],\n    },\n  },\n];\n"))),(0,a.kt)(m,{value:"both",label:"Content API and admin routes",mdxType:"TabItem"},(0,a.kt)("p",null,"It is also possible to combine both admin and Content API routes if you need different policies on these: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/routes/index.js"',title:'"./src/plugins/my-plugin/server/routes/index.js"'},"\nmodule.exports = {\n  admin: require('./admin'),\n  'content-api': require('./content-api'),\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/routes/admin/index.js"',title:'"./src/plugins/my-plugin/server/routes/admin/index.js"'},"\nmodule.exports = {\n  type: 'admin',\n  routes: [{\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['policyName'],\n    },\n  }],\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/routes/content-api/index.js"',title:'"./src/plugins/my-plugin/server/routes/content-api/index.js"'},"\nmodule.exports = {\n  type: 'content-api',\n  routes: [{\n    method: 'GET',\n    path: '/model',\n    handler: 'controllerName.action',\n    config: {\n      policies: ['differentPolicyName'],\n    },\n  }],\n};\n")))),(0,a.kt)("h3",{id:"controllers"},"Controllers"),(0,a.kt)("p",null,"An object with the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/controllers"},"controllers")," the plugin provides."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},"\n\"use strict\";\n\nmodule.exports = require('./server');\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/index.js"',title:'"./src/plugins/my-plugin/server/index.js"'},"\nconst controllers = require('./controllers');\n\nmodule.exports = () => ({\n  controllers,\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/controllers/index.js"',title:'"./src/plugins/my-plugin/server/controllers/index.js"'},"\nconst controllerA = require('./controller-a');\nconst controllerB = require('./controller-b');\n\nmodule.exports = {\n  controllerA,\n  controllerB,\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/controllers/controller-a.js"',title:'"./src/plugins/my-plugin/server/controllers/controller-a.js"'},"\nmodule.exports = ({ strapi }) => ({\n  doSomething(ctx) {\n    ctx.body = { message: 'HelloWorld' };\n  },\n});\n")),(0,a.kt)("h3",{id:"services"},"Services"),(0,a.kt)("p",null,"An object with the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/services"},"services")," the plugin provides."),(0,a.kt)("p",null,"Services should be functions taking ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi")," as a parameter."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},"\n\"use strict\";\n\nmodule.exports = require('./server');\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/index.js"',title:'"./src/plugins/my-plugin/server/index.js"'},"\nconst services = require('./services');\n\nmodule.exports = () => ({\n  services,\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/services/index.js"',title:'"./src/plugins/my-plugin/server/services/index.js"'},"\nconst serviceA = require('./service-a');\nconst serviceB = require('./service-b');\n\nmodule.exports = {\n  serviceA,\n  serviceB,\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/services/service-a.js"',title:'"./src/plugins/my-plugin/server/services/service-a.js"'},"\nmodule.exports = ({ strapi }) => ({\n  someFunction() {\n    return [1, 2, 3];\n  },\n});\n")),(0,a.kt)("h3",{id:"policies"},"Policies"),(0,a.kt)("p",null,"An object with the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/policies"},"policies")," the plugin provides."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},"\n\"use strict\";\n\nmodule.exports = require('./server');\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/index.js"',title:'"./src/plugins/my-plugin/server/index.js"'},"\nconst policies = require('./policies');\n\nmodule.exports = () => ({\n  policies,\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/policies/index.js"',title:'"./src/plugins/my-plugin/server/policies/index.js"'},"\nconst policyA = require('./policy-a');\nconst policyB = require('./policy-b');\n\nmodule.exports = {\n  policyA,\n  policyB,\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/policies/policy-a.js"',title:'"./src/plugins/my-plugin/server/policies/policy-a.js"'},"\nmodule.exports = (policyContext, config, { strapi }) => {\n    if (ctx.state.user && ctx.state.user.isActive) {\n      return true;\n    }\n\n    return false;\n};\n")),(0,a.kt)("h3",{id:"middlewares"},"Middlewares"),(0,a.kt)("p",null,"An object with the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/middlewares"},"middlewares")," the plugin provides."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/middlewares/your-middleware.js"',title:'"./src/plugins/my-plugin/server/middlewares/your-middleware.js"'},"\n/** \n * The your-middleware.js file \n * declares a basic middleware function and exports it.\n */\n'use strict';\nmodule.exports = async (ctx, next) => {\n  console.log(\"your custom logic\")\n  await next();\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/middlewares/index.js"',title:'"./src/plugins/my-plugin/server/middlewares/index.js"'},"\n/**\n * The middleware function previously created\n * is imported from its file and\n * exported by the middlewares index.\n */\n'use strict';\nconst yourMiddleware = require('./your-middleware');\n\nmodule.exports = {\n  yourMiddleware\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/register.js"',title:'"./src/plugins/my-plugin/server/register.js"'},"\n/**\n * The middleware is called from \n * the plugin's register lifecycle function.\n */\n'use strict';\nconst middlewares = require('./middlewares');\n\nmodule.exports = ({ strapi }) => {\n  strapi.server.use(middlewares.yourMiddleware);\n};\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Once a plugin is exported and loaded into Strapi, its features are accessible in the code through getters. The Strapi instance (",(0,a.kt)("inlineCode",{parentName:"p"},"strapi"),") exposes both top-level getters and global getters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"top-level getters imply chaining functions",(0,a.kt)("br",null),"(e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi.plugin('the-plugin-name').controller('the-controller-name'"),"),"),(0,a.kt)("li",{parentName:"ul"},"global getters are syntactic sugar that allows direct access using a feature's uid",(0,a.kt)("br",null),"(e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi.controller('plugin::plugin-name.controller-name')"),").")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Access an API or a plugin controller using a top-level getter \nstrapi.api['api-name'].controller('controller-name')\nstrapi.plugin('plugin-name').controller('controller-name')\n\n// Access an API or a plugin controller using a global getter\nstrapi.controller('api::api-name.controller-name')\nstrapi.controller('plugin::plugin-name.controller-name')\n")),(0,a.kt)("details",null,(0,a.kt)("summary",null," Top-level getter syntax examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"strapi.plugin('plugin-name').config\nstrapi.plugin('plugin-name').routes\nstrapi.plugin('plugin-name').controller('controller-name')\nstrapi.plugin('plugin-name').service('service-name')\nstrapi.plugin('plugin-name').contentType('content-type-name')\nstrapi.plugin('plugin-name').policy('policy-name')\nstrapi.plugin('plugin-name').middleware('middleware-name')\n"))),(0,a.kt)("details",null,(0,a.kt)("summary",null," Global getter syntax examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"strapi.controller('plugin::plugin-name.controller-name');\nstrapi.service('plugin::plugin-name.service-name');\nstrapi.contentType('plugin::plugin-name.content-type-name');\nstrapi.policy('plugin::plugin-name.policy-name');\nstrapi.middleware('plugin::plugin-name.middleware-name');\n"))),(0,a.kt)("p",null,":::strapi Entity Service API\nTo interact with the content-types, use the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service API"),".\n:::"))}g.isMDXComponent=!0}}]);