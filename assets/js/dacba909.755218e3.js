"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[39],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>u});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,y=m["".concat(d,".").concat(u)]||m[u]||l[u]||r;return t?a.createElement(y,i(i({ref:n},s),{},{components:t})):a.createElement(y,i({ref:n},s))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var c={};for(var d in n)hasOwnProperty.call(n,d)&&(c[d]=n[d]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},29333:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var a=t(83117),o=(t(67294),t(3905));const r={title:"Components and Dynamic Zones",description:"Use Strapi's Entity Service to create and update components and dynamic zones.",displayed_sidebar:"devDocsSidebar"},i="Components and dynamic zones",c={unversionedId:"dev-docs/api/entity-service/components-dynamic-zones",id:"dev-docs/api/entity-service/components-dynamic-zones",title:"Components and Dynamic Zones",description:"Use Strapi's Entity Service to create and update components and dynamic zones.",source:"@site/docs/dev-docs/api/entity-service/components-dynamic-zones.md",sourceDirName:"dev-docs/api/entity-service",slug:"/dev-docs/api/entity-service/components-dynamic-zones",permalink:"/aberabook/dev-docs/api/entity-service/components-dynamic-zones",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/entity-service/components-dynamic-zones.md",tags:[],version:"current",frontMatter:{title:"Components and Dynamic Zones",description:"Use Strapi's Entity Service to create and update components and dynamic zones.",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Ordering & Pagination",permalink:"/aberabook/dev-docs/api/entity-service/order-pagination"},next:{title:"Query Engine API",permalink:"/aberabook/dev-docs/api/query-engine"}},d={},p=[{value:"Creation",id:"creation",level:2},{value:"Update",id:"update",level:2}],s={toc:p};function l(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"components-and-dynamic-zones"},"Components and dynamic zones"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service")," is the layer that handles ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#components"},"components")," and ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#dynamic-zones"},"dynamic zones")," logic. With the Entity Service API, components and dynamic zones can be ",(0,o.kt)("a",{parentName:"p",href:"#creation"},"created")," and ",(0,o.kt)("a",{parentName:"p",href:"#update"},"updated")," while creating or updating entries."),(0,o.kt)("h2",{id:"creation"},"Creation"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#components"},"component")," can be created while creating an entry with the Entity Service API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.create('api::article.article', {\n  data: {\n    myComponent: {\n      foo: 'bar',\n    },\n  },\n});\n")),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#dynamic-zones"},"dynamic zone")," (i.e. a list of components) can be created while creating an entry with the Entity Service API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.create('api::article.article', {\n  data: {\n    myDynamicZone: [\n      {\n        __component: 'compo.type',\n        foo: 'bar',\n      },\n      {\n        __component: 'compo.type2',\n        foo: 'bar',\n      },\n    ],\n  },\n});\n")),(0,o.kt)("h2",{id:"update"},"Update"),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#components"},"component")," can be updated while updating an entry with the Entity Service API. If a component ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," is specified, the component is updated, otherwise the old one is deleted and a new one is created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.update('api::article.article', 1, {\n  data: {\n    myComponent: {\n      id: 1, // will update component with id: 1 (if not specified, would have deleted it and created a new one)\n      foo: 'bar',\n    },\n  },\n});\n")),(0,o.kt)("p",null,"A ",(0,o.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/models#dynamic-zones"},"dynamic zone")," (i.e. a list of components) can be updated while updating an entry with the Entity Service API. If a component ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," is specified, the component is updated, otherwise the old one is deleted and a new one is created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"strapi.entityService.update('api::article.article', 1, {\n  data: {\n    myDynamicZone: [\n      {\n        // will update\n        id: 2,\n        __component: 'compo.type',\n        foo: 'bar',\n      },\n      {\n        // will add a new & delete old ones\n        __component: 'compo.type2',\n        foo: 'bar2',\n      },\n    ],\n  },\n});\n")))}l.isMDXComponent=!0}}]);