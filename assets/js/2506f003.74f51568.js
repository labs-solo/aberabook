"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[3251],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},35924:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(83117),r=(n(67294),n(3905));const i={title:"Populating",description:"Use Strapi's Entity Service API to populate relations in your queries.",displayed_sidebar:"devDocsSidebar"},o="Populating",p={unversionedId:"dev-docs/api/entity-service/populate",id:"dev-docs/api/entity-service/populate",title:"Populating",description:"Use Strapi's Entity Service API to populate relations in your queries.",source:"@site/docs/dev-docs/api/entity-service/populate.md",sourceDirName:"dev-docs/api/entity-service",slug:"/dev-docs/api/entity-service/populate",permalink:"/aberabook/dev-docs/api/entity-service/populate",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/entity-service/populate.md",tags:[],version:"current",frontMatter:{title:"Populating",description:"Use Strapi's Entity Service API to populate relations in your queries.",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Filtering",permalink:"/aberabook/dev-docs/api/entity-service/filter"},next:{title:"Ordering & Pagination",permalink:"/aberabook/dev-docs/api/entity-service/order-pagination"}},l={},s=[{value:"Basic populating",id:"basic-populating",level:2},{value:"Advanced populating",id:"advanced-populating",level:2},{value:"Populate fragments",id:"populate-fragments",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"populating"},"Populating"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service API")," does not populate relations, components or dynamic zones by default."),(0,r.kt)("h2",{id:"basic-populating"},"Basic populating"),(0,r.kt)("p",null,"To populate all the root level relations, use ",(0,r.kt)("inlineCode",{parentName:"p"},"populate: '*'"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.entityService.findMany('api::article.article', {\n  populate: '*',\n});\n")),(0,r.kt)("p",null,"Populate various component or relation fields by passing an array of attribute names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.entityService.findMany('api::article.article', {\n  populate: ['componentA', 'relationA'],\n});\n")),(0,r.kt)("h2",{id:"advanced-populating"},"Advanced populating"),(0,r.kt)("p",null,"An object can be passed for more advanced populating:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.entityService.findMany('api::article.article', {\n  populate: {\n    relationA: true,\n    repeatableComponent: {\n      fields: ['fieldA'],\n      filters: {},\n      sort: 'fieldA:asc',\n      populate: {\n        relationB: true,\n      },\n    },\n  },\n});\n")),(0,r.kt)("p",null,"Complex populating can be achieved by using the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service/filter"},(0,r.kt)("inlineCode",{parentName:"a"},"filters")," parameter")," and select or populate nested relations or components:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.entityService.findMany('api::article.article', {\n  populate: {\n    relationA: {\n      filters: {\n        name: {\n          $contains: 'Strapi',\n        },\n      },\n    },\n\n    repeatableComponent: {\n      fields: ['someAttributeName'],\n      sort: ['someAttributeName'],\n      populate: {\n        componentRelationA: true,\n      },\n    },\n  },\n});\n")),(0,r.kt)("h2",{id:"populate-fragments"},"Populate fragments"),(0,r.kt)("p",null,"When dealing with polymorphic data structures (dynamic zones, polymorphic relations, etc...), it is possible to use populate fragments to have a better granularity on the populate strategy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.entityService.findMany('api::article.article', {\n  populate: {\n    dynamicZone: {\n      on: {\n        'components.foo': {\n          fields: ['title'],\n          filters: { title: { $contains: 'strapi' } },\n        },\n        'components.bar': {\n          fields: ['name'],\n        },\n      },\n    },\n\n    morphAuthor: {\n      on: {\n        'plugin::users-permissions.user': {\n          fields: ['username'],\n        },\n        'api::author.author': {\n          fields: ['name'],\n        },\n      },\n    },\n  },\n});\n")))}u.isMDXComponent=!0}}]);