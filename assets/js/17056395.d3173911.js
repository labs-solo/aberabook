"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[3540,6480],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(a),m=r,v=d["".concat(c,".").concat(m)]||d[m]||u[m]||s;return a?n.createElement(v,i(i({ref:t},p),{},{components:a})):n.createElement(v,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},50025:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var n=a(83117),r=(a(67294),a(3905));a(17155);const s={title:"Services",description:"Strapi services are a set of reusable functions, useful to simplify controllers logic.",displayed_sidebar:"devDocsSidebar"},i="Services",o={unversionedId:"dev-docs/backend-customization/services",id:"dev-docs/backend-customization/services",title:"Services",description:"Strapi services are a set of reusable functions, useful to simplify controllers logic.",source:"@site/docs/dev-docs/backend-customization/services.md",sourceDirName:"dev-docs/backend-customization",slug:"/dev-docs/backend-customization/services",permalink:"/aberabook/dev-docs/backend-customization/services",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/backend-customization/services.md",tags:[],version:"current",frontMatter:{title:"Services",description:"Strapi services are a set of reusable functions, useful to simplify controllers logic.",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Controllers",permalink:"/aberabook/dev-docs/backend-customization/controllers"},next:{title:"Models",permalink:"/aberabook/dev-docs/backend-customization/models"}},c={},l={width:"100%",margin:"0"},p={fontSize:"12px"},u=[{value:"Implementation",id:"implementation",level:2},{value:"Adding a new service",id:"adding-a-new-service",level:3},{value:"Extending core services",id:"extending-core-services",level:3},{value:"Usage",id:"usage",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=d("Tabs"),v=d("TabItem"),f={toc:u};function g(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"services"},"Services"),(0,r.kt)("p",null,'Services are a set of reusable functions. They are particularly useful to respect the "don\u2019t repeat yourself" (DRY) programming concept and to simplify ',(0,r.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/backend-customization/controllers"},"controllers")," logic."),(0,r.kt)("figure",{style:l},(0,r.kt)("img",{src:"/img/assets/backend-customization/diagram-controllers-services.png",alt:"Simplified Strapi backend diagram with services highlighted"}),(0,r.kt)("em",null,(0,r.kt)("figcaption",{style:p},"The diagram represents a simplified version of how a request travels through the Strapi back end, with services highlighted. The backend customization introduction page includes a complete, ",(0,r.kt)("a",{href:"/dev-docs/backend-customization#interactive-diagram"},"interactive diagram"),"."))),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("p",null,"Services can be ",(0,r.kt)("a",{parentName:"p",href:"#adding-a-new-service"},"generated or added manually"),". Strapi provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"createCoreService")," factory function that automatically generates core services and allows building custom ones or ",(0,r.kt)("a",{parentName:"p",href:"#extending-core-services"},"extend or replace the generated services"),"."),(0,r.kt)("h3",{id:"adding-a-new-service"},"Adding a new service"),(0,r.kt)("p",null,"A new service can be implemented:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"with the ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/cli#strapi-generate"},"interactive CLI command ",(0,r.kt)("inlineCode",{parentName:"a"},"strapi generate"))),(0,r.kt)("li",{parentName:"ul"},"or manually by creating a JavaScript file in the appropriate folder (see ",(0,r.kt)("a",{parentName:"li",href:"/aberabook/dev-docs/project-structure"},"project structure"),"):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"./src/api/[api-name]/services/")," for API services"),(0,r.kt)("li",{parentName:"ul"},"or ",(0,r.kt)("inlineCode",{parentName:"li"},"./src/plugins/[plugin-name]/services/")," for ",(0,r.kt)("a",{parentName:"li",href:"/dev-docs/api/plugins/server-api#services"},"plugin services"),".")))),(0,r.kt)("p",null,"To manually create a service, export a factory function that returns the service implementation (i.e. an object with methods). This factory function receives the ",(0,r.kt)("inlineCode",{parentName:"p"},"strapi")," instance:"),(0,r.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(v,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/services/restaurant.js"',title:'"./src/api/restaurant/services/restaurant.js"'},"\nconst { createCoreService } = require('@strapi/strapi').factories;\n\nmodule.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // Method 1: Creating an entirely new custom service\n  async exampleService(...args) {\n    let response = { okay: true }\n\n    if (response.okay === false) {\n      return { response, error: true }\n    }\n\n    return response\n  },\n\n  // Method 2: Wrapping a core service (leaves core logic in place)\n  async find(...args) {  \n    // Calling the default core controller\n    const { results, pagination } = await super.find(...args);\n\n    // some custom logic\n    results.forEach(result => {\n      result.counter = 1;\n    });\n\n    return { results, pagination };\n  },\n\n  // Method 3: Replacing a core service\n  async findOne(entityId, params = {}) {\n    return strapi.entityService.findOne('api::restaurant.restaurant', entityId, this.getFetchParams(params));\n  }\n}));\n"))),(0,r.kt)(v,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/services/restaurant.ts"',title:'"./src/api/restaurant/services/restaurant.ts"'},"\nimport { factories } from '@strapi/strapi'; \n\nexport default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // Method 1: Creating an entirely custom service\n  async exampleService(...args) {\n    let response = { okay: true }\n\n    if (response.okay === false) {\n      return { response, error: true }\n    }\n\n    return response\n  },\n\n  // Method 2: Wrapping a core service (leaves core logic in place)\n  async find(...args) {  \n    // Calling the default core controller\n    const { results, pagination } = await super.find(...args);\n\n    // some custom logic\n    results.forEach(result => {\n      result.counter = 1;\n    });\n\n    return { results, pagination };\n  },\n\n  // Method 3: Replacing a core service\n  async findOne(entityId, params = {}) {\n    return strapi.entityService.findOne('api::restaurant.restaurant', entityId, this.getFetchParams(params));\n  }\n}));\n")))),(0,r.kt)("p",null,":::strapi Entity Service API\nTo get started creating your own services, see Strapi's built-in functions in the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service API")," documentation.\n:::"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example of a custom email service (using Nodemailer)"),(0,r.kt)("p",null,"The goal of a service is to store reusable functions. A ",(0,r.kt)("inlineCode",{parentName:"p"},"sendNewsletter")," service could be useful to send emails from different functions in our codebase that have a specific purpose:"),(0,r.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(v,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/services/restaurant.js"',title:'"./src/api/restaurant/services/restaurant.js"'},"\n\nconst { createCoreService } = require('@strapi/strapi').factories;\nconst nodemailer = require('nodemailer'); // Requires nodemailer to be installed (npm install nodemailer)\n\n// Create reusable transporter object using SMTP transport.\nconst transporter = nodemailer.createTransport({\n  service: 'Gmail',\n  auth: {\n    user: 'user@gmail.com',\n    pass: 'password',\n  },\n});\n\nmodule.exports = createCoreService('api::restaurant.restaurant', ({ strapi }) => ({\n  sendNewsletter(from, to, subject, text) {\n    // Setup e-mail data.\n    const options = {\n      from,\n      to,\n      subject,\n      text,\n    };\n\n    // Return a promise of the function that sends the email.\n    return transporter.sendMail(options);\n  },\n}));\n"))),(0,r.kt)(v,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/services/restaurant.ts"',title:'"./src/api/restaurant/services/restaurant.ts"'},"\n\nimport { factories } from '@strapi/strapi'; \nconst nodemailer = require('nodemailer'); // Requires nodemailer to be installed (npm install nodemailer)\n\n// Create reusable transporter object using SMTP transport.\nconst transporter = nodemailer.createTransport({\n  service: 'Gmail',\n  auth: {\n    user: 'user@gmail.com',\n    pass: 'password',\n  },\n});\n\nexport default factories.createCoreService('api::restaurant.restaurant', ({ strapi }) => ({\n  sendNewsletter(from, to, subject, text) {\n    // Setup e-mail data. \n    const options = {\n      from,\n      to,\n      subject,\n      text,\n    };\n\n    // Return a promise of the function that sends the email.\n    return transporter.sendMail(options);\n  },\n}));\n")))),(0,r.kt)("p",null,"The service is now available through the ",(0,r.kt)("inlineCode",{parentName:"p"},"strapi.service('api::restaurant.restaurant').sendNewsletter(...args)")," global variable. It can be used in another part of the codebase, like in the following controller:"),(0,r.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(v,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/controllers/restaurant.js"',title:'"./src/api/restaurant/controllers/restaurant.js"'},"\nmodule.exports = createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // GET /hello\n  async signup(ctx) {\n    const { userData } = ctx.body;\n\n    // Store the new user in database.\n    const user = await strapi.service('plugin::users-permissions.user').add(userData);\n\n    // Send an email to validate his subscriptions.\n    strapi.service('api::restaurant.restaurant').sendNewsletter('welcome@mysite.com', user.email, 'Welcome', '...');\n\n    // Send response to the server.\n    ctx.send({\n      ok: true,\n    });\n  },\n}));\n"))),(0,r.kt)(v,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/controllers/restaurant.ts"',title:'"./src/api/restaurant/controllers/restaurant.ts"'},"\nexport default factories.createCoreController('api::restaurant.restaurant', ({ strapi }) =>  ({\n  // GET /hello\n  async signup(ctx) {\n    const { userData } = ctx.body;\n\n    // Store the new user in database.\n    const user = await strapi.service('plugin::users-permissions.user').add(userData);\n\n    // Send an email to validate his subscriptions.\n    strapi.service('api::restaurant.restaurant').sendNewsletter('welcome@mysite.com', user.email, 'Welcome', '...');\n\n    // Send response to the server.\n    ctx.send({\n      ok: true,\n    });\n  },\n}));\n"))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"When a new ",(0,r.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/backend-customization/models#content-types"},"content-type")," is created, Strapi builds a generic service with placeholder code, ready to be customized.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To see a possible advanced usage for custom services, read the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/services-and-controllers"},"services and controllers")," page of the backend customization examples cookbook.")),(0,r.kt)("h3",{id:"extending-core-services"},"Extending core services"),(0,r.kt)("p",null,"Core services are created for each content-type and could be used by ",(0,r.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/backend-customization/controllers"},"controllers")," to execute reusable logic through a Strapi project. Core services can be customized to implement your own logic. The following code examples should help you get started."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"A core service can be replaced entirely by ",(0,r.kt)("a",{parentName:"p",href:"#adding-a-new-service"},"creating a custom service")," and naming it the same as the core service (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"findOne"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"update"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"delete"),").")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Collection type examples"),(0,r.kt)(m,{groupdId:"crud-methods",mdxType:"Tabs"},(0,r.kt)(v,{value:"find",label:"find()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async find(params) {\n  // some logic here\n  const { results, pagination } = await super.find(params);\n  // some more logic\n\n  return { results, pagination };\n}\n"))),(0,r.kt)(v,{value:"find-one",label:"findOne()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async findOne(entityId, params) {\n  // some logic here\n  const result = await super.findOne(entityId, params);\n  // some more logic\n\n  return result;\n}\n"))),(0,r.kt)(v,{value:"create",label:"create()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async create(params) {\n  // some logic here\n  const result = await super.create(params);\n  // some more logic\n\n  return result;\n}\n"))),(0,r.kt)(v,{value:"update",label:"update()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async update(entityId, params) {\n  // some logic here\n  const result = await super.update(entityId, params);\n  // some more logic\n\n  return result;\n}\n"))),(0,r.kt)(v,{value:"delete",label:"delete()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async delete(entityId, params) {\n  // some logic here\n  const result = await super.delete(entityId, params);\n  // some more logic\n\n  return result;\n}\n"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Single type examples"),(0,r.kt)(m,{groupdId:"crud-methods",mdxType:"Tabs"},(0,r.kt)(v,{value:"find",label:"find()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async find(params) {\n  // some logic here\n  const entity = await super.find(params);\n  // some more logic\n\n  return entity;\n}\n"))),(0,r.kt)(v,{value:"update",label:"update()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async createOrUpdate({ data, ...params }) {\n  // some logic here\n  const entity = await super.createOrUpdate({ data, ...params });\n  // some more logic\n\n  return entity;\n}\n"))),(0,r.kt)(v,{value:"delete",label:"delete()",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"async delete(params) {\n  // some logic here\n  const entity = await super.delete(params);\n  // some more logic\n\n  return entity;\n}\n"))))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"find()")," method from core services can use both types of pagination, by page of by offset (see ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/sort-pagination#pagination"},"REST API"),").")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Once a service is created, it's accessible from ",(0,r.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/backend-customization/controllers"},"controllers")," or from other services:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// access an API service\nstrapi.service('api::apiName.serviceName').FunctionName();\n// access a plugin service\nstrapi.service('plugin::pluginName.serviceName').FunctionName();\n")),(0,r.kt)("p",null,"In the syntax examples above, ",(0,r.kt)("inlineCode",{parentName:"p"},"serviceName")," is the name of the service file for API services or the name used to export the service file to ",(0,r.kt)("inlineCode",{parentName:"p"},"services/index.js")," for plugin services."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To list all the available services, run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn strapi services:list"),".")))}g.isMDXComponent=!0},17155:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=a(83117),r=(a(67294),a(3905));const s={},i=void 0,o={unversionedId:"snippets/backend-customization-feedback-cta",id:"snippets/backend-customization-feedback-cta",title:"backend-customization-feedback-cta",description:"We are currently reworking the Backend Customization section of the Strapi documentation. If you would like to help, please feel free to fill in this form to share with us your opinions, needs and requests.",source:"@site/docs/snippets/backend-customization-feedback-cta.md",sourceDirName:"snippets",slug:"/snippets/backend-customization-feedback-cta",permalink:"/aberabook/snippets/backend-customization-feedback-cta",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/backend-customization-feedback-cta.md",tags:[],version:"current",frontMatter:{}},c={},l=[],p={toc:l};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"\ud83d\udcac Strapi team needs you to improve this documentation!",type:"callout"},(0,r.kt)("p",{parentName:"admonition"},"We are currently reworking the Backend Customization section of the Strapi documentation. If you would like to help, please feel free to fill in ",(0,r.kt)("a",{parentName:"p",href:"https://forms.gle/YS8zGUrG6FQ72dmh8"},"this form")," to share with us your opinions, needs and requests.")))}u.isMDXComponent=!0}}]);