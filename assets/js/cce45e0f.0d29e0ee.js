"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[6237],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||s;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},51786:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>b,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const s={title:"Svelte",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Svelte."},o="Getting Started with Svelte",l={unversionedId:"dev-docs/integrations/svelte",id:"dev-docs/integrations/svelte",title:"Svelte",description:"Integrate Strapi with Svelte.",source:"@site/docs/dev-docs/integrations/svelte.md",sourceDirName:"dev-docs/integrations",slug:"/dev-docs/integrations/svelte",permalink:"/aberabook/dev-docs/integrations/svelte",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/integrations/svelte.md",tags:[],version:"current",frontMatter:{title:"Svelte",displayed_sidebar:"devDocsSidebar",description:"Integrate Strapi with Svelte."},sidebar:"devDocsSidebar",previous:{title:"Sapper",permalink:"/aberabook/dev-docs/integrations/sapper"},next:{title:"Vue.js",permalink:"/aberabook/dev-docs/integrations/vue-js"}},i={},p=[{value:"Create a Svelte app",id:"create-a-svelte-app",level:2},{value:"Use an HTTP client",id:"use-an-http-client",level:3},{value:"GET Request your collection type",id:"get-request-your-collection-type",level:2},{value:"Example",id:"example",level:3},{value:"POST Request your collection type",id:"post-request-your-collection-type",level:2},{value:"Example",id:"example-1",level:3},{value:"PUT Request your collection type",id:"put-request-your-collection-type",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},u=c("Tabs"),d=c("TabItem"),m=c("Request"),h=c("Response"),y={toc:p};function b(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-svelte"},"Getting Started with Svelte"),(0,r.kt)("p",null,"This integration guide follows the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/quick-start"},"Quick Start Guide"),' and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL ',(0,r.kt)("a",{parentName:"p",href:"http://localhost:1337/api/restaurants"},"http://localhost:1337/api/restaurants"),"."),(0,r.kt)("p",null,"If you haven't gone through the Quick Start Guide, the way you request a Strapi API with ",(0,r.kt)("a",{parentName:"p",href:"https://svelte.dev"},"Svelte")," remains the same except that you will not fetch the same content."),(0,r.kt)("h2",{id:"create-a-svelte-app"},"Create a Svelte app"),(0,r.kt)("p",null,"First, install Degit by running ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install -g degit")," in your command-line interface (CLI)."),(0,r.kt)("p",null,"\u201cDegit makes copies of Git repositories and fetches the latest commit in the repository. This is a more efficient approach than using git clone, because we\u2019re not downloading the entire Git history.\u201d"),(0,r.kt)("p",null,"Create a basic Svelte application using webpack:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx degit sveltejs/template svelte-app\n")),(0,r.kt)("h3",{id:"use-an-http-client"},"Use an HTTP client"),(0,r.kt)("p",null,"Many HTTP clients are available but in this documentation we'll use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"Axios")," and ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"Fetch"),"."),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add axios\n"))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"No installation needed\n\n")))),(0,r.kt)("h2",{id:"get-request-your-collection-type"},"GET Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to fetch all your restaurants."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example GET request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios';\n\naxios.get('http://localhost:1337/api/restaurants').then(response => {\n  console.log(response);\n});\n")))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example GET request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fetch('http://localhost:1337/api/restaurants', {\n  method: 'GET',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n  .then(response => response.json())\n  .then(data => console.log(data));\n"))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": 1,\n    "name": "Biscotte Restaurant",\n    "description": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",\n    "created_by": {\n      "id": 1,\n      "firstname": "Paul",\n      "lastname": "Bocuse",\n      "username": null\n    },\n    "updated_by": {\n      "id": 1,\n      "firstname": "Paul",\n      "lastname": "Bocuse",\n      "username": null\n    },\n    "created_at": "2020-07-31T11:37:16.964Z",\n    "updated_at": "2020-07-31T11:37:16.975Z",\n    "categories": [\n      {\n        "id": 1,\n        "name": "French Food",\n        "created_by": 1,\n        "updated_by": 1,\n        "created_at": "2020-07-31T11:36:23.164Z",\n        "updated_at": "2020-07-31T11:36:23.172Z"\n      }\n    ]\n  }\n]\n'))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/App.svelte")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<script>\nimport { onMount } from 'svelte';\nimport axios from 'axios'\n\nlet restaurants = [];\nlet error = null\n\nonMount(async () => {\n    try {\n        const res = await axios.get('http://localhost:1337/api/restaurants');\n        restaurants = res.data.data\n    } catch (e) {\n        error = e\n    }\n});\n\n<\/script>\n\n{#if error !== null}\n  {error}\n{:else}\n  <ul>\n  {#each restaurants as restaurant}\n    <li>\n        {restaurant.attributes.name}\n    </li>\n  {/each}\n  </ul>\n{/if}\n"))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/App.svelte")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<script>\nimport { onMount } from 'svelte';\n\nlet restaurants = [];\nlet error = null\n\nonMount(async () => {\n    const parseJSON = (resp) => (resp.json ? resp.json() : resp);\n    const checkStatus = (resp) => {\n    if (resp.status >= 200 && resp.status < 300) {\n      return resp;\n    }\n    return parseJSON(resp).then((resp) => {\n      throw resp;\n    });\n  };\n  const headers = {\n    'Content-Type': 'application/json',\n  };\n\n    try {\n        const res = await fetch(\"http://localhost:1337/api/restaurants\", {\n          method: \"GET\",\n          headers: {\n             'Content-Type': 'application/json'\n          },\n        }).then(checkStatus)\n      .then(parseJSON);\n        restaurants = res.data.data\n    } catch (e) {\n        error = e\n    }\n});\n<\/script>\n\n{#if error !== null}\n  {error}\n{:else}\n  <ul>\n  {#each restaurants as restaurant}\n    <li>\n        {restaurant.attributes.name}\n    </li>\n  {/each}\n  </ul>\n{/if}\n")))),(0,r.kt)("h2",{id:"post-request-your-collection-type"},"POST Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to create a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type and the ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," Collection type."),(0,r.kt)("p",null,"In this example a ",(0,r.kt)("inlineCode",{parentName:"p"},"japanese")," category has been created which has the id: 3."),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example POST request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios';\n\naxios\n  .post('http://localhost:1337/api/restaurants', {\n    name: 'Dolemon Sushi',\n    description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',\n    categories: [3],\n  })\n  .then(response => {\n    console.log(response);\n  });\n")))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example POST request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fetch('http://localhost:1337/api/restaurants', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    name: 'Dolemon Sushi',\n    description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',\n    categories: [3],\n  }),\n})\n  .then(response => response.json())\n  .then(data => console.log(data));\n"))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 2,\n  "name": "Dolemon Sushi",\n  "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n  "created_by": null,\n  "updated_by": null,\n  "created_at": "2020-08-04T09:57:11.669Z",\n  "updated_at": "2020-08-04T09:57:11.669Z",\n  "categories": [\n    {\n      "id": 3,\n      "name": "Japanese",\n      "created_by": 1,\n      "updated_by": 1,\n      "created_at": "2020-07-31T11:36:23.164Z",\n      "updated_at": "2020-07-31T11:36:23.172Z"\n    }\n  ]\n}\n'))),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/App.svelte")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'<script>\nimport { onMount } from \'svelte\';\nimport axios from \'axios\'\n\nlet allCategories = [];\nlet restaurantName = "";\nlet restaurantDescription = "";\nlet restaurantCategories = [];\nlet error = null;\n\nasync function handleSubmit() {\n    try {\n        const response = await axios.post(\'http://localhost:1337/api/restaurants\', {\n            name: restaurantName,\n            description: restaurantDescription,\n            categories: restaurantCategories\n        });\n        console.log(response);\n    } catch(e) {\n        error = e\n    }\n}\n\nonMount(async () => {\n    try {\n        const response = await axios.get(\'http://localhost:1337/api/categories\');\n        allCategories = response.data\n    } catch(e) {\n        error = e\n    }\n});\n\n<\/script>\n\n{#if error !== null}\n  {error}\n{:else}\n    <label for="name">Name</label>\n    <input id="name" bind:value={restaurantName} type="text" name="name">\n\n    <label for="description">Description</label>\n    <input id="description" bind:value={restaurantDescription} type="text" name="description">\n\n    <div>\n        <br />\n        Select categories\n        <br />\n        {#each allCategories as category}\n            <label>{ category.name }</label>\n          <input type="checkbox" bind:group={restaurantCategories} value={category} />\n        {/each}\n    </div>\n\n    <input type="submit" value="Submit" on:click={handleSubmit} />\n{/if}\n\n'))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"./src/App.svelte")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'<script>\nimport { onMount } from \'svelte\';\nimport axios from \'axios\'\n\nlet allCategories = [];\nlet restaurantName = "";\nlet restaurantDescription = "";\nlet restaurantCategories = [];\nlet error = null;\n\nconst parseJSON = (resp) => (resp.json ? resp.json() : resp);\n\nconst checkStatus = (resp) => {\n  if (resp.status >= 200 && resp.status < 300) {\n    return resp;\n  }\n  return parseJSON(resp).then((resp) => {\n    throw resp;\n  });\n};\nconst headers = {\n  \'Content-Type\': \'application/json\',\n};\n\nasync function handleSubmit() {\n    try {\n        await fetch(\'http://localhost:1337/api/restaurants\', {\n            method: "POST",\n            headers: headers,\n            body: JSON.stringify({\n                name: restaurantName,\n                description: restaurantDescription,\n                categories: restaurantCategories\n            })\n        })\n        .then(checkStatus)\n        .then(parseJSON);\n    } catch (e) {\n        error = e\n    }\n}\n\nonMount(async () => {\n    try {\n        const res = await fetch("http://localhost:1337/api/categories", {\n            method: "GET",\n            headers: headers,\n        }).then(checkStatus)\n            .then(parseJSON);\n            allCategories = res\n    } catch (e) {\n        error = e\n    }\n});\n\n<\/script>\n\n{#if error !== null}\n  {error}\n{:else}\n    <label for="name">Name</label>\n    <input id="name" bind:value={restaurantName} type="text" name="name">\n\n    <label for="description">Description</label>\n    <input id="description" bind:value={restaurantDescription} type="text" name="description">\n\n    <div>\n        <br />\n        Select categories\n        <br />\n        {#each allCategories as category}\n            <label>{ category.name }</label>\n          <input type="checkbox" bind:group={restaurantCategories} value={category} />\n        {/each}\n    </div>\n\n    <input type="submit" value="Submit" on:click={handleSubmit} />\n{/if}\n')))),(0,r.kt)("h2",{id:"put-request-your-collection-type"},"PUT Request your collection type"),(0,r.kt)("p",null,"Execute a ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT")," request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type in order to update the category of a restaurant."),(0,r.kt)("p",null,"Be sure that you activated the ",(0,r.kt)("inlineCode",{parentName:"p"},"put")," permission for the ",(0,r.kt)("inlineCode",{parentName:"p"},"restaurant")," collection type."),(0,r.kt)("p",null,"We consider that the id of your restaurant is ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),".\nand the id of your category is ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,r.kt)(u,{groupId:"axios-fetch",mdxType:"Tabs"},(0,r.kt)(d,{value:"axios",label:"axios",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example PUT request with axios",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import axios from 'axios';\n\naxios\n  .put('http://localhost:1337/api/restaurants/2', {\n    categories: [2],\n  })\n  .then(response => {\n    console.log(response);\n  });\n")))),(0,r.kt)(d,{value:"fetch",label:"fetch",mdxType:"TabItem"},(0,r.kt)(m,{title:"Example PUT request with fetch",mdxType:"Request"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fetch('http://localhost:1337/api/restaurants/2', {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    categories: [2],\n  }),\n})\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n  });\n"))))),(0,r.kt)(h,{title:"Example response",mdxType:"Response"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 2,\n  "name": "Dolemon Sushi",\n  "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",\n  "created_by": null,\n  "updated_by": null,\n  "created_at": "2020-08-04T10:21:30.219Z",\n  "updated_at": "2020-08-04T10:21:30.219Z",\n  "categories": [\n    {\n      "id": 2,\n      "name": "Brunch",\n      "created_by": 1,\n      "updated_by": 1,\n      "created_at": "2020-08-04T10:24:26.901Z",\n      "updated_at": "2020-08-04T10:24:26.911Z"\n    }\n  ]\n}\n'))))}b.isMDXComponent=!0}}]);