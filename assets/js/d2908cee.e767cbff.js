"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[2851],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,y=u["".concat(s,".").concat(m)]||u[m]||c[m]||r;return n?i.createElement(y,p(p({ref:t},d),{},{components:n})):i.createElement(y,p({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,p[1]=o;for(var l=2;l<r;l++)p[l]=n[l];return i.createElement.apply(null,p)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>y,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=n(83117),a=(n(67294),n(3905));const r={title:"TypeScript",displayed_sidebar:"devDocsSidebar",description:"Learn how you can use TypeScript for your Strapi application."},p="TypeScript development",o={unversionedId:"dev-docs/typescript",id:"dev-docs/typescript",title:"TypeScript",description:"Learn how you can use TypeScript for your Strapi application.",source:"@site/docs/dev-docs/typescript.md",sourceDirName:"dev-docs",slug:"/dev-docs/typescript",permalink:"/aberabook/dev-docs/typescript",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/typescript.md",tags:[],version:"current",frontMatter:{title:"TypeScript",displayed_sidebar:"devDocsSidebar",description:"Learn how you can use TypeScript for your Strapi application."},sidebar:"devDocsSidebar",previous:{title:"Custom middlewares",permalink:"/aberabook/dev-docs/backend-customization/examples/middlewares"},next:{title:"Providers",permalink:"/aberabook/dev-docs/providers"}},s={},l=[{value:"Start developing in TypeScript",id:"start-developing-in-typescript",level:2},{value:"Use TypeScript typings",id:"use-typescript-typings",level:2},{value:"Generate typings for project schemas",id:"generate-typings-for-project-schemas",level:2},{value:"Fix build issues with the Generated Types",id:"fix-build-issues-with-the-generated-types",level:3},{value:"Develop a plugin using TypeScript",id:"develop-a-plugin-using-typescript",level:2},{value:"Start Strapi programmatically",id:"start-strapi-programmatically",level:2},{value:"Use the <code>strapi()</code> factory",id:"use-the-strapi-factory",level:3},{value:"Use the <code>strapi.compile()</code> function",id:"use-the-strapicompile-function",level:3},{value:"Add TypeScript support to an existing Strapi project",id:"add-typescript-support-to-an-existing-strapi-project",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=d("Tabs"),u=d("TabItem"),m={toc:l};function y(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"typescript-development"},"TypeScript development"),(0,a.kt)("p",null,"TypeScript adds an additional type system layer above JavaScript, which means that existing JavaScript code is also TypeScript code. Strapi supports TypeScript in new projects on v4.3.0 and above. Existing JavaScript projects can ",(0,a.kt)("a",{parentName:"p",href:"#add-typescript-support-to-an-existing-strapi-project"},"add TypeScript support")," through a conversion procedure. TypeScript-enabled projects allow developing plugins with TypeScript as well as using TypeScript typings."),(0,a.kt)("p",null,":::strapi Getting started with TypeScript\nTo start developing in TypeScript, use the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/installation/cli"},"CLI installation documentation")," to create a new TypeScript project. For existing projects, ",(0,a.kt)("a",{parentName:"p",href:"#add-typescript-support-to-an-existing-strapi-project"},"TypeScript support can be added")," with the provided conversion steps. Additionally, the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/project-structure"},"project structure")," and ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/typescript"},"TypeScript configuration")," sections have TypeScript-specific resources for understanding and configuring an application.\n:::"),(0,a.kt)("h2",{id:"start-developing-in-typescript"},"Start developing in TypeScript"),(0,a.kt)("p",null,"Starting the development environment for a TypeScript-enabled project requires building the admin panel prior to starting the server. In development mode, the application source code is compiled to the ",(0,a.kt)("inlineCode",{parentName:"p"},"./dist/build")," directory and recompiled with each change in the Content-type Builder. To start the application, run the following commands in the root directory:"),(0,a.kt)(c,{groupId:"yarn-npm",mdxType:"Tabs"},(0,a.kt)(u,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm run build\nnpm run develop\n"))),(0,a.kt)(u,{value:"yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn build\nyarn develop\n")))),(0,a.kt)("h2",{id:"use-typescript-typings"},"Use TypeScript typings"),(0,a.kt)("p",null,"Strapi provides typings on the ",(0,a.kt)("inlineCode",{parentName:"p"},"Strapi")," class to improve the TypeScript developing experience. These typings come with an autocomplete feature that automatically offers suggestions while developing."),(0,a.kt)("p",null,"To experience TypeScript-based autocomplete while developing Strapi applications, you could try the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"From your code editor, open the ",(0,a.kt)("inlineCode",{parentName:"p"},"./src/index.ts")," file.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method, declare the ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi")," argument as of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Strapi"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title=" ./src/index.ts"',title:'"','./src/index.ts"':!0},'import { Strapi } from "@strapi/strapi";\n\nexport default {\n  register({ strapi }: { strapi: Strapi }) {\n    // ...\n  },\n};\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Within the body of the ",(0,a.kt)("inlineCode",{parentName:"p"},"register")," method, start typing ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi.")," and use keyboard arrows to browse the available properties.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Choose ",(0,a.kt)("inlineCode",{parentName:"p"},"runLifecyclesfunctions")," from the list.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"When the ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi.runLifecyclesFunctions")," method is added, a list of available lifecycle types (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"register"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"bootstrap")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"destroy"),") are returned by the code editor. Use keyboard arrows to choose one of the lifecycles and the code will autocomplete."))),(0,a.kt)("h2",{id:"generate-typings-for-project-schemas"},"Generate typings for project schemas"),(0,a.kt)("p",null,"To generate typings for your project schemas use the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/cli#strapi-tsgenerate-types"},(0,a.kt)("inlineCode",{parentName:"a"},"ts:generate-types")," CLI command"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"ts:generate-types")," command creates the folder ",(0,a.kt)("inlineCode",{parentName:"p"},"types"),", at the project root, which stores the typings for your project. The optional ",(0,a.kt)("inlineCode",{parentName:"p"},"--debug")," flag returns a detailed table of the generated schemas."),(0,a.kt)("p",null,"To use ",(0,a.kt)("inlineCode",{parentName:"p"},"ts:generate-types"),"run the following code in a terminal at the project root:"),(0,a.kt)(c,{groupId:"yarn-npm",mdxType:"Tabs"},(0,a.kt)(u,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm run strapi ts:generate-types --debug #optional flag to display additional logging\n"))),(0,a.kt)(u,{value:"yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn strapi ts:generate-types --debug #optional flag to display additional logging\n")))),(0,a.kt)("admonition",{title:"Tip: Types generation for JavaScript projects",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"For JavaScript projects, automatic types generation can be turned off (see ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/configurations/typescript#strapi-specific-configuration-for-typescript"},(0,a.kt)("inlineCode",{parentName:"a"},"config/typescript.js")," documentation"),").")),(0,a.kt)("admonition",{title:"Tip: Using types in your front-end application",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"To use Strapi types in your front-end application, you can ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/strapi-community/strapi-typed-fronend"},"use a workaround")," until Strapi implements an official solution, and you will find additional information in ",(0,a.kt)("a",{parentName:"p",href:"https://strapi.io/blog/improve-your-frontend-experience-with-strapi-types-and-type-script"},"this blog article"),".")),(0,a.kt)("h3",{id:"fix-build-issues-with-the-generated-types"},"Fix build issues with the Generated Types"),(0,a.kt)("p",null,"The generated types can be excluded so that the Entity Service doesn't use them and falls back on looser types that don't check the actual properties available in the content types."),(0,a.kt)("p",null,"To do that, edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," of the Strapi project and add ",(0,a.kt)("inlineCode",{parentName:"p"},"types/generated/**")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"exclude")," array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="./tsconfig.json"',title:'"./tsconfig.json"'},'  // ...\n  "exclude": [\n    "node_modules/",\n    "build/",\n    "dist/",\n    ".cache/",\n    ".tmp/",\n    "src/admin/",\n    "**/*.test.ts",\n    "src/plugins/**",\n    "types/generated/**"\n  ]\n  // ...\n')),(0,a.kt)("p",null,"However, if you still want to use the generated types on your project but don't want Strapi to use them, a workaround could be to copy those generated types and paste them outside of the ",(0,a.kt)("inlineCode",{parentName:"p"},"generated")," directory (so that they\naren't overwritten when the types are regenerated) and remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"declare module '@strapi/types'")," on the bottom of the file."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Types should only be imported from ",(0,a.kt)("inlineCode",{parentName:"p"},"@strapi/strapi")," to avoid breaking changes. The types in ",(0,a.kt)("inlineCode",{parentName:"p"},"@strapi/types")," is for internal use only and is subject to change without notice.")),(0,a.kt)("h2",{id:"develop-a-plugin-using-typescript"},"Develop a plugin using TypeScript"),(0,a.kt)("p",null,"New plugins can be generated following the ",(0,a.kt)("a",{parentName:"p",href:"/dev-docs/plugins-development"},"plugins development documentation"),". There are 2 important distinctions for TypeScript applications:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"After creating the plugin, run ",(0,a.kt)("inlineCode",{parentName:"li"},"yarn")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"npm install")," in the plugin directory ",(0,a.kt)("inlineCode",{parentName:"li"},"src/admin/plugins/[my-plugin-name]")," to install the dependencies for the plugin."),(0,a.kt)("li",{parentName:"ul"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"yarn build")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"npm run build")," in the plugin directory ",(0,a.kt)("inlineCode",{parentName:"li"},"src/admin/plugins/[my-plugin-name]")," to build the admin panel including the plugin.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"It is not necessary to repeat the ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"npm install")," command after the initial installation. The ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn build")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run build")," command is necessary to implement any plugin development that affects the admin panel.")),(0,a.kt)("h2",{id:"start-strapi-programmatically"},"Start Strapi programmatically"),(0,a.kt)("p",null,"To start Strapi programmatically in a TypeScript project the Strapi instance requires the compiled code location. This section describes how to set and indicate the compiled code directory."),(0,a.kt)("h3",{id:"use-the-strapi-factory"},"Use the ",(0,a.kt)("inlineCode",{parentName:"h3"},"strapi()")," factory"),(0,a.kt)("p",null,"Strapi can be run programmatically by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi()")," factory. Since the code of TypeScript projects is compiled in a specific directory, the parameter ",(0,a.kt)("inlineCode",{parentName:"p"},"distDir")," should be passed to the factory to indicate where the compiled code should be read:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./server.js"',title:'"./server.js"'},'const strapi = require("@strapi/strapi");\nconst app = strapi({ distDir: "./dist" });\napp.start();\n')),(0,a.kt)("h3",{id:"use-the-strapicompile-function"},"Use the ",(0,a.kt)("inlineCode",{parentName:"h3"},"strapi.compile()")," function"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi.compile()")," function should be mostly used for developing tools that need to start a Strapi instance and detect whether the project includes TypeScript code. ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi.compile()")," automatically detects the project language. If the project code contains any TypeScript code, ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi.compile()")," compiles the code and returns a context with specific values for the directories that Strapi requires:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const strapi = require("@strapi/strapi");\n\nstrapi.compile().then((appContext) => strapi(appContext).start());\n')),(0,a.kt)("h2",{id:"add-typescript-support-to-an-existing-strapi-project"},"Add TypeScript support to an existing Strapi project"),(0,a.kt)("p",null,"Adding TypeScript support to an existing project requires adding 2 ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," files and rebuilding the admin panel. Additionally, the ",(0,a.kt)("inlineCode",{parentName:"p"},"eslintrc")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"eslintignore")," files can be optionally removed. The TypeScript flag ",(0,a.kt)("inlineCode",{parentName:"p"},"allowJs")," should be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," in the root ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file to incrementally add TypeScript files to existing JavaScript projects. The ",(0,a.kt)("inlineCode",{parentName:"p"},"allowJs")," flag allows ",(0,a.kt)("inlineCode",{parentName:"p"},".ts")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".tsx")," files to coexist with JavaScript files."),(0,a.kt)("p",null,"TypeScript support can be added to an existing Strapi project using the following procedure:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add a ",(0,a.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," file at the project root and copy the following code, with the ",(0,a.kt)("inlineCode",{parentName:"li"},"allowJs")," flag, to the file:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="./tsconfig.json"',title:'"./tsconfig.json"'},'{\n  "extends": "@strapi/typescript-utils/tsconfigs/server",\n  "compilerOptions": {\n    "outDir": "dist",\n    "rootDir": ".",\n    "allowJs": true //enables the build without .ts files\n  },\n  "include": ["./", "src/**/*.json"],\n  "exclude": [\n    "node_modules/",\n    "build/",\n    "dist/",\n    ".cache/",\n    ".tmp/",\n    "src/admin/",\n    "**/*.test.ts",\n    "src/plugins/**"\n  ]\n}\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Add a ",(0,a.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," file in the ",(0,a.kt)("inlineCode",{parentName:"li"},"./src/admin/")," directory and copy the following code to the file:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="./src/admin/tsconfig.json"',title:'"./src/admin/tsconfig.json"'},'{\n  "extends": "@strapi/typescript-utils/tsconfigs/admin",\n  "include": ["../plugins/**/admin/src/**/*", "./"],\n  "exclude": ["node_modules/", "build/", "dist/", "**/*.test.ts"]\n}\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"(optional) Delete the ",(0,a.kt)("inlineCode",{parentName:"li"},".eslintrc")," and ",(0,a.kt)("inlineCode",{parentName:"li"},".eslintignore")," files from the project root."),(0,a.kt)("li",{parentName:"ol"},"Add an additional ",(0,a.kt)("inlineCode",{parentName:"li"},"'..'")," to the ",(0,a.kt)("inlineCode",{parentName:"li"},"filename")," property in the ",(0,a.kt)("inlineCode",{parentName:"li"},"database.ts")," configuration file (only required for SQLite databases):")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/database.ts"',title:'"./config/database.ts"'},'const path = require("path");\n\nmodule.exports = ({ env }) => ({\n  connection: {\n    client: "sqlite",\n    connection: {\n      filename: path.join(\n        __dirname,\n        "..",\n        "..",\n        env("DATABASE_FILENAME", ".tmp/data.db")\n      ),\n    },\n    useNullAsDefault: true,\n  },\n});\n')),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Rebuild the admin panel and start the development server:")),(0,a.kt)(c,{groupId:"yarn-npm",mdxType:"Tabs"},(0,a.kt)(u,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm run build\nnpm run develop\n"))),(0,a.kt)(u,{value:"yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"yarn build\nyarn develop\n")))),(0,a.kt)("p",null,"After completing the preceding procedure a ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," directory will be added at the project root and the project has access to the same TypeScript features as a new TypeScript-supported Strapi project."))}y.isMDXComponent=!0}}]);