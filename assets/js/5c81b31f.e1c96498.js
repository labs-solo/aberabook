"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[5429,9523],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,k=u["".concat(p,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},63032:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var a=n(83117),i=(n(67294),n(3905)),r=n(13528);const l={title:"Filtering",description:"Use Strapi's Query Engine API to filter the results of your queries.",displayed_sidebar:"devDocsSidebar"},o="Filtering",p={unversionedId:"dev-docs/api/query-engine/filtering",id:"dev-docs/api/query-engine/filtering",title:"Filtering",description:"Use Strapi's Query Engine API to filter the results of your queries.",source:"@site/docs/dev-docs/api/query-engine/filtering.md",sourceDirName:"dev-docs/api/query-engine",slug:"/dev-docs/api/query-engine/filtering",permalink:"/aberabook/dev-docs/api/query-engine/filtering",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/query-engine/filtering.md",tags:[],version:"current",frontMatter:{title:"Filtering",description:"Use Strapi's Query Engine API to filter the results of your queries.",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Bulk Operations",permalink:"/aberabook/dev-docs/api/query-engine/bulk-operations"},next:{title:"Populating",permalink:"/aberabook/dev-docs/api/query-engine/populating"}},s={},d=[{value:"Logical operators",id:"logical-operators",level:2},{value:"<code>$and</code>",id:"and",level:3},{value:"<code>$or</code>",id:"or",level:3},{value:"<code>$not</code>",id:"not",level:3},{value:"Attribute Operators",id:"attribute-operators",level:2},{value:"<code>$not</code>",id:"not-1",level:3},{value:"<code>$eq</code>",id:"eq",level:3},{value:"<code>$eqi</code>",id:"eqi",level:3},{value:"<code>$ne</code>",id:"ne",level:3},{value:"<code>$nei</code>",id:"nei",level:3},{value:"<code>$in</code>",id:"in",level:3},{value:"<code>$notIn</code>",id:"notin",level:3},{value:"<code>$lt</code>",id:"lt",level:3},{value:"<code>$lte</code>",id:"lte",level:3},{value:"<code>$gt</code>",id:"gt",level:3},{value:"<code>$gte</code>",id:"gte",level:3},{value:"<code>$between</code>",id:"between",level:3},{value:"<code>$contains</code>",id:"contains",level:3},{value:"<code>$notContains</code>",id:"notcontains",level:3},{value:"<code>$containsi</code>",id:"containsi",level:3},{value:"<code>$notContainsi</code>",id:"notcontainsi",level:3},{value:"<code>$startsWith</code>",id:"startswith",level:3},{value:"<code>$endsWith</code>",id:"endswith",level:3},{value:"<code>$null</code>",id:"null",level:3},{value:"<code>$notNull</code>",id:"notnull",level:3}],c={toc:d};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"filtering"},"Filtering"),(0,i.kt)(r.default,{mdxType:"RecommendEntityService"}),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/query-engine/"},"Query Engine API")," offers the ability to filter results found with its ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/query-engine/single-operations#findmany"},"findMany()")," method."),(0,i.kt)("p",null,"Results are filtered with the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," parameter that accepts ",(0,i.kt)("a",{parentName:"p",href:"#logical-operators"},"logical operators")," and ",(0,i.kt)("a",{parentName:"p",href:"#attribute-operators"},"attribute operators"),". Every operator should be prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"$"),"."),(0,i.kt)("h2",{id:"logical-operators"},"Logical operators"),(0,i.kt)("h3",{id:"and"},(0,i.kt)("inlineCode",{parentName:"h3"},"$and")),(0,i.kt)("p",null,"All nested conditions must be ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    $and: [\n      {\n        title: 'Hello World',\n      },\n      {\n        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n      },\n    ],\n  },\n});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$and")," is used implicitly when passing an object with nested conditions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: 'Hello World',\n    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n  },\n});\n")),(0,i.kt)("h3",{id:"or"},(0,i.kt)("inlineCode",{parentName:"h3"},"$or")),(0,i.kt)("p",null,"One or many nested conditions must be ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    $or: [\n      {\n        title: 'Hello World',\n      },\n      {\n        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },\n      },\n    ],\n  },\n});\n")),(0,i.kt)("h3",{id:"not"},(0,i.kt)("inlineCode",{parentName:"h3"},"$not")),(0,i.kt)("p",null,"Negates the nested conditions."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    $not: {\n      title: 'Hello World',\n    },\n  },\n});\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"$not")," can be used:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"as a logical operator (e.g. in ",(0,i.kt)("inlineCode",{parentName:"li"},"where: { $not: { // conditions\u2026 }}"),")"),(0,i.kt)("li",{parentName:"ul"},"or ",(0,i.kt)("a",{parentName:"li",href:"#not-2"},"as an attribute operator")," (e.g. in ",(0,i.kt)("inlineCode",{parentName:"li"},"where: { attribute-name: $not: { \u2026 } }"),")."))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"$and"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$or")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"$not")," operators are nestable inside of another ",(0,i.kt)("inlineCode",{parentName:"p"},"$and"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$or")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"$not")," operator.")),(0,i.kt)("h2",{id:"attribute-operators"},"Attribute Operators"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Using these operators may give different results depending on the database's implementation, as the comparison is handled by the database and not by Strapi.")),(0,i.kt)("h3",{id:"not-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"$not")),(0,i.kt)("p",null,"Negates nested condition(s)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $not: {\n        $contains: 'Hello World',\n      },\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"eq"},(0,i.kt)("inlineCode",{parentName:"h3"},"$eq")),(0,i.kt)("p",null,"Attribute equals input value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $eq: 'Hello World',\n    },\n  },\n});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$eq")," can be omitted:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: 'Hello World',\n  },\n});\n")),(0,i.kt)("h3",{id:"eqi"},(0,i.kt)("inlineCode",{parentName:"h3"},"$eqi")),(0,i.kt)("p",null,"Attribute equals input value (case-insensitive)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $eqi: 'HELLO World',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"ne"},(0,i.kt)("inlineCode",{parentName:"h3"},"$ne")),(0,i.kt)("p",null,"Attribute does not equal input value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $ne: 'ABCD',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"nei"},(0,i.kt)("inlineCode",{parentName:"h3"},"$nei")),(0,i.kt)("p",null,"Attribute does not equal input value (case-insensitive)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $nei: 'abcd',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"in"},(0,i.kt)("inlineCode",{parentName:"h3"},"$in")),(0,i.kt)("p",null,"Attribute is contained in the input list."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $in: ['Hello', 'Hola', 'Bonjour'],\n    },\n  },\n});\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"$in")," can be omitted when passing an array of values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: ['Hello', 'Hola', 'Bonjour'],\n  },\n});\n")),(0,i.kt)("h3",{id:"notin"},(0,i.kt)("inlineCode",{parentName:"h3"},"$notIn")),(0,i.kt)("p",null,"Attribute is not contained in the input list."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $notIn: ['Hello', 'Hola', 'Bonjour'],\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"lt"},(0,i.kt)("inlineCode",{parentName:"h3"},"$lt")),(0,i.kt)("p",null,"Attribute is less than the input value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $lt: 10,\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"lte"},(0,i.kt)("inlineCode",{parentName:"h3"},"$lte")),(0,i.kt)("p",null,"Attribute is less than or equal to the input value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $lte: 10,\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"gt"},(0,i.kt)("inlineCode",{parentName:"h3"},"$gt")),(0,i.kt)("p",null,"Attribute is greater than the input value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $gt: 5,\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"gte"},(0,i.kt)("inlineCode",{parentName:"h3"},"$gte")),(0,i.kt)("p",null,"Attribute is greater than or equal to the input value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $gte: 5,\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"between"},(0,i.kt)("inlineCode",{parentName:"h3"},"$between")),(0,i.kt)("p",null,"Attribute is between the 2 input values, boundaries included (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"$between[1, 3]")," will also return ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),")."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    rating: {\n      $between: [1, 20],\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"contains"},(0,i.kt)("inlineCode",{parentName:"h3"},"$contains")),(0,i.kt)("p",null,"Attribute contains the input value (case-sensitive)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $contains: 'Hello',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"notcontains"},(0,i.kt)("inlineCode",{parentName:"h3"},"$notContains")),(0,i.kt)("p",null,"Attribute does not contain the input value (case-sensitive)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $notContains: 'Hello',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"containsi"},(0,i.kt)("inlineCode",{parentName:"h3"},"$containsi")),(0,i.kt)("p",null,"Attribute contains the input value. ",(0,i.kt)("inlineCode",{parentName:"p"},"$containsi")," is not case-sensitive, while ",(0,i.kt)("a",{parentName:"p",href:"#contains"},"$contains")," is."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $containsi: 'hello',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"notcontainsi"},(0,i.kt)("inlineCode",{parentName:"h3"},"$notContainsi")),(0,i.kt)("p",null,"Attribute does not contain the input value. ",(0,i.kt)("inlineCode",{parentName:"p"},"$notContainsi")," is not case-sensitive, while ",(0,i.kt)("a",{parentName:"p",href:"#notcontains"},"$notContains")," is."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $notContainsi: 'hello',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"startswith"},(0,i.kt)("inlineCode",{parentName:"h3"},"$startsWith")),(0,i.kt)("p",null,"Attribute starts with input value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $startsWith: 'ABCD',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"endswith"},(0,i.kt)("inlineCode",{parentName:"h3"},"$endsWith")),(0,i.kt)("p",null,"Attribute ends with input value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $endsWith: 'ABCD',\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"null"},(0,i.kt)("inlineCode",{parentName:"h3"},"$null")),(0,i.kt)("p",null,"Attribute is ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $null: true,\n    },\n  },\n});\n")),(0,i.kt)("h3",{id:"notnull"},(0,i.kt)("inlineCode",{parentName:"h3"},"$notNull")),(0,i.kt)("p",null,"Attribute is not ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::article.article').findMany({\n  where: {\n    title: {\n      $notNull: true,\n    },\n  },\n});\n")))}u.isMDXComponent=!0},13528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(83117),i=(n(67294),n(3905));const r={},l=void 0,o={unversionedId:"snippets/recommend-entity-service",id:"snippets/recommend-entity-service",title:"recommend-entity-service",description:"The Entity Service API is the recommended API to interact with your application's database. Only use QueryEngine if EntityService does not cover your use case.",source:"@site/docs/snippets/recommend-entity-service.md",sourceDirName:"snippets",slug:"/snippets/recommend-entity-service",permalink:"/aberabook/snippets/recommend-entity-service",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/recommend-entity-service.md",tags:[],version:"current",frontMatter:{}},p={},s=[],d={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,":::strapi Have you considered the Entity Service API?\nThe ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service API")," is the recommended API to interact with your application's database. Only use QueryEngine if EntityService does not cover your use case.\n:::"))}c.isMDXComponent=!0}}]);