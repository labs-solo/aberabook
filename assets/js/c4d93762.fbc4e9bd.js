"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[6357,469],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),o=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=o(a),k=r,g=u["".concat(d,".").concat(k)]||u[k]||s[k]||i;return a?n.createElement(g,l(l({ref:t},m),{},{components:a})):n.createElement(g,l({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},90855:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>m});var n=a(83117),r=(a(67294),a(3905)),i=a(74083);const l={title:"Single Operations",description:"Use Strapi's Query Engine API to perform operations on single entries.",displayed_sidebar:"devDocsSidebar"},p="Single Operations",d={unversionedId:"dev-docs/api/query-engine/single-operations",id:"dev-docs/api/query-engine/single-operations",title:"Single Operations",description:"Use Strapi's Query Engine API to perform operations on single entries.",source:"@site/docs/dev-docs/api/query-engine/single-operations.md",sourceDirName:"dev-docs/api/query-engine",slug:"/dev-docs/api/query-engine/single-operations",permalink:"/aberabook/dev-docs/api/query-engine/single-operations",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/api/query-engine/single-operations.md",tags:[],version:"current",frontMatter:{title:"Single Operations",description:"Use Strapi's Query Engine API to perform operations on single entries.",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Query Engine API",permalink:"/aberabook/dev-docs/api/query-engine"},next:{title:"Bulk Operations",permalink:"/aberabook/dev-docs/api/query-engine/bulk-operations"}},o={},m=[{value:"findOne()",id:"findone",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3},{value:"findMany()",id:"findmany",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Example",id:"example-1",level:3},{value:"findWithCount()",id:"findwithcount",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Example",id:"example-2",level:3},{value:"create()",id:"create",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"Example",id:"example-3",level:3},{value:"update()",id:"update",level:2},{value:"Parameters",id:"parameters-4",level:3},{value:"Example",id:"example-4",level:3},{value:"delete()",id:"delete",level:2},{value:"Parameters",id:"parameters-5",level:3},{value:"Example",id:"example-5",level:3}],s={toc:m};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"single-operations"},"Single Operations"),(0,r.kt)("h2",{id:"findone"},"findOne()"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"}," Only use the Query Engine's findOne if the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service/crud#findone"},"Entity Service findOne")," can't cover your use case.")),(0,r.kt)("p",null,"Finds the first entry matching the parameters."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"findOne(parameters) \u21d2 Entry")),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"select")),(0,r.kt)("td",{parentName:"tr",align:null},"String, or Array of strings"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/backend-customization/models#model-attributes"},"Attributes")," to return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"where")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},(0,r.kt)("inlineCode",{parentName:"a"},"WhereParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},"Filters")," to use")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"offset")),(0,r.kt)("td",{parentName:"tr",align:null},"Integer"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of entries to skip")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"orderBy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/order-pagination/"},(0,r.kt)("inlineCode",{parentName:"a"},"OrderByParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/order-pagination/"},"Order")," definition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},"Relations to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},"populate"))))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entry = await strapi.db.query('api::blog.article').findOne({\n  select: ['title', 'description'],\n  where: { title: 'Hello World' },\n  populate: { category: true },\n});\n")),(0,r.kt)("h2",{id:"findmany"},"findMany()"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"}," Only use the Query Engine's findMany if the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service/crud#findmany"},"Entity Service findMany")," can't cover your use case.")),(0,r.kt)("p",null,"Finds entries matching the parameters."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"findMany(parameters) \u21d2 Entry[]")),(0,r.kt)("h3",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"select")),(0,r.kt)("td",{parentName:"tr",align:null},"String, or Array of strings"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/backend-customization/models#model-attributes"},"Attributes")," to return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"where")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},(0,r.kt)("inlineCode",{parentName:"a"},"WhereParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},"Filters")," to use")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"limit")),(0,r.kt)("td",{parentName:"tr",align:null},"Integer"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of entries to return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"offset")),(0,r.kt)("td",{parentName:"tr",align:null},"Integer"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of entries to skip")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"orderBy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/order-pagination/"},(0,r.kt)("inlineCode",{parentName:"a"},"OrderByParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/order-pagination/"},"Order")," definition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},"Relations to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},"populate"))))),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entries = await strapi.db.query('api::blog.article').findMany({\n  select: ['title', 'description'],\n  where: { title: 'Hello World' },\n  orderBy: { publishedAt: 'DESC' },\n  populate: { category: true },\n});\n")),(0,r.kt)("h2",{id:"findwithcount"},"findWithCount()"),(0,r.kt)("p",null,"Finds and counts entries matching the parameters."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"findWithCount(parameters) => [Entry[], number]")),(0,r.kt)("h3",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"select")),(0,r.kt)("td",{parentName:"tr",align:null},"String, or Array of strings"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/backend-customization/models#model-attributes"},"Attributes")," to return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"where")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},(0,r.kt)("inlineCode",{parentName:"a"},"WhereParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},"Filters")," to use")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"limit")),(0,r.kt)("td",{parentName:"tr",align:null},"Integer"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of entries to return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"offset")),(0,r.kt)("td",{parentName:"tr",align:null},"Integer"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of entries to skip")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"orderBy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/order-pagination/"},(0,r.kt)("inlineCode",{parentName:"a"},"OrderByParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/order-pagination/"},"Order")," definition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},"Relations to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},"populate"))))),(0,r.kt)("p",null,"|"),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const [entries, count] = await strapi.db.query('api::blog.article').findWithCount({\n  select: ['title', 'description'],\n  where: { title: 'Hello World' },\n  orderBy: { title: 'DESC' },\n  populate: { category: true },\n});\n")),(0,r.kt)("h2",{id:"create"},"create()"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"}," Only use the Query Engine's create if the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service/crud#create"},"Entity Service create")," can't cover your use case.")),(0,r.kt)("p",null,"Creates one entry and returns it."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"create(parameters) => Entry")),(0,r.kt)("h3",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"select")),(0,r.kt)("td",{parentName:"tr",align:null},"String, or Array of strings"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/backend-customization/models#model-attributes"},"Attributes")," to return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},"Relations to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},"populate"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Input data")))),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entry = await strapi.db.query('api::blog.article').create({\n  data: {\n    title: 'My Article',\n  },\n});\n")),(0,r.kt)(i.default,{components:a.components,mdxType:"ManagingRelations"}),(0,r.kt)("h2",{id:"update"},"update()"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"}," Only use the Query Engine's update if the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service/crud#update"},"Entity Service update")," can't cover your use case.")),(0,r.kt)("p",null,"Updates one entry and returns it."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"update(parameters) => Entry")),(0,r.kt)("h3",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"select")),(0,r.kt)("td",{parentName:"tr",align:null},"String, or Array of strings"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/backend-customization/models#model-attributes"},"Attributes")," to return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},"Relations to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},"populate"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"where")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},(0,r.kt)("inlineCode",{parentName:"a"},"WhereParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},"Filters")," to use")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Input data")))),(0,r.kt)("h3",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entry = await strapi.db.query('api::blog.article').update({\n  where: { id: 1 },\n  data: {\n    title: 'xxx',\n  },\n});\n")),(0,r.kt)(i.default,{components:a.components,mdxType:"ManagingRelations"}),(0,r.kt)("h2",{id:"delete"},"delete()"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"}," Only use the Query Engine's delete if the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service/crud#delete"},"Entity Service delete")," can't cover your use case.")),(0,r.kt)("p",null,"Deletes one entry and returns it."),(0,r.kt)("p",null,"Syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"delete(parameters) => Entry")),(0,r.kt)("h3",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"select")),(0,r.kt)("td",{parentName:"tr",align:null},"String, or Array of strings"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/backend-customization/models#model-attributes"},"Attributes")," to return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"populate")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},(0,r.kt)("inlineCode",{parentName:"a"},"PopulateParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},"Relations to ",(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/populating/"},"populate"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"where")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},(0,r.kt)("inlineCode",{parentName:"a"},"WhereParameter"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/dev-docs/api/query-engine/filtering/"},"Filters")," to use")))),(0,r.kt)("h3",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const entry = await strapi.db.query('api::blog.article').delete({\n  where: { id: 1 },\n});\n")))}u.isMDXComponent=!0},74083:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>p,toc:()=>o});var n=a(83117),r=(a(67294),a(3905));const i={},l=void 0,p={unversionedId:"snippets/managing-relations",id:"snippets/managing-relations",title:"managing-relations",description:"In the data object, relations can be managed with the connect, disconnect, and set parameters using the syntax described for the REST API (see managing relations).",source:"@site/docs/snippets/managing-relations.md",sourceDirName:"snippets",slug:"/snippets/managing-relations",permalink:"/aberabook/snippets/managing-relations",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/managing-relations.md",tags:[],version:"current",frontMatter:{}},d={},o=[],m={toc:o};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," object, relations can be managed with the ",(0,r.kt)("inlineCode",{parentName:"p"},"connect"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"disconnect"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," parameters using the syntax described for the REST API (see ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/rest/relations"},"managing relations"),").")))}s.isMDXComponent=!0}}]);