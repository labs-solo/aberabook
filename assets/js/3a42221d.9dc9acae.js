"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[3843,6480],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40079:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(83117),i=(n(67294),n(3905));n(17155);const o={title:"Policies",description:"Strapi policies are functions that execute specific logic on each request before it reaches the controller. Policies can be customized according to your needs.",displayed_sidebar:"devDocsSidebar"},r="Policies",s={unversionedId:"dev-docs/backend-customization/policies",id:"dev-docs/backend-customization/policies",title:"Policies",description:"Strapi policies are functions that execute specific logic on each request before it reaches the controller. Policies can be customized according to your needs.",source:"@site/docs/dev-docs/backend-customization/policies.md",sourceDirName:"dev-docs/backend-customization",slug:"/dev-docs/backend-customization/policies",permalink:"/aberabook/dev-docs/backend-customization/policies",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/backend-customization/policies.md",tags:[],version:"current",frontMatter:{title:"Policies",description:"Strapi policies are functions that execute specific logic on each request before it reaches the controller. Policies can be customized according to your needs.",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Routes",permalink:"/aberabook/dev-docs/backend-customization/routes"},next:{title:"Middlewares",permalink:"/aberabook/dev-docs/backend-customization/middlewares"}},l={},c={width:"100%",margin:"0"},p={fontSize:"12px"},u=[{value:"Implementation",id:"implementation",level:2},{value:"Usage",id:"usage",level:2},{value:"Global policies",id:"global-policies",level:3},{value:"Plugin policies",id:"plugin-policies",level:3},{value:"API policies",id:"api-policies",level:3}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},m=d("Tabs"),f=d("TabItem"),h={toc:u};function g(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"policies"},"Policies"),(0,i.kt)("p",null,"Policies are functions that execute specific logic on each request before it reaches the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/controllers"},"controller"),". They are mostly used for securing business logic."),(0,i.kt)("p",null,"Each ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/routes"},"route")," of a Strapi project can be associated to an array of policies. For example, a policy named ",(0,i.kt)("inlineCode",{parentName:"p"},"is-admin")," could check that the request is sent by an admin user, and restrict access to critical routes."),(0,i.kt)("p",null,"Policies can be global or scoped. ",(0,i.kt)("a",{parentName:"p",href:"#global-policies"},"Global policies")," can be associated to any route in the project. Scoped policies only apply to a specific ",(0,i.kt)("a",{parentName:"p",href:"#api-policies"},"API")," or ",(0,i.kt)("a",{parentName:"p",href:"#plugin-policies"},"plugin"),"."),(0,i.kt)("figure",{style:c},(0,i.kt)("img",{src:"/img/assets/backend-customization/diagram-routes.png",alt:"Simplified Strapi backend diagram with routes and policies highlighted"}),(0,i.kt)("em",null,(0,i.kt)("figcaption",{style:p},"The diagram represents a simplified version of how a request travels through the Strapi back end, with policies and routes highlighted. The backend customization introduction page includes a complete, ",(0,i.kt)("a",{href:"/dev-docs/backend-customization#interactive-diagram"},"interactive diagram"),"."))),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,"A new policy can be implemented:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"with the ",(0,i.kt)("a",{parentName:"li",href:"/dev-docs/cli#strapi-generate"},"interactive CLI command ",(0,i.kt)("inlineCode",{parentName:"a"},"strapi generate"))," "),(0,i.kt)("li",{parentName:"ul"},"or manually by creating a JavaScript file in the appropriate folder (see ",(0,i.kt)("a",{parentName:"li",href:"/dev-docs/project-structure"},"project structure"),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./src/policies/")," for global policies"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./src/api/[api-name]/policies/")," for API policies"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"./src/plugins/[plugin-name]/policies/")," for plugin policies")))),(0,i.kt)("br",null),(0,i.kt)("p",null,"Global policy implementation example:"),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/policies/is-authenticated.js"',title:'"./src/policies/is-authenticated.js"'},"\nmodule.exports = (policyContext, config, { strapi }) => {\n  if (policyContext.state.user) { // if a session is open\n    // go to next policy or reach the controller's action\n    return true;\n  }\n\n  return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass\n};\n"))),(0,i.kt)(f,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/policies/is-authenticated.ts"',title:'"./src/policies/is-authenticated.ts"'},"\nexport default (policyContext, config, { strapi }) => {\n  if (policyContext.state.user) { // if a session is open\n    // go to next policy or reach the controller's action\n    return true;\n  }\n\n  return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass\n};\n")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"policyContext")," is a wrapper around the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/controllers"},"controller")," context. It adds some logic that can be useful to implement a policy for both REST and GraphQL."),(0,i.kt)("br",null),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To see a possible advanced usage for route policies, read the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/policies"},"policies")," page of the backend customization examples cookbook.")),(0,i.kt)("p",null,"Policies can be configured using a ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," object:"),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title=".src/api/[api-name]/policies/my-policy.js"',title:'".src/api/[api-name]/policies/my-policy.js"'},"\nmodule.exports = (policyContext, config, { strapi }) => {\n    if (policyContext.state.user.role.code === config.role) { // if user's role is the same as the one described in configuration\n      return true;\n    }\n\n    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass\n};\n"))),(0,i.kt)(f,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/api/[api-name]/policies/my-policy.ts"',title:'"./src/api/[api-name]/policies/my-policy.ts"'},"\nexport default (policyContext, config, { strapi }) => {\n    if (policyContext.state.user.role.code === config.role) { // if user's role is the same as the one described in configuration\n      return true;\n    }\n\n    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass\n  };\n")))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"To apply policies to a route, add them to its configuration object (see ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/routes#policies"},"routes documentation"),")."),(0,i.kt)("p",null,"Policies are called different ways depending on their scope:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("inlineCode",{parentName:"li"},"global::policy-name")," for ",(0,i.kt)("a",{parentName:"li",href:"#global-policies"},"global policies")),(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("inlineCode",{parentName:"li"},"api::api-name.policy-name")," for ",(0,i.kt)("a",{parentName:"li",href:"#api-policies"},"API policies")),(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("inlineCode",{parentName:"li"},"plugin::plugin-name.policy-name")," for ",(0,i.kt)("a",{parentName:"li",href:"#plugin-policies"},"plugin policies"))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"To list all the available policies, run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn strapi policies:list"),".")),(0,i.kt)("h3",{id:"global-policies"},"Global policies"),(0,i.kt)("p",null,"Global policies can be associated to any route in a project."),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/routes/custom-restaurant.js"',title:'"./src/api/restaurant/routes/custom-restaurant.js"'},"\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          Before executing the find action in the Restaurant.js controller,\n          we call the global 'is-authenticated' policy,\n          found at ./src/policies/is-authenticated.js.\n         */\n        policies: ['global::is-authenticated']\n      }\n    }\n  ]\n}\n"))),(0,i.kt)(f,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/api/restaurant/routes/custom-restaurant.ts"',title:'"./src/api/restaurant/routes/custom-restaurant.ts"'},"\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          Before executing the find action in the Restaurant.js controller,\n          we call the global 'is-authenticated' policy,\n          found at ./src/policies/is-authenticated.js.\n         */\n        policies: ['global::is-authenticated']\n      }\n    }\n  ]\n}\n")))),(0,i.kt)("h3",{id:"plugin-policies"},"Plugin policies"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/dev-docs/plugins"},"Plugins")," can add and expose policies to an application. For example, the ",(0,i.kt)("a",{parentName:"p",href:"/user-docs/users-roles-permissions"},"Users & Permissions plugin")," comes with policies to ensure that the user is authenticated or has the rights to perform an action:"),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/routes/custom-restaurant.js"',title:'"./src/api/restaurant/routes/custom-restaurant.js"'},"\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          The `isAuthenticated` policy prodived with the `users-permissions` plugin \n          is executed before the `find` action in the `Restaurant.js` controller.\n        */\n        policies: ['plugin::users-permissions.isAuthenticated']\n      }\n    }\n  ]\n}\n"))),(0,i.kt)(f,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/api/restaurant/routes/custom-restaurant.ts"',title:'"./src/api/restaurant/routes/custom-restaurant.ts"'},"\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          The `isAuthenticated` policy prodived with the `users-permissions` plugin \n          is executed before the `find` action in the `Restaurant.js` controller.\n        */\n        policies: ['plugin::users-permissions.isAuthenticated']\n      }\n    }\n  ]\n}\n")))),(0,i.kt)("h3",{id:"api-policies"},"API policies"),(0,i.kt)("p",null,"API policies are associated to the routes defined in the API where they have been declared."),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/policies/is-admin.js."',title:'"./src/api/restaurant/policies/is-admin.js."'},"\nmodule.exports = async (policyContext, config, { strapi }) => {\n  if (policyContext.state.user.role.name === 'Administrator') {\n    // Go to next policy or will reach the controller's action.\n    return true;\n  }\n\n  return false;\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/restaurant/routes/custom-restaurant.js"',title:'"./src/api/restaurant/routes/custom-restaurant.js"'},"\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`\n          is executed before the `find` action in the `Restaurant.js` controller.\n         */\n        policies: ['is-admin']\n      }\n    }\n  ]\n}\n\n\n"))),(0,i.kt)(f,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/api/restaurant/policies/is-admin.ts"',title:'"./src/api/restaurant/policies/is-admin.ts"'},"\nexport default (policyContext, config, { strapi }) => {\n  if (policyContext.state.user.role.name === 'Administrator') {\n    // Go to next policy or will reach the controller's action.\n    return true;\n  }\n\n  return false;\n};\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/api/restaurant/routes/custom-restaurant.ts"',title:'"./src/api/restaurant/routes/custom-restaurant.ts"'},"\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/restaurants',\n      handler: 'Restaurant.find',\n      config: {\n        /**\n          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`\n          is executed before the `find` action in the `Restaurant.ts` controller.\n         */\n        policies: ['is-admin']\n      }\n    }\n  ]\n}\n\n")))),(0,i.kt)("p",null,"To use a policy in another API, reference it with the following syntax: ",(0,i.kt)("inlineCode",{parentName:"p"},"api::[apiName].[policyName]"),":"),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(f,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/api/category/routes/custom-category.js"',title:'"./src/api/category/routes/custom-category.js"'},"\nmodule.exports = {\n  routes: [\n    {\n      method: 'GET',\n      path: '/categories',\n      handler: 'Category.find',\n      config: {\n        /**\n          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.js`\n          is executed before the `find` action in the `Restaurant.js` controller.\n        */\n        policies: ['api::restaurant.is-admin']\n      }\n    }\n  ]\n}\n"))),(0,i.kt)(f,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./src/api/category/routes/custom-category.ts"',title:'"./src/api/category/routes/custom-category.ts"'},"\nexport default {\n  routes: [\n    {\n      method: 'GET',\n      path: '/categories',\n      handler: 'Category.find',\n      config: {\n        /**\n          The `is-admin` policy found at `./src/api/restaurant/policies/is-admin.ts`\n          is executed before the `find` action in the `Restaurant.js` controller.\n        */\n        policies: ['api::restaurant.is-admin']\n      }\n    }\n  ]\n}\n")))))}g.isMDXComponent=!0},17155:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(83117),i=(n(67294),n(3905));const o={},r=void 0,s={unversionedId:"snippets/backend-customization-feedback-cta",id:"snippets/backend-customization-feedback-cta",title:"backend-customization-feedback-cta",description:"We are currently reworking the Backend Customization section of the Strapi documentation. If you would like to help, please feel free to fill in this form to share with us your opinions, needs and requests.",source:"@site/docs/snippets/backend-customization-feedback-cta.md",sourceDirName:"snippets",slug:"/snippets/backend-customization-feedback-cta",permalink:"/aberabook/snippets/backend-customization-feedback-cta",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/backend-customization-feedback-cta.md",tags:[],version:"current",frontMatter:{}},l={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"\ud83d\udcac Strapi team needs you to improve this documentation!",type:"callout"},(0,i.kt)("p",{parentName:"admonition"},"We are currently reworking the Backend Customization section of the Strapi documentation. If you would like to help, please feel free to fill in ",(0,i.kt)("a",{parentName:"p",href:"https://forms.gle/YS8zGUrG6FQ72dmh8"},"this form")," to share with us your opinions, needs and requests.")))}u.isMDXComponent=!0}}]);