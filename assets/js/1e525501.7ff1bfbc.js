"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[9218,9599],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?r.createElement(g,o(o({ref:t},d),{},{components:n})):r.createElement(g,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},19119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=n(83117),a=(n(67294),n(3905)),i=n(32238);const o={title:"Updating the folder structure",description:"Migrate the folder structure of a Strapi plugin from v3.6.x to v4.0.x with step-by-step instructions",displayed_sidebar:"devDocsSidebar"},l="v4 plugin migration: Updating the folder structure",s={unversionedId:"dev-docs/migration/v3-to-v4/plugin/update-folder-structure",id:"dev-docs/migration/v3-to-v4/plugin/update-folder-structure",title:"Updating the folder structure",description:"Migrate the folder structure of a Strapi plugin from v3.6.x to v4.0.x with step-by-step instructions",source:"@site/docs/dev-docs/migration/v3-to-v4/plugin/update-folder-structure.md",sourceDirName:"dev-docs/migration/v3-to-v4/plugin",slug:"/dev-docs/migration/v3-to-v4/plugin/update-folder-structure",permalink:"/aberabook/dev-docs/migration/v3-to-v4/plugin/update-folder-structure",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/migration/v3-to-v4/plugin/update-folder-structure.md",tags:[],version:"current",frontMatter:{title:"Updating the folder structure",description:"Migrate the folder structure of a Strapi plugin from v3.6.x to v4.0.x with step-by-step instructions",displayed_sidebar:"devDocsSidebar"},sidebar:"devDocsSidebar",previous:{title:"Plugin migration guide",permalink:"/aberabook/dev-docs/migration/v3-to-v4/plugin-migration"},next:{title:"Migrating the back end",permalink:"/aberabook/dev-docs/migration/v3-to-v4/plugin/migrate-back-end"}},p={},d=[{value:"Updating folder structure automatically",id:"updating-folder-structure-automatically",level:2},{value:"Updating folder structure manually",id:"updating-folder-structure-manually",level:2},{value:"Creating a <code>server</code> folder",id:"creating-a-server-folder",level:3},{value:"Moving controllers, services, and middlewares",id:"moving-controllers-services-and-middlewares",level:3},{value:"Moving the <code>bootstrap</code> function",id:"moving-the-bootstrap-function",level:3},{value:"Moving routes",id:"moving-routes",level:3},{value:"Moving policies",id:"moving-policies",level:3},{value:"Converting models to content-types",id:"converting-models-to-content-types",level:3},{value:"Creating entry files",id:"creating-entry-files",level:3}],u={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"v4-plugin-migration-updating-the-folder-structure"},"v4 plugin migration: Updating the folder structure"),(0,a.kt)(i.default,{components:n.components,mdxType:"PluginMigrationIntro"}),(0,a.kt)("p",null,":::strapi v3/v4 comparison\nStrapi v3 plugins required a specific folder structure."),(0,a.kt)("p",null,"In Strapi v4, plugins are developed using a programmatic API, which gives flexibility in the folder structure.\n:::"),(0,a.kt)("p",null,"The folder structure of a Strapi v4 plugin should meet the following requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The root of the plugin folder should include:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi-server.js")," entry file, if the plugin interacts with Strapi's back-end (see ",(0,a.kt)("a",{parentName:"li",href:"/aberabook/dev-docs/api/plugins/server-api"},"Server API"),")"),(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi-admin.js")," entry file, if the plugin interacts with Strapi's admin panel (see ",(0,a.kt)("a",{parentName:"li",href:"/aberabook/dev-docs/api/plugins/admin-panel-api"},"Admin Panel API"),")."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"strapi-admin.js")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-server.js")," should export the plugin's interface."))),(0,a.kt)("p",null,"As long as these requirements are met, the rest of the folder structure is up to you."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example of a Strapi v4 plugin structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"my-plugin\n\u251c\u2500 admin\n\u2502  \u2514\u2500 src\n\u2502     \u251c\u2500 components\n\u2502     \u251c\u2500 pages\n\u2502     \u251c\u2500 // more folders and files\n\u2502     \u2514\u2500 index.js\n\u251c\u2500 server\n\u2502  \u251c\u2500 config\n\u2502  \u251c\u2500 content-types\n\u2502  \u251c\u2500 controllers\n\u2502  \u251c\u2500 middlewares\n\u2502  \u251c\u2500 policies\n\u2502  \u251c\u2500 routes\n\u2502  \u251c\u2500 services\n\u2502  \u251c\u2500 bootstrap.js\n\u2502  \u251c\u2500 destroy.js\n\u2502  \u251c\u2500 register.js\n\u2502  \u251c\u2500 // more folders and files\n\u2502  \u2514\u2500 index.js\n\u251c\u2500 strapi-admin.js // require('./admin')\n\u2514\u2500 strapi-server.js // require('./server')\n"))),(0,a.kt)("p",null,"The folder structure of a Strapi v3 plugin can be migrated to a v4 plugin either ",(0,a.kt)("a",{parentName:"p",href:"#updating-folder-structure-automatically"},"automatically")," or ",(0,a.kt)("a",{parentName:"p",href:"#updating-folder-structure-manually"},"manually"),"."),(0,a.kt)("h2",{id:"updating-folder-structure-automatically"},"Updating folder structure automatically"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The codemod creates a new Strapi v4 plugin, leaving the Strapi v3 plugin in place. We recommend confirming the v4 version of the plugin is working properly before deleting the v3 version.")),(0,a.kt)("p",null,"A codemod can be used to automatically update the folder structure of a plugin for Strapi v4. The codemod performs the following actions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"creation of 2 entry files: ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi-server.js")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi-admin.js"),","),(0,a.kt)("li",{parentName:"ul"},"organization of files and folders into a ",(0,a.kt)("inlineCode",{parentName:"li"},"server")," and an ",(0,a.kt)("inlineCode",{parentName:"li"},"admin")," folders, respectively,"),(0,a.kt)("li",{parentName:"ul"},"conversion of ",(0,a.kt)("inlineCode",{parentName:"li"},"models")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"contentTypes"),","),(0,a.kt)("li",{parentName:"ul"},"and export of ",(0,a.kt)("inlineCode",{parentName:"li"},"services")," as functions.")),(0,a.kt)("p",null,"To execute the codemod, run the following commands in a terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npx @strapi/codemods migrate:plugin <path-to-v3-plugin> [path-for-v4-plugin]\n")),(0,a.kt)("h2",{id:"updating-folder-structure-manually"},"Updating folder structure manually"),(0,a.kt)("p",null,"Manually updating the folder structure requires moving and updating the content of multiple files and folders. These steps are described in the following subsections."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The folder structure is given as an example, and files and folders can be organized freely as long as ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-server.js")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-admin.js")," exist and export the plugin interface.")),(0,a.kt)("h3",{id:"creating-a-server-folder"},"Creating a ",(0,a.kt)("inlineCode",{parentName:"h3"},"server")," folder"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"server")," folder includes all the code for the back end of the plugin. To create it at the root of the plugin folder, run the following command in a terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd <my-plugin-folder-name>\nmkdir server\n")),(0,a.kt)("h3",{id:"moving-controllers-services-and-middlewares"},"Moving controllers, services, and middlewares"),(0,a.kt)("p",null,":::strapi v3/v4 comparison\nIn Strapi v3, controllers, services, and middlewares of a plugin must follow a strict folder structure convention."),(0,a.kt)("p",null,"In Strapi v4, the organization of files and folders for plugins is flexible. However, it is recommended to create dedicated folders for every type of back-end element (e.g. ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/server-api#controllers"},"controllers"),", ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/server-api#services"},"services"),", and ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/server-api#middlewares"},"middlewares"),") inside a ",(0,a.kt)("inlineCode",{parentName:"p"},"server")," folder (see ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/project-structure"},"project structure"),")."),(0,a.kt)("p",null,":::"),(0,a.kt)("p",null,"To update the controllers, services, and middlewares of a plugin to Strapi v4, create specific sub-folders in a ",(0,a.kt)("inlineCode",{parentName:"p"},"server")," folder."),(0,a.kt)("p",null,"Plugin files and folders in Strapi v4 should meet 2 requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Each file in the ",(0,a.kt)("inlineCode",{parentName:"li"},"server/<subfolder-name>/<element-name>")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"server/controllers/my-controller.js"),") should:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"export a function taking the ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi")," instance (object) as a parameter"),(0,a.kt)("li",{parentName:"ul"},"and return an object."))),(0,a.kt)("li",{parentName:"ul"},"Each of the ",(0,a.kt)("inlineCode",{parentName:"li"},"server/<subfolder-name>")," folders should include an ",(0,a.kt)("inlineCode",{parentName:"li"},"index.js")," file that exports all files in the folder.")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example of files and folder for Strapi v4 plugin controllers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/plugins/my-plugin/server/controllers/my-controllerA.js"',title:'"./src/plugins/my-plugin/server/controllers/my-controllerA.js"'},'\nmodule.exports = ({ strapi }) => ({\n  doSomething(ctx) {\n    ctx.body = { message: "HelloWorld" };\n  },\n});\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/plugins/my-plugin/server/controllers/index.js"',title:'"./src/plugins/my-plugin/server/controllers/index.js"'},'\n"use strict";\n\nconst myControllerA = require("./my-controllerA");\nconst myControllerB = require("./my-controllerB");\n\nmodule.exports = {\n  myControllerA,\n  myControllerB,\n};\n\n'))),(0,a.kt)("h3",{id:"moving-the-bootstrap-function"},"Moving the ",(0,a.kt)("inlineCode",{parentName:"h3"},"bootstrap")," function"),(0,a.kt)("p",null,":::strapi v3/v4 comparison\nStrapi v3 has a dedicated ",(0,a.kt)("inlineCode",{parentName:"p"},"config/functions")," folder for each plugin."),(0,a.kt)("p",null,"In Strapi v4, the ",(0,a.kt)("inlineCode",{parentName:"p"},"config")," folder does not necessarily exist for a plugin and ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/server-api#bootstrap"},"the ",(0,a.kt)("inlineCode",{parentName:"a"},"bootstrap")," function")," and other lifecycle functions can be declared elsewhere.\n:::"),(0,a.kt)("p",null,"To update the plugin's ",(0,a.kt)("inlineCode",{parentName:"p"},"bootstrap")," function to Strapi v4:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"move the ",(0,a.kt)("inlineCode",{parentName:"li"},"bootstrap()")," function from ",(0,a.kt)("inlineCode",{parentName:"li"},"server/config/functions/bootstrap.js")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"server/bootstrap.js")),(0,a.kt)("li",{parentName:"ul"},"pass the ",(0,a.kt)("inlineCode",{parentName:"li"},"strapi")," instance (object) as a parameter")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/plugins/my-plugin/server/bootstrap.js"',title:'"./src/plugins/my-plugin/server/bootstrap.js"'},'\n"use strict";\n\nmodule.exports = ({ strapi }) => ({\n  // bootstrap the plugin\n});\n')),(0,a.kt)("h3",{id:"moving-routes"},"Moving routes"),(0,a.kt)("p",null,":::strapi v3/v4 comparison\nStrapi v3 declares routes for a plugin in a specific ",(0,a.kt)("inlineCode",{parentName:"p"},"config/routes.json")," file."),(0,a.kt)("p",null,"In Strapi v4, the ",(0,a.kt)("inlineCode",{parentName:"p"},"config")," folder does not necessarily exist for a plugin and ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/server-api#routes"},"plugin routes")," can be declared in a ",(0,a.kt)("inlineCode",{parentName:"p"},"server/routes/index.json")," file.\n:::"),(0,a.kt)("p",null,"To update plugin routes to Strapi v4, move routes from ",(0,a.kt)("inlineCode",{parentName:"p"},"config/routes.json")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"server/routes/index.json"),"."),(0,a.kt)("p",null,"Routes in Strapi v4 should meet 2 requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Routes should return an array or an object specifying ",(0,a.kt)("inlineCode",{parentName:"li"},"admin")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"content-api")," routes."),(0,a.kt)("li",{parentName:"ul"},"Routes handler names should match the same casing as the controller exports.")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example of controllers export and routes in a Strapi v4 plugin"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/plugins/my-plugin/server/controllers/index.js"',title:'"./src/plugins/my-plugin/server/controllers/index.js"'},'\n"use strict";\n\nconst myControllerA = require("./my-controllerA");\nconst myControllerB = require("./my-controllerB");\n\nmodule.exports = {\n  myControllerA,\n  myControllerB,\n};\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/plugins/my-plugin/server/routes/index.js"',title:'"./src/plugins/my-plugin/server/routes/index.js"'},'\nmodule.exports = [\n  {\n    method: "GET",\n    path: "/my-controller-a",\n    // Camel case handler to match export in server/controllers/index.js\n    handler: "myControllerA.doSomething",\n    config: { policies: [] },\n  },\n];\n'))),(0,a.kt)("h3",{id:"moving-policies"},"Moving policies"),(0,a.kt)("p",null,":::strapi v3/v4 comparison\nStrapi v3 declares policies for a plugin in a specific ",(0,a.kt)("inlineCode",{parentName:"p"},"config/policies")," folder."),(0,a.kt)("p",null,"In Strapi v4, the ",(0,a.kt)("inlineCode",{parentName:"p"},"config")," folder does not necessarily exist for a plugin and ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/server-api#policies"},"plugin policies")," can be declared in dedicated files found under ",(0,a.kt)("inlineCode",{parentName:"p"},"server/policies"),".\n:::"),(0,a.kt)("p",null,"To update plugin policies to Strapi v4:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Move policies from ",(0,a.kt)("inlineCode",{parentName:"p"},"config/policies")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"server/policies/<policy-name>.js"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add an ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," file to the ",(0,a.kt)("inlineCode",{parentName:"p"},"server/policies")," folder and make sure it exports all files in the folder."))),(0,a.kt)("h3",{id:"converting-models-to-content-types"},"Converting models to content-types"),(0,a.kt)("p",null,":::strapi v3/v4 comparison\nStrapi v3 declares plugin models in ",(0,a.kt)("inlineCode",{parentName:"p"},"<model-name>.settings.json")," files found in a ",(0,a.kt)("inlineCode",{parentName:"p"},"models")," folder."),(0,a.kt)("p",null,"In Strapi v4, ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/server-api#content-types"},"plugin content-types")," are declared in ",(0,a.kt)("inlineCode",{parentName:"p"},"schema.json")," files found in a ",(0,a.kt)("inlineCode",{parentName:"p"},"server/content-types/<contentTypeName>")," folder. The ",(0,a.kt)("inlineCode",{parentName:"p"},"schema.json")," files introduce some new properties (see ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/backend-customization/models#model-schema"},"schema documentation"),").\n:::"),(0,a.kt)("p",null,"To convert Strapi v3 models to v4 content-types:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Move the ",(0,a.kt)("inlineCode",{parentName:"p"},"models")," folder under the ",(0,a.kt)("inlineCode",{parentName:"p"},"server")," folder and rename ",(0,a.kt)("inlineCode",{parentName:"p"},"models")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"content-types"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"mv models/ server/content-types/\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Move/rename each model's ",(0,a.kt)("inlineCode",{parentName:"p"},"<modelName>.settings.json")," file to ",(0,a.kt)("inlineCode",{parentName:"p"},"server/content-types/<contentTypeName>/schema.json")," files.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In each ",(0,a.kt)("inlineCode",{parentName:"p"},"<contentTypeName>/schema.json")," file, update ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/backend-customization/models#model-information"},"the ",(0,a.kt)("inlineCode",{parentName:"a"},"info")," object"),", which now requires declaring the 3 new ",(0,a.kt)("inlineCode",{parentName:"p"},"singularName"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"pluralName")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"displayName")," keys and respecting some case-formatting conventions:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="./src/plugins/my-plugin/content-types/<content-type-name>/schema.json"',title:'"./src/plugins/my-plugin/content-types/<content-type-name>/schema.json"'},'\n// ...\n"info": {\n  "singularName": "content-type-name", // kebab-case required\n  "pluralName": "content-type-names", // kebab-case required\n  "displayName": "Content-type name",\n  "name": "Content-type name",\n};\n// ...\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"(",(0,a.kt)("em",{parentName:"p"},"optional"),") If the Strapi v3 model uses lifecycle hooks found in ",(0,a.kt)("inlineCode",{parentName:"p"},"<model-name>.js"),", move/rename the file to ",(0,a.kt)("inlineCode",{parentName:"p"},"server/content-types/<contentTypeName>/lifecycle.js"),", otherwise delete the file.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create an ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," file for each content-type to export the schema and, optionally, lifecycle hooks:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/plugins/my-plugin/server/content-types/<content-type-name>/index.js"',title:'"./src/plugins/my-plugin/server/content-types/<content-type-name>/index.js"'},'\nconst schema = require("./schema.json");\nconst lifecycles = require("./lifecycles.js"); // optional\n\nmodule.exports = {\n  schema,\n  lifecycles, // optional\n};\n'))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"server/content-types/index.js")," file.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"In ",(0,a.kt)("inlineCode",{parentName:"p"},"server/content-types/index.js"),", export all content-types and make sure the key of each content-type matches the ",(0,a.kt)("inlineCode",{parentName:"p"},"singularName")," found in the ",(0,a.kt)("inlineCode",{parentName:"p"},"info")," object of the content-type\u2019s ",(0,a.kt)("inlineCode",{parentName:"p"},"schema.json")," file:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="./src/plugins/my-plugin/server/content-types/content-type-a/schema.json"',title:'"./src/plugins/my-plugin/server/content-types/content-type-a/schema.json"'},'\n"info": {\n  "singularName": "content-type-a", // kebab-case required\n  "pluralName": "content-type-as", // kebab-case required\n  "displayName": "Content-Type A",\n  "name": "Content-Type A",\n};\n')),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/plugins/my-plugin/server/content-types/index.js"',title:'"./src/plugins/my-plugin/server/content-types/index.js"'},'\n"use strict";\n\nconst contentTypeA = require("./content-type-a");\nconst contentTypeB = require("./content-type-b");\n\nmodule.exports = {\n  // Key names should match info.singularName key values found in corresponding schema.json files\n  "content-type-a": contentTypeA,\n  "content-type-b": contentTypeB,\n};\n')))),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Converting Strapi v3 models to v4 content-types also requires updating getters and, optionally, relations (see ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/migration/v3-to-v4/plugin/migrate-back-end"},"plugin back end migration documentation"),").")),(0,a.kt)("h3",{id:"creating-entry-files"},"Creating entry files"),(0,a.kt)("p",null,":::strapi v3/v4 comparison\nStrapi v3 plugins use a strict folder structure convention."),(0,a.kt)("p",null,"In Strapi v4, the folder structure for plugins is flexible. However, each plugin needs at least a ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-server.js")," entry file or a ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-admin.js")," entry file. The 2 entry files are used to take advantage of, respectively, the ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/server-api"},"Server API")," for the back end of the plugin and the ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/api/plugins/admin-panel-api"},"Admin Panel API")," for the front end of the plugin.\n:::"),(0,a.kt)("p",null,"To update the plugin to Strapi v4:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the plugin interacts with Strapi's backend, create the ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-server.js")," back-end entry file at the root of the plugin folder. The file should require all necessary files and export the back-end plugin interface (see ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/migration/v3-to-v4/plugin/migrate-back-end"},"migrating the back end of a plugin"),"). "),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example strapi-server.js and server/index.js entry files"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/strapi-server.js"',title:'"./src/plugins/my-plugin/strapi-server.js"'},"\n\"use strict\";\n\nmodule.exports = require('./server');\n")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./src/plugins/my-plugin/server/index.js"',title:'"./src/plugins/my-plugin/server/index.js"'},"\n\"use strict\";\n\nconst register = require('./register');\nconst bootstrap = require('./bootstrap');\nconst destroy = require('./destroy');\nconst config = require('./config');\nconst contentTypes = require('./content-types');\nconst controllers = require('./controllers');\nconst routes = require('./routes');\nconst middlewares = require('./middlewares');\nconst policies = require('./policies');\nconst services = require('./services');\n\nmodule.exports = {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\n")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the plugin interacts with Strapi's admin panel, create the ",(0,a.kt)("inlineCode",{parentName:"p"},"strapi-admin.js")," front-end entry file at the root of the plugin folder. The file should require all necessary files and export the front-end plugin interface (see ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/migration/v3-to-v4/plugin/migrate-front-end"},"migrating the front end of a plugin"),")."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Example strapi-admin.js entry file"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="./src/plugins/my-plugin/strapi-admin.js"',title:'"./src/plugins/my-plugin/strapi-admin.js"'},'\n"use strict";\n\nmodule.exports = require("./admin/src").default;\n'))))))}c.isMDXComponent=!0},32238:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(83117),a=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"snippets/plugin-migration-intro",id:"snippets/plugin-migration-intro",title:"plugin-migration-intro",description:"This guide is part of the v4 plugin migration guide designed to help you migrate a plugin from Strapi v3.6.x to v4.0.x.",source:"@site/docs/snippets/plugin-migration-intro.md",sourceDirName:"snippets",slug:"/snippets/plugin-migration-intro",permalink:"/aberabook/snippets/plugin-migration-intro",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/snippets/plugin-migration-intro.md",tags:[],version:"current",frontMatter:{}},s={},p=[],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide is part of the ",(0,a.kt)("a",{parentName:"p",href:"/aberabook/dev-docs/migration/v3-to-v4/plugin-migration"},"v4 plugin migration guide")," designed to help you migrate a plugin from Strapi v3.6.x to v4.0.x."))}u.isMDXComponent=!0}}]);