"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[2804],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},22932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>w,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(83117),r=(n(67294),n(3905));const a={title:"Custom policies",description:"Learn how to create custom policies using our FoodAdvisor example",displayed_sidebar:"devDocsSidebar",pagination_prev:"dev-docs/backend-customization/examples/services-and-controllers",pagination_next:"dev-docs/backend-customization/examples/routes"},i="Examples cookbook: Custom policies",s={unversionedId:"dev-docs/backend-customization/examples/policies",id:"dev-docs/backend-customization/examples/policies",title:"Custom policies",description:"Learn how to create custom policies using our FoodAdvisor example",source:"@site/docs/dev-docs/backend-customization/examples/policies.md",sourceDirName:"dev-docs/backend-customization/examples",slug:"/dev-docs/backend-customization/examples/policies",permalink:"/aberabook/dev-docs/backend-customization/examples/policies",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/backend-customization/examples/policies.md",tags:[],version:"current",frontMatter:{title:"Custom policies",description:"Learn how to create custom policies using our FoodAdvisor example",displayed_sidebar:"devDocsSidebar",pagination_prev:"dev-docs/backend-customization/examples/services-and-controllers",pagination_next:"dev-docs/backend-customization/examples/routes"},sidebar:"devDocsSidebar",previous:{title:"Custom services and controllers",permalink:"/aberabook/dev-docs/backend-customization/examples/services-and-controllers"},next:{title:"Custom routes",permalink:"/aberabook/dev-docs/backend-customization/examples/routes"}},l={},c=[{value:"Creating a custom policy",id:"creating-a-custom-policy",level:2},{value:"Sending custom errors through policies",id:"sending-custom-errors-through-policies",level:2},{value:"Using custom errors on the front end",id:"using-custom-errors-on-the-front-end",level:3}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},p=u("SideBySideContainer"),d=u("SideBySideColumn"),m=u("SubtleCallout"),h=u("Tabs"),f=u("TabItem"),k={toc:c};function w(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples-cookbook-custom-policies"},"Examples cookbook: Custom policies"),(0,r.kt)("admonition",{type:"prerequisites"},(0,r.kt)("p",{parentName:"admonition"},"This page is part of the back end customization examples cookbook. Please ensure you've read its ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples"},"introduction"),".")),(0,r.kt)("p",null,"Out of the box, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," does not use any custom policies or route middlewares that could control access to content type endpoints."),(0,r.kt)("p",null,"In Strapi, controlling access to a content-type endpoint can be done either with a policy or route middleware:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"policies are read-only and allow a request to pass or return an error,"),(0,r.kt)("li",{parentName:"ul"},"while route middlewares can perform additional logic.")),(0,r.kt)("p",null,"In our example, let's use a policy."),(0,r.kt)("h2",{id:"creating-a-custom-policy"},"Creating a custom policy"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83d\udcad Context:")),(0,r.kt)("p",null,"Let's say we would like to customize the backend of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," to prevent restaurant owners from creating fake reviews for their businesses using a ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end"},"form previously created")," on the front-end website."),(0,r.kt)(p,{mdxType:"SideBySideContainer"},(0,r.kt)(d,{mdxType:"SideBySideColumn"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83c\udfaf Goals"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'Create a new folder for policies to apply only to the "Reviews" collection type.'),(0,r.kt)("li",{parentName:"ol"},"Create a new policy file."),(0,r.kt)("li",{parentName:"ol"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"findMany()")," method from the Entity Service API to get information about the owner of a restaurant when the ",(0,r.kt)("inlineCode",{parentName:"li"},"/reviews")," endpoint is reached."),(0,r.kt)("li",{parentName:"ol"},"Return an error if the authenticated user is the restaurant's owner, or let the request pass in other cases."))),(0,r.kt)(d,{mdxType:"SideBySideColumn"},(0,r.kt)(m,{title:"Related concepts",mdxType:"SubtleCallout"},(0,r.kt)("p",null,"Additional information can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/policies"},"Policies"),", ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/routes"},"Routes"),", and ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/api/entity-service"},"Entity Service API")," documentation.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83e\uddd1\u200d\ud83d\udcbb Code example:")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api")," folder of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," project, create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"src/api/review/policies/is-owner-review.js")," file with the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/api/review/policies/is-owner-review.js"',title:'"src/api/review/policies/is-owner-review.js"'},"\nmodule.exports = async (policyContext, config, { strapi }) => {\n  const { body } = policyContext.request;\n  const { user } = policyContext.state;\n\n  // Return an error if there is no authenticated user with the request\n  if (!user) {\n    return false;\n  }\n  /**\n   * Queries the Restaurants collection type\n   * using the Entity Service API\n   * to retrieve information about the restaurant's owner.\n   */ \n  const [restaurant] = await strapi.entityService.findMany(\n    'api::restaurant.restaurant',\n    {\n      filters: {\n        slug: body.restaurant,\n      },\n      populate: ['owner'],\n    }\n  );\n  if (!restaurant) {\n    return false;\n  }\n\n  /**\n   * If the user submitting the request is the restaurant's owner,\n   * we don't allow the review creation.\n   */ \n  if (user.id === restaurant.owner.id) {\n    return false;\n  }\n\n  return true;\n};\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Policies or route middlewares should be declared in the configuration of a route to actually control access. Read more about routes in the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/routes"},"reference documentation")," or see an example in the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/routes"},"routes cookbook"),".")),(0,r.kt)("h2",{id:"sending-custom-errors-through-policies"},"Sending custom errors through policies"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83d\udcad Context:")),(0,r.kt)("p",null,"Out of the box, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," sends a default error when a policy refuses access to a route. Let's say we want to customize the error sent when the ",(0,r.kt)("a",{parentName:"p",href:"#creating-a-custom-policy"},"previously created custom policy")," does not allow creating a review."),(0,r.kt)(p,{mdxType:"SideBySideContainer"},(0,r.kt)(d,{mdxType:"SideBySideColumn"},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83c\udfaf Goal:")),(0,r.kt)("p",null,"Configure the custom policy to throw a custom error instead of the default error.")),(0,r.kt)(d,{mdxType:"SideBySideColumn"},(0,r.kt)(m,{title:"Related concept",mdxType:"SubtleCallout"},(0,r.kt)("p",null,"Additional information can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/error-handling"},"Error handling")," documentation.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83e\uddd1\u200d\ud83d\udcbb Code example:")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api")," folder of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," project, update the ",(0,r.kt)("a",{parentName:"p",href:"#creating-a-custom-policy"},"previously created ",(0,r.kt)("inlineCode",{parentName:"a"},"is-owner-review")," custom policy")," as follows (highlighted lines are the only modified lines):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/api/review/policies/is-owner-review.js" showLineNumbers',title:'"src/api/review/policies/is-owner-review.js"',showLineNumbers:!0},"const { errors } = require('@strapi/utils');\nconst { PolicyError } = errors;\n\nmodule.exports = async (policyContext, config, { strapi }) => {\n  const { body } = policyContext.request;\n  const { user } = policyContext.state;\n\n  // Return an error if there is no authenticated user with the request\n  if (!user) {\n    return false;\n  }\n  /**\n   * Queries the Restaurants collection type\n   * using the Entity Service API\n   * to retrieve information about the restaurant's owner.\n   */ \n  const filteredRestaurants = await strapi.entityService.findMany(\n    'api::restaurant.restaurant',\n    {\n      filters: {\n        slug: body.restaurant,\n      },\n      populate: ['owner'],\n    }\n  );\n\n  const restaurant = filteredRestaurants[0];\n\n  if (!restaurant) {\n    return false;\n  }\n\n  /**\n   * If the user submitting the request is the restaurant's owner,\n   * we don't allow the review creation.\n   */\n  if (user.id === restaurant.owner.id) {\n    // highlight-start\n    /**\n     * Throws a custom policy error\n     * instead of just returning false\n     * (which would result into a generic Policy Error).\n     */\n    const error = new ApplicationError(\n      \"The owner of the restaurant cannot submit reviews\",\n      {\n        policy: \"is-owner-review\",\n        errCode: \"RESTAURANT_OWNER_REVIEW\", // can be useful for identifying different errors on the front end\n      }\n    );\n    error.name = \"OwnerReviewError\";\n    throw error;\n    // highlight-end\n  }\n\n  return true;\n};\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Responses sent with default policy error vs. custom policy error:"),(0,r.kt)(h,{mdxType:"Tabs"},(0,r.kt)(f,{value:"default-error",label:"Default error response",mdxType:"TabItem"},(0,r.kt)("p",null,"When a policy refuses access to a route and a default error is thrown, the following response will be sent when trying to query the content-type through the REST API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n  "data": null,\n  "error": {\n      "status": 403,\n      "name": "ForbiddenError",\n      "message": "Policy Failed",\n      "details": {}\n  }\n}\n'))),(0,r.kt)(f,{value:"custom-error",label:"Custom error response",mdxType:"TabItem"},(0,r.kt)("p",null,"When a policy refuses access to a route and the custom policy throws the custom error defined in the code example above, the following response will be sent when trying to query the content-type through the REST API:"),(0,r.kt)("p",null,"Note that because ",(0,r.kt)("inlineCode",{parentName:"p"},"ForbiddenError")," (403) is always replaced with a generic message, we used an ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplicationError")," (400) to send the custom message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n  "data": null,\n  "error": {\n    "status": 400,\n    "name": "OwnerReviewError",\n    "message": "The owner of the restaurant cannot submit reviews",\n    "details": {\n        "policy": "is-owner-review",\n        "errCode": "RESTAURANT_OWNER_REVIEW"\n    }\n  }\n}\n'))))),(0,r.kt)("br",null),(0,r.kt)("h3",{id:"using-custom-errors-on-the-front-end"},"Using custom errors on the front end"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83d\udcad Context:")),(0,r.kt)("p",null,"Out of the box, the Next.js-powered front-end website provided with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," does not display errors or success messages on the front-end website when accessing content. For instance, the website will not inform the user when adding a new review with a ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end"},"previously created form")," is not possible."),(0,r.kt)(p,{mdxType:"SideBySideContainer"},(0,r.kt)(d,{mdxType:"SideBySideColumn"},(0,r.kt)("p",null,"Let's say we want to customize the front end of FoodAdvisor to catch the custom error thrown by a ",(0,r.kt)("a",{parentName:"p",href:"#creating-a-custom-policy"},"previously created custom policy")," and display it to the user with a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/timolins/react-hot-toast"},"React Hot Toast notification"),". As a bonus, another toast notification will be displayed when a review is successfully created.")),(0,r.kt)(d,{mdxType:"SideBySideColumn"},(0,r.kt)("figure",{style:{width:"100%",margin:"0"}},(0,r.kt)("img",{src:"/img/assets/backend-customization/tutorial-owner-cantsubmit.png",alt:"Restaurant owner can't submit reviews"}),(0,r.kt)("em",null,(0,r.kt)("figcaption",{style:{fontSize:"12px"}},"When the restaurant's owner tries to submit a new review, a custom error is returned with the REST API response and a toast notification is displayed on the front-end website."))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83c\udfaf Goals"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Catch the error on the front-end website and display it within a notification."),(0,r.kt)("li",{parentName:"ul"},"Send another notification in case the policy allows the creation of a new review.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\ud83e\uddd1\u200d\ud83d\udcbb Code example:")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"/client")," folder of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/strapi/foodadvisor"},"FoodAdvisor")," project, you could update the ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end"},"previously created ",(0,r.kt)("inlineCode",{parentName:"a"},"new-review")," component")," as follows (modified lines are highlighted):"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example front-end code to display toast notifications for custom errors or successful review creation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/client/components/pages/restaurant/RestaurantContent/Reviews/new-review.js" showLineNumbers',title:'"/client/components/pages/restaurant/RestaurantContent/Reviews/new-review.js"',showLineNumbers:!0},"import { Button, Input, Textarea } from '@nextui-org/react';\nimport { useFormik } from 'formik';\nimport { useRouter } from 'next/router';\nimport React from 'react';\nimport { getStrapiURL } from '../../../../../utils';\n// highlight-start\n/** \n * A notification will be displayed on the front-end using React Hot Toast\n * (See https://github.com/timolins/react-hot-toast).\n * React Hot Toast should be added to your project's dependencies;\n * Use yarn or npm to install it and it will be added to your package.json file.\n */\nimport toast from 'react-hot-toast';\n\nclass UnauthorizedError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\n// highlight-end\n\nconst NewReview = () => {\n  const router = useRouter();\n\n  const { handleSubmit, handleChange, values } = useFormik({\n    initialValues: {\n      note: '',\n      content: '',\n    },\n    onSubmit: async (values) => {\n      // highlight-start\n      /**\n       * The previously added code is wrapped in a try/catch block.\n       */\n      try {\n        // highlight-end\n        const res = await fetch(getStrapiURL('/reviews'), {\n          method: 'POST',\n          body: JSON.stringify({\n            restaurant: router.query.slug,\n            ...values,\n          }),\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n            'Content-Type': 'application/json',\n          },\n        });\n\n        // highlight-start\n        const { data, error } = await res.json();\n        /**\n         * If the Strapi backend server returns an error,\n         * we use the custom error message to throw a custom error.\n         * If the request is a success, we display a success message.\n         * In both cases, a toast notification is displayed on the front-end.\n         */\n        if (error) {\n          throw new UnauthorizedError(error.message);\n        }\n        toast.success('Review created!');\n        return data;\n      } catch (err) {\n        toast.error(err.message);\n        console.error(err);\n      }\n    },\n    // highlight-end\n  });\n  return (\n    <div className=\"my-6\">\n      <h1 className=\"font-bold text-2xl mb-3\">Write your review</h1>\n      <form onSubmit={handleSubmit} className=\"flex flex-col gap-y-4\">\n        <Input\n          onChange={handleChange}\n          name=\"note\"\n          type=\"number\"\n          min={1}\n          max={5}\n          label=\"Stars\"\n        />\n        <Textarea\n          name=\"content\"\n          onChange={handleChange}\n          placeholder=\"What do you think about this restaurant?\"\n        />\n        <Button\n          type=\"submit\"\n          className=\"bg-primary text-white rounded-md self-start\"\n        >\n          Send\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewReview;\n"))),(0,r.kt)("br",null),(0,r.kt)("p",null,":::strapi What's next?\nLearn more about how to configure ",(0,r.kt)("a",{parentName:"p",href:"/dev-docs/backend-customization/examples/routes"},"custom routes")," to use your custom policies, and how these custom routes can be used to tweak a Strapi-based application.\n:::"))}w.isMDXComponent=!0}}]);