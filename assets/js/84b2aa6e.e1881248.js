"use strict";(self.webpackChunkstrapi_docs=self.webpackChunkstrapi_docs||[]).push([[5049],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=i,f=u["".concat(p,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},27705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(83117),i=(n(67294),n(3905));const r={title:"Upload",displayed_sidebar:"devDocsSidebar",description:"Upload any kind of file on your server or external providers."},l="Upload plugin",o={unversionedId:"dev-docs/plugins/upload",id:"dev-docs/plugins/upload",title:"Upload",description:"Upload any kind of file on your server or external providers.",source:"@site/docs/dev-docs/plugins/upload.md",sourceDirName:"dev-docs/plugins",slug:"/dev-docs/plugins/upload",permalink:"/aberabook/dev-docs/plugins/upload",draft:!1,editUrl:"https://github.com/labs-solo/aberabook/edit/main/docusaurus/docs/dev-docs/plugins/upload.md",tags:[],version:"current",frontMatter:{title:"Upload",displayed_sidebar:"devDocsSidebar",description:"Upload any kind of file on your server or external providers."},sidebar:"devDocsSidebar",previous:{title:"Sentry",permalink:"/aberabook/dev-docs/plugins/sentry"},next:{title:"Users & Permissions",permalink:"/aberabook/dev-docs/plugins/users-permissions"}},p={},s=[{value:"Configuration",id:"configuration",level:2},{value:"Local server",id:"local-server",level:3},{value:"Max file size",id:"max-file-size",level:3},{value:"Upload request timeout",id:"upload-request-timeout",level:3},{value:"Responsive Images",id:"responsive-images",level:3},{value:"Endpoints",id:"endpoints",level:2},{value:"Examples",id:"examples",level:2},{value:"Upload files",id:"upload-files",level:3},{value:"Upload entry files",id:"upload-entry-files",level:3},{value:"Upload files at entry creation",id:"upload-files-at-entry-creation",level:3},{value:"Models definition",id:"models-definition",level:3},{value:"Update fileInfo",id:"update-fileinfo",level:3},{value:"Upload single file from an API controller",id:"upload-single-file-from-an-api-controller",level:3}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},m=d("Tabs"),u=d("TabItem"),c={toc:s};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"upload-plugin"},"Upload plugin"),(0,i.kt)("p",null,"The Upload plugin is the backend powering the Media Library plugin available by default in the Strapi admin panel. Using either the Media Library from the admin panel or the upload API directly, you can upload any kind of file for use in your Strapi application."),(0,i.kt)("p",null,"By default Strapi provides a ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/providers"},"provider")," that uploads files to a local directory, which by default will be ",(0,i.kt)("inlineCode",{parentName:"p"},"public/uploads/")," in your Strapi project. Additional providers are available should you want to upload your files to another location."),(0,i.kt)("p",null,"The providers maintained by Strapi include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://market.strapi.io/providers/@strapi-provider-upload-aws-s3"},"Amazon S3")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://market.strapi.io/providers/@strapi-provider-upload-cloudinary"},"Cloudinary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@strapi/provider-upload-local"},"Local"))),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"This section details configuration options for the default upload provider. If using another provider (e.g. AWS S3 or Cloudinary), see the available configuration parameters in that provider's documentation."),(0,i.kt)("h3",{id:"local-server"},"Local server"),(0,i.kt)("p",null,"By default Strapi accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"localServer")," configurations for locally uploaded files. These will be passed as the options for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/koajs/static"},"koa-static"),"."),(0,i.kt)("p",null,"You can provide them by creating or editing the ",(0,i.kt)("inlineCode",{parentName:"p"},"./config/plugins.js")," file. The following example sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"max-age")," header."),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="./config/plugins.js"',title:'"./config/plugins.js"'},"\nmodule.exports = ({ env })=>({\n  upload: {\n    config: {\n      providerOptions: {\n        localServer: {\n          maxage: 300000\n        },\n      },\n    },\n  },\n});\n\n"))),(0,i.kt)(u,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./config/plugins.ts"',title:'"./config/plugins.ts"'},"\nexport default ({ env }) => ({\n  upload: {\n    config: {\n      providerOptions: {\n        localServer: {\n          maxage: 300000\n        },\n      },\n    },\n  },\n});\n")))),(0,i.kt)("h3",{id:"max-file-size"},"Max file size"),(0,i.kt)("p",null,"Currently the Strapi middleware in charge of parsing requests needs to be configured to support file sizes larger than the default of 200MB in addition to provider options passed to the upload plugin for sizeLimit."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You may also need to adjust any upstream proxies, load balancers, or firewalls to allow for larger file sizes.",(0,i.kt)("br",null),"\n(e.g. ",(0,i.kt)("a",{parentName:"p",href:"http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size"},"Nginx")," has a config setting called ",(0,i.kt)("inlineCode",{parentName:"p"},"client_max_body_size")," that will need to be adjusted since it's default is only 1mb.)")),(0,i.kt)("p",null,"The library we use is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/dlau/koa-body"},(0,i.kt)("inlineCode",{parentName:"a"},"koa-body")),", and it uses the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/felixge/node-formidable"},(0,i.kt)("inlineCode",{parentName:"a"},"node-formidable"))," library to process files."),(0,i.kt)("p",null,"You can pass configuration to the middleware directly by setting it in the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/configurations/middlewares#body"},(0,i.kt)("inlineCode",{parentName:"a"},"body")," middleware")," configuration in ",(0,i.kt)("inlineCode",{parentName:"p"},"./config/middlewares.js"),":"),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./config/middlewares.js"',title:'"path:','./config/middlewares.js"':!0},'\nmodule.exports = [\n  // ...\n  {\n    name: "strapi::body",\n    config: {\n      formLimit: "256mb", // modify form body\n      jsonLimit: "256mb", // modify JSON body\n      textLimit: "256mb", // modify text body\n      formidable: {\n        maxFileSize: 250 * 1024 * 1024, // multipart data, modify here limit of uploaded file size\n      },\n    },\n  },\n  // ...\n];\n'))),(0,i.kt)(u,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./config/middlewares.ts"',title:'"path:','./config/middlewares.ts"':!0},'\nexport default [\n  // ...\n  {\n    name: "strapi::body",\n    config: {\n      formLimit: "256mb", // modify form body\n      jsonLimit: "256mb", // modify JSON body\n      textLimit: "256mb", // modify text body\n      formidable: {\n        maxFileSize: 250 * 1024 * 1024, // multipart data, modify here limit of uploaded file size\n      },\n    },\n  },\n  // ...\n];\n')))),(0,i.kt)("p",null,"In addition to the middleware configuration, you can pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"sizeLimit"),", which is an integer in bytes, in the ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/configurations/plugins"},"plugin configuration")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"./config/plugins.js"),":"),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./config/plugins.js"',title:'"path:','./config/plugins.js"':!0},"\nmodule.exports = {\n  // ...\n  upload: {\n    config: {\n      sizeLimit: 250 * 1024 * 1024 // 256mb in bytes\n    }\n  }\n};\n"))),(0,i.kt)(u,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./config/plugins.ts"',title:'"path:','./config/plugins.ts"':!0},"\nexport default {\n  // ...\n  upload: {\n    config: {\n      sizeLimit: 250 * 1024 * 1024 // 256mb in bytes\n    }\n  }\n};\n")))),(0,i.kt)("h3",{id:"upload-request-timeout"},"Upload request timeout"),(0,i.kt)("p",null,"By default, the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"strapi.server.httpServer.requestTimeout")," is set to 330 seconds. This includes uploads. To make it possible for users with slow internet connection to upload large files, it might be required to increase this timeout limit. The recommended way to do it is by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"http.serverOptions.requestTimeout")," parameter in the ",(0,i.kt)("inlineCode",{parentName:"p"},"config/server.js|ts")," file (see ",(0,i.kt)("a",{parentName:"p",href:"/dev-docs/configurations/server"},"server configuration"),".\nAn alternate method is to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"requestTimeout")," value in the ",(0,i.kt)("inlineCode",{parentName:"p"},"bootstrap")," function that runs before Strapi gets started. This is useful in cases where it needs to change programmatically \u2014 for example, to temporarily disable and re-enable it:"),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./index.js"',title:'"path:','./index.js"':!0},"\nmodule.exports = {\n\n  //...\n\n  bootstrap({ strapi }) {\n    // Set the requestTimeout to 1,800,000 milliseconds (30 minutes):\n    strapi.server.httpServer.requestTimeout = 30 * 60 * 1000;\n  },\n};\n"))),(0,i.kt)(u,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="path: ./index.ts"',title:'"path:','./index.ts"':!0},"\nexport default {\n\n  //...\n\n  bootstrap({ strapi }) {\n    // Set the requestTimeout to 1,800,000 milliseconds (30 minutes):\n    strapi.server.httpServer.requestTimeout = 30 * 60 * 1000;\n  },\n};\n")))),(0,i.kt)("h3",{id:"responsive-images"},"Responsive Images"),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"Enable responsive friendly upload")," setting is enabled in the settings panel the plugin will generate the following responsive image sizes:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Largest Dimension"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"large"),(0,i.kt)("td",{parentName:"tr",align:"left"},"1000px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"medium"),(0,i.kt)("td",{parentName:"tr",align:"left"},"750px")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"small"),(0,i.kt)("td",{parentName:"tr",align:"left"},"500px")))),(0,i.kt)("p",null,"These sizes can be overridden in ",(0,i.kt)("inlineCode",{parentName:"p"},"./config/plugins.js"),":"),(0,i.kt)(m,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(u,{value:"javascript",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./config/plugins.js"',title:'"path:','./config/plugins.js"':!0},"\nmodule.exports = ({ env }) => ({\n  upload: {\n    config: {\n      breakpoints: {\n        xlarge: 1920,\n        large: 1000,\n        medium: 750,\n        small: 500,\n        xsmall: 64\n      },\n    },\n  },\n});\n"))),(0,i.kt)(u,{value:"typescript",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="path: ./config/plugins.ts"',title:'"path:','./config/plugins.ts"':!0},"\nexport default ({ env }) => ({\n  upload: {\n    config: {\n      breakpoints: {\n        xlarge: 1920,\n        large: 1000,\n        medium: 750,\n        small: 500,\n        xsmall: 64\n      },\n    },\n  },\n});\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"  Breakpoint changes will only apply to new images, existing images will not be resized or have new sizes generated.")),(0,i.kt)("h2",{id:"endpoints"},"Endpoints"),(0,i.kt)("style",{lang:"stylus"},"#endpoint-table table display table width 100% tr border none &:nth-child(2n) background-color white tbody tr border-top 1px solid #dfe2e5 th, td border none padding 1.2em 1em border-right 1px solid #dfe2e5 &:last-child border-right none"),(0,i.kt)("div",{id:"endpoint-table"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Method"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Path"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"GET"),(0,i.kt)("td",{parentName:"tr",align:"left"},"/api/upload/files"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Get a list of files")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"GET"),(0,i.kt)("td",{parentName:"tr",align:"left"},"/api/upload/files/:id"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Get a specific file")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"POST"),(0,i.kt)("td",{parentName:"tr",align:"left"},"/api/upload"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Upload files")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"POST"),(0,i.kt)("td",{parentName:"tr",align:"left"},"/api/upload?id=x"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Update fileInfo")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"DELETE"),(0,i.kt)("td",{parentName:"tr",align:"left"},"/api/upload/files/:id"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Delete a file"))))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"/user-docs/media-library/organizing-assets-with-folders"},"Folders"),' are an admin panel feature and are not part of the REST or the GraphQL API. Files uploaded through the REST or GraphQL API are located in the automatically created "API Uploads" folder.')),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"upload-files"},"Upload files"),(0,i.kt)("p",null,"Upload one or more files to your application."),(0,i.kt)("p",null,"The following parameters are accepted:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"files"),": The file(s) to upload. The value(s) can be a Buffer or Stream.")),(0,i.kt)(m,{mdxType:"Tabs"},(0,i.kt)(u,{value:"browser",label:"BROWSER",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  \x3c!-- Can be multiple files --\x3e\n  <input type="file" name="files" />\n  <input type="submit" value="Submit" />\n</form>\n\n<script type="text/javascript">\n  const form = document.querySelector(\'form\');\n\n  form.addEventListener(\'submit\', async (e) => {\n    e.preventDefault();\n\n    await fetch(\'/api/upload\', {\n      method: \'post\',\n      body: new FormData(e.target)\n    });\n  });\n<\/script>\n'))),(0,i.kt)(u,{value:"node.js",label:"NODE.JS",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { FormData } from 'formdata-node';\nimport fetch, { blobFrom } from 'node-fetch';\n\nconst file = await blobFrom('./1.png', 'image/png');\nconst form = new FormData();\n\nform.append('files', file, \"1.png\");\n\nconst response = await fetch('http://localhost:1337/api/upload', {\n  method: 'post',\n  body: form,\n});\n\n")))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You have to send FormData in your request body.")),(0,i.kt)("h3",{id:"upload-entry-files"},"Upload entry files"),(0,i.kt)("p",null,"Upload one or more files that will be linked to a specific entry."),(0,i.kt)("p",null,"The following parameters are accepted:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"files")),(0,i.kt)("td",{parentName:"tr",align:null},"The file(s) to upload. The value(s) can be a Buffer or Stream.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"path")," (optional)"),(0,i.kt)("td",{parentName:"tr",align:null},"The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"refId")),(0,i.kt)("td",{parentName:"tr",align:null},"The ID of the entry which the file(s) will be linked to.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ref")),(0,i.kt)("td",{parentName:"tr",align:null},"The unique ID (uid) of the model which the file(s) will be linked to (see more below).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"source")," (optional)"),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the plugin where the model is located.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"field")),(0,i.kt)("td",{parentName:"tr",align:null},"The field of the entry which the file(s) will be precisely linked to.")))),(0,i.kt)("p",null,"For example, given the ",(0,i.kt)("inlineCode",{parentName:"p"},"Restaurant")," model attributes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="path: ./src/api/restaurant/content-types/restaurant/schema.json"',title:'"path:','./src/api/restaurant/content-types/restaurant/schema.json"':!0},'\n{\n  // ...\n  "attributes": {\n    "name": {\n      "type": "string"\n    },\n    "cover": {\n      "type": "media",\n      "multiple": false,\n    }\n  }\n// ...\n}\n')),(0,i.kt)("p",null,"The corresponding code is be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  \x3c!-- Can be multiple files if you setup "collection" instead of "model" --\x3e\n  <input type="file" name="files" />\n  <input type="text" name="ref" value="api::restaurant.restaurant" />\n  <input type="text" name="refId" value="5c126648c7415f0c0ef1bccd" />\n  <input type="text" name="field" value="cover" />\n  <input type="submit" value="Submit" />\n</form>\n\n<script type="text/javascript">\n  const form = document.querySelector(\'form\');\n\n  form.addEventListener(\'submit\', async (e) => {\n    e.preventDefault();\n\n    await fetch(\'/api/upload\', {\n      method: \'post\',\n      body: new FormData(e.target)\n    });\n  });\n<\/script>\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You have to send FormData in your request body.")),(0,i.kt)("h3",{id:"upload-files-at-entry-creation"},"Upload files at entry creation"),(0,i.kt)("p",null,"You can also add files during your entry creation."),(0,i.kt)("p",null,"For example, given the ",(0,i.kt)("inlineCode",{parentName:"p"},"Restaurant")," model attributes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="path: ./src/api/restaurant/content-types/restaurant/schema.json"',title:'"path:','./src/api/restaurant/content-types/restaurant/schema.json"':!0},'\n{\n  // ...\n  "attributes": {\n    "name": {\n      "type": "string"\n    },\n    "cover": {\n      "type": "media",\n      "multiple": false,\n    }\n  }\n  // ...\n}\n')),(0,i.kt)("p",null,"The corresponding code would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n  \x3c!-- Can be multiple files if you setup "collection" instead of "model" --\x3e\n  <input type="text" name="name" />\n  <input type="file" name="cover" />\n  <input type="submit" value="Submit" />\n</form>\n\n<script type="text/javascript">\n  const form = document.querySelector(\'form\');\n\n  form.addEventListener(\'submit\', async (e) => {\n    e.preventDefault();\n\n    const data = {};\n    const formData = new FormData();\n\n    form.elements\n      .forEach(({ name, type, value, files, ...element }) => {\n        if (![\'submit\', \'file\'].includes(type)) {\n          data[name] = value;\n        } else if (type === \'file\') {\n          files.forEach((file) => {\n            formData.append(`files.${name}`, file, file.name);\n          });\n        }\n      });\n\n    formData.append(\'data\', JSON.stringify(data));\n\n    await fetch(\'/api/restaurants\', {\n      method: \'post\',\n      body: formData\n    });\n  });\n<\/script>\n')),(0,i.kt)("p",null,"Your entry data has to be contained in a ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," key and you need to ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON.stringify")," this object. The keys for files need to be prefixed with ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," (e.g. for a cover attribute: ",(0,i.kt)("inlineCode",{parentName:"p"},"files.cover"),")."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you want to upload files for a repeatable component, you will have to specify the zero-based index of the item you want to add the file to, using the following syntax: ",(0,i.kt)("inlineCode",{parentName:"p"},"files.my_component_name[the_index].attribute_name"),". For instance, if you put 3 components and the file is for the second one, the index will be 1.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"You have to send FormData in your request body.")),(0,i.kt)("h3",{id:"models-definition"},"Models definition"),(0,i.kt)("p",null,"Adding a file attribute to a model (or the model of another plugin) is like adding a new association."),(0,i.kt)("p",null,"In the first example below, you will be able to upload and attach one file to the avatar attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="path: ./src/api/restaurant/content-types/restaurant/schema.json"',title:'"path:','./src/api/restaurant/content-types/restaurant/schema.json"':!0},'\n{\n  // ...\n  {\n    "attributes": {\n      "pseudo": {\n        "type": "string",\n        "required": true\n      },\n      "email": {\n        "type": "email",\n        "required": true,\n        "unique": true\n      },\n      "avatar": {\n        "type": "media",\n        "multiple": false,\n      }\n    }\n  }\n  // ...\n}\n\n')),(0,i.kt)("p",null,"In our second example, you can upload and attach multiple pictures to the restaurant."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="path: ./src/api/restaurant/content-types/restaurant/schema.json"',title:'"path:','./src/api/restaurant/content-types/restaurant/schema.json"':!0},'\n{\n  // ...\n  {\n    "attributes": {\n      "name": {\n        "type": "string",\n        "required": true\n      },\n      "covers": {\n        "type": "media",\n        "multiple": true,\n      }\n    }\n  }\n  // ...\n}\n')),(0,i.kt)("h3",{id:"update-fileinfo"},"Update fileInfo"),(0,i.kt)("p",null,"Update a file in your application."),(0,i.kt)("p",null,"The following parameters are accepted:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fileInfo"),": The fileInfo to update.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { FormData } from 'formdata-node';\nimport fetch from 'node-fetch';\n\nconst fileId = 50;\nconst newFileData = {\n  alternativeText: 'My new alternative text for this image!',\n};\n\nconst form = new FormData();\n\nform.append('fileInfo', JSON.stringify(newFileData));\n\nconst response = await fetch(`http://localhost:1337/api/upload?id=${fileId}`, {\n  method: 'post',\n  body: form,\n});\n\n")),(0,i.kt)("h3",{id:"upload-single-file-from-an-api-controller"},"Upload single file from an API controller"),(0,i.kt)("p",null,"Add a file to Media Library from the backend."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'async create(ctx) {\n\n  // ...\n\n  const { body, files } = ctx.request;\n\n  const file = files["files.uploadedFile"];\n\n  const createdFiles = await strapi.plugins.upload.services.upload.upload({\n    data: {\n      fileInfo: {\n        name: "Name",\n        caption: "Caption",\n        alternativeText: "Alternative Text",\n      },\n    },\n    files: file,\n  });\n\n  // ...\n\n},\n')))}f.isMDXComponent=!0}}]);